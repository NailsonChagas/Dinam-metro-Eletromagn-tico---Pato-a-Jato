
dinamometro.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008d04  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  08008e10  08008e10  00009e10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008e7c  08008e7c  0000a17c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08008e7c  08008e7c  00009e7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008e84  08008e84  0000a17c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008e84  08008e84  00009e84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008e88  08008e88  00009e88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000017c  20000000  08008e8c  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000129c  2000017c  08009008  0000a17c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001418  08009008  0000a418  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000a17c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011d43  00000000  00000000  0000a1a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000032b9  00000000  00000000  0001bee8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001058  00000000  00000000  0001f1a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c60  00000000  00000000  00020200  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a0ea  00000000  00000000  00020e60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012f10  00000000  00000000  0003af4a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008ce93  00000000  00000000  0004de5a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000daced  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000043a8  00000000  00000000  000dad30  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000097  00000000  00000000  000df0d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000017c 	.word	0x2000017c
 8000128:	00000000 	.word	0x00000000
 800012c:	08008df8 	.word	0x08008df8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000180 	.word	0x20000180
 8000148:	08008df8 	.word	0x08008df8

0800014c <__aeabi_frsub>:
 800014c:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000150:	e002      	b.n	8000158 <__addsf3>
 8000152:	bf00      	nop

08000154 <__aeabi_fsub>:
 8000154:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000158 <__addsf3>:
 8000158:	0042      	lsls	r2, r0, #1
 800015a:	bf1f      	itttt	ne
 800015c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000160:	ea92 0f03 	teqne	r2, r3
 8000164:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000168:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800016c:	d06a      	beq.n	8000244 <__addsf3+0xec>
 800016e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000172:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000176:	bfc1      	itttt	gt
 8000178:	18d2      	addgt	r2, r2, r3
 800017a:	4041      	eorgt	r1, r0
 800017c:	4048      	eorgt	r0, r1
 800017e:	4041      	eorgt	r1, r0
 8000180:	bfb8      	it	lt
 8000182:	425b      	neglt	r3, r3
 8000184:	2b19      	cmp	r3, #25
 8000186:	bf88      	it	hi
 8000188:	4770      	bxhi	lr
 800018a:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 800018e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000192:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000196:	bf18      	it	ne
 8000198:	4240      	negne	r0, r0
 800019a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800019e:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 80001a2:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 80001a6:	bf18      	it	ne
 80001a8:	4249      	negne	r1, r1
 80001aa:	ea92 0f03 	teq	r2, r3
 80001ae:	d03f      	beq.n	8000230 <__addsf3+0xd8>
 80001b0:	f1a2 0201 	sub.w	r2, r2, #1
 80001b4:	fa41 fc03 	asr.w	ip, r1, r3
 80001b8:	eb10 000c 	adds.w	r0, r0, ip
 80001bc:	f1c3 0320 	rsb	r3, r3, #32
 80001c0:	fa01 f103 	lsl.w	r1, r1, r3
 80001c4:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80001c8:	d502      	bpl.n	80001d0 <__addsf3+0x78>
 80001ca:	4249      	negs	r1, r1
 80001cc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001d0:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 80001d4:	d313      	bcc.n	80001fe <__addsf3+0xa6>
 80001d6:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 80001da:	d306      	bcc.n	80001ea <__addsf3+0x92>
 80001dc:	0840      	lsrs	r0, r0, #1
 80001de:	ea4f 0131 	mov.w	r1, r1, rrx
 80001e2:	f102 0201 	add.w	r2, r2, #1
 80001e6:	2afe      	cmp	r2, #254	@ 0xfe
 80001e8:	d251      	bcs.n	800028e <__addsf3+0x136>
 80001ea:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 80001ee:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001f2:	bf08      	it	eq
 80001f4:	f020 0001 	biceq.w	r0, r0, #1
 80001f8:	ea40 0003 	orr.w	r0, r0, r3
 80001fc:	4770      	bx	lr
 80001fe:	0049      	lsls	r1, r1, #1
 8000200:	eb40 0000 	adc.w	r0, r0, r0
 8000204:	3a01      	subs	r2, #1
 8000206:	bf28      	it	cs
 8000208:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 800020c:	d2ed      	bcs.n	80001ea <__addsf3+0x92>
 800020e:	fab0 fc80 	clz	ip, r0
 8000212:	f1ac 0c08 	sub.w	ip, ip, #8
 8000216:	ebb2 020c 	subs.w	r2, r2, ip
 800021a:	fa00 f00c 	lsl.w	r0, r0, ip
 800021e:	bfaa      	itet	ge
 8000220:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000224:	4252      	neglt	r2, r2
 8000226:	4318      	orrge	r0, r3
 8000228:	bfbc      	itt	lt
 800022a:	40d0      	lsrlt	r0, r2
 800022c:	4318      	orrlt	r0, r3
 800022e:	4770      	bx	lr
 8000230:	f092 0f00 	teq	r2, #0
 8000234:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000238:	bf06      	itte	eq
 800023a:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 800023e:	3201      	addeq	r2, #1
 8000240:	3b01      	subne	r3, #1
 8000242:	e7b5      	b.n	80001b0 <__addsf3+0x58>
 8000244:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000248:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800024c:	bf18      	it	ne
 800024e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000252:	d021      	beq.n	8000298 <__addsf3+0x140>
 8000254:	ea92 0f03 	teq	r2, r3
 8000258:	d004      	beq.n	8000264 <__addsf3+0x10c>
 800025a:	f092 0f00 	teq	r2, #0
 800025e:	bf08      	it	eq
 8000260:	4608      	moveq	r0, r1
 8000262:	4770      	bx	lr
 8000264:	ea90 0f01 	teq	r0, r1
 8000268:	bf1c      	itt	ne
 800026a:	2000      	movne	r0, #0
 800026c:	4770      	bxne	lr
 800026e:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000272:	d104      	bne.n	800027e <__addsf3+0x126>
 8000274:	0040      	lsls	r0, r0, #1
 8000276:	bf28      	it	cs
 8000278:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000282:	bf3c      	itt	cc
 8000284:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000288:	4770      	bxcc	lr
 800028a:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 800028e:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000292:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000296:	4770      	bx	lr
 8000298:	ea7f 6222 	mvns.w	r2, r2, asr #24
 800029c:	bf16      	itet	ne
 800029e:	4608      	movne	r0, r1
 80002a0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002a4:	4601      	movne	r1, r0
 80002a6:	0242      	lsls	r2, r0, #9
 80002a8:	bf06      	itte	eq
 80002aa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002ae:	ea90 0f01 	teqeq	r0, r1
 80002b2:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 80002b6:	4770      	bx	lr

080002b8 <__aeabi_ui2f>:
 80002b8:	f04f 0300 	mov.w	r3, #0
 80002bc:	e004      	b.n	80002c8 <__aeabi_i2f+0x8>
 80002be:	bf00      	nop

080002c0 <__aeabi_i2f>:
 80002c0:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 80002c4:	bf48      	it	mi
 80002c6:	4240      	negmi	r0, r0
 80002c8:	ea5f 0c00 	movs.w	ip, r0
 80002cc:	bf08      	it	eq
 80002ce:	4770      	bxeq	lr
 80002d0:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 80002d4:	4601      	mov	r1, r0
 80002d6:	f04f 0000 	mov.w	r0, #0
 80002da:	e01c      	b.n	8000316 <__aeabi_l2f+0x2a>

080002dc <__aeabi_ul2f>:
 80002dc:	ea50 0201 	orrs.w	r2, r0, r1
 80002e0:	bf08      	it	eq
 80002e2:	4770      	bxeq	lr
 80002e4:	f04f 0300 	mov.w	r3, #0
 80002e8:	e00a      	b.n	8000300 <__aeabi_l2f+0x14>
 80002ea:	bf00      	nop

080002ec <__aeabi_l2f>:
 80002ec:	ea50 0201 	orrs.w	r2, r0, r1
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 80002f8:	d502      	bpl.n	8000300 <__aeabi_l2f+0x14>
 80002fa:	4240      	negs	r0, r0
 80002fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000300:	ea5f 0c01 	movs.w	ip, r1
 8000304:	bf02      	ittt	eq
 8000306:	4684      	moveq	ip, r0
 8000308:	4601      	moveq	r1, r0
 800030a:	2000      	moveq	r0, #0
 800030c:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000310:	bf08      	it	eq
 8000312:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000316:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 800031a:	fabc f28c 	clz	r2, ip
 800031e:	3a08      	subs	r2, #8
 8000320:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000324:	db10      	blt.n	8000348 <__aeabi_l2f+0x5c>
 8000326:	fa01 fc02 	lsl.w	ip, r1, r2
 800032a:	4463      	add	r3, ip
 800032c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000330:	f1c2 0220 	rsb	r2, r2, #32
 8000334:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000338:	fa20 f202 	lsr.w	r2, r0, r2
 800033c:	eb43 0002 	adc.w	r0, r3, r2
 8000340:	bf08      	it	eq
 8000342:	f020 0001 	biceq.w	r0, r0, #1
 8000346:	4770      	bx	lr
 8000348:	f102 0220 	add.w	r2, r2, #32
 800034c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000350:	f1c2 0220 	rsb	r2, r2, #32
 8000354:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000358:	fa21 f202 	lsr.w	r2, r1, r2
 800035c:	eb43 0002 	adc.w	r0, r3, r2
 8000360:	bf08      	it	eq
 8000362:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000366:	4770      	bx	lr

08000368 <__aeabi_fmul>:
 8000368:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800036c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000370:	bf1e      	ittt	ne
 8000372:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000376:	ea92 0f0c 	teqne	r2, ip
 800037a:	ea93 0f0c 	teqne	r3, ip
 800037e:	d06f      	beq.n	8000460 <__aeabi_fmul+0xf8>
 8000380:	441a      	add	r2, r3
 8000382:	ea80 0c01 	eor.w	ip, r0, r1
 8000386:	0240      	lsls	r0, r0, #9
 8000388:	bf18      	it	ne
 800038a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800038e:	d01e      	beq.n	80003ce <__aeabi_fmul+0x66>
 8000390:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000394:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000398:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 800039c:	fba0 3101 	umull	r3, r1, r0, r1
 80003a0:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 80003a4:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 80003a8:	bf3e      	ittt	cc
 80003aa:	0049      	lslcc	r1, r1, #1
 80003ac:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003b0:	005b      	lslcc	r3, r3, #1
 80003b2:	ea40 0001 	orr.w	r0, r0, r1
 80003b6:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 80003ba:	2afd      	cmp	r2, #253	@ 0xfd
 80003bc:	d81d      	bhi.n	80003fa <__aeabi_fmul+0x92>
 80003be:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80003c2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003c6:	bf08      	it	eq
 80003c8:	f020 0001 	biceq.w	r0, r0, #1
 80003cc:	4770      	bx	lr
 80003ce:	f090 0f00 	teq	r0, #0
 80003d2:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80003d6:	bf08      	it	eq
 80003d8:	0249      	lsleq	r1, r1, #9
 80003da:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003de:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003e2:	3a7f      	subs	r2, #127	@ 0x7f
 80003e4:	bfc2      	ittt	gt
 80003e6:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 80003ea:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80003ee:	4770      	bxgt	lr
 80003f0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80003f4:	f04f 0300 	mov.w	r3, #0
 80003f8:	3a01      	subs	r2, #1
 80003fa:	dc5d      	bgt.n	80004b8 <__aeabi_fmul+0x150>
 80003fc:	f112 0f19 	cmn.w	r2, #25
 8000400:	bfdc      	itt	le
 8000402:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000406:	4770      	bxle	lr
 8000408:	f1c2 0200 	rsb	r2, r2, #0
 800040c:	0041      	lsls	r1, r0, #1
 800040e:	fa21 f102 	lsr.w	r1, r1, r2
 8000412:	f1c2 0220 	rsb	r2, r2, #32
 8000416:	fa00 fc02 	lsl.w	ip, r0, r2
 800041a:	ea5f 0031 	movs.w	r0, r1, rrx
 800041e:	f140 0000 	adc.w	r0, r0, #0
 8000422:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000426:	bf08      	it	eq
 8000428:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800042c:	4770      	bx	lr
 800042e:	f092 0f00 	teq	r2, #0
 8000432:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000436:	bf02      	ittt	eq
 8000438:	0040      	lsleq	r0, r0, #1
 800043a:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 800043e:	3a01      	subeq	r2, #1
 8000440:	d0f9      	beq.n	8000436 <__aeabi_fmul+0xce>
 8000442:	ea40 000c 	orr.w	r0, r0, ip
 8000446:	f093 0f00 	teq	r3, #0
 800044a:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 800044e:	bf02      	ittt	eq
 8000450:	0049      	lsleq	r1, r1, #1
 8000452:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000456:	3b01      	subeq	r3, #1
 8000458:	d0f9      	beq.n	800044e <__aeabi_fmul+0xe6>
 800045a:	ea41 010c 	orr.w	r1, r1, ip
 800045e:	e78f      	b.n	8000380 <__aeabi_fmul+0x18>
 8000460:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000464:	ea92 0f0c 	teq	r2, ip
 8000468:	bf18      	it	ne
 800046a:	ea93 0f0c 	teqne	r3, ip
 800046e:	d00a      	beq.n	8000486 <__aeabi_fmul+0x11e>
 8000470:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000474:	bf18      	it	ne
 8000476:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800047a:	d1d8      	bne.n	800042e <__aeabi_fmul+0xc6>
 800047c:	ea80 0001 	eor.w	r0, r0, r1
 8000480:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000484:	4770      	bx	lr
 8000486:	f090 0f00 	teq	r0, #0
 800048a:	bf17      	itett	ne
 800048c:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000490:	4608      	moveq	r0, r1
 8000492:	f091 0f00 	teqne	r1, #0
 8000496:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 800049a:	d014      	beq.n	80004c6 <__aeabi_fmul+0x15e>
 800049c:	ea92 0f0c 	teq	r2, ip
 80004a0:	d101      	bne.n	80004a6 <__aeabi_fmul+0x13e>
 80004a2:	0242      	lsls	r2, r0, #9
 80004a4:	d10f      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004a6:	ea93 0f0c 	teq	r3, ip
 80004aa:	d103      	bne.n	80004b4 <__aeabi_fmul+0x14c>
 80004ac:	024b      	lsls	r3, r1, #9
 80004ae:	bf18      	it	ne
 80004b0:	4608      	movne	r0, r1
 80004b2:	d108      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004b4:	ea80 0001 	eor.w	r0, r0, r1
 80004b8:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80004bc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80004c0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80004c4:	4770      	bx	lr
 80004c6:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80004ca:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 80004ce:	4770      	bx	lr

080004d0 <__aeabi_fdiv>:
 80004d0:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004d4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004d8:	bf1e      	ittt	ne
 80004da:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004de:	ea92 0f0c 	teqne	r2, ip
 80004e2:	ea93 0f0c 	teqne	r3, ip
 80004e6:	d069      	beq.n	80005bc <__aeabi_fdiv+0xec>
 80004e8:	eba2 0203 	sub.w	r2, r2, r3
 80004ec:	ea80 0c01 	eor.w	ip, r0, r1
 80004f0:	0249      	lsls	r1, r1, #9
 80004f2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80004f6:	d037      	beq.n	8000568 <__aeabi_fdiv+0x98>
 80004f8:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80004fc:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000500:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000504:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000508:	428b      	cmp	r3, r1
 800050a:	bf38      	it	cc
 800050c:	005b      	lslcc	r3, r3, #1
 800050e:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000512:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000516:	428b      	cmp	r3, r1
 8000518:	bf24      	itt	cs
 800051a:	1a5b      	subcs	r3, r3, r1
 800051c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000520:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000524:	bf24      	itt	cs
 8000526:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800052a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800052e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000532:	bf24      	itt	cs
 8000534:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000538:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800053c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000540:	bf24      	itt	cs
 8000542:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000546:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800054a:	011b      	lsls	r3, r3, #4
 800054c:	bf18      	it	ne
 800054e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000552:	d1e0      	bne.n	8000516 <__aeabi_fdiv+0x46>
 8000554:	2afd      	cmp	r2, #253	@ 0xfd
 8000556:	f63f af50 	bhi.w	80003fa <__aeabi_fmul+0x92>
 800055a:	428b      	cmp	r3, r1
 800055c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000560:	bf08      	it	eq
 8000562:	f020 0001 	biceq.w	r0, r0, #1
 8000566:	4770      	bx	lr
 8000568:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 800056c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000570:	327f      	adds	r2, #127	@ 0x7f
 8000572:	bfc2      	ittt	gt
 8000574:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000578:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800057c:	4770      	bxgt	lr
 800057e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000582:	f04f 0300 	mov.w	r3, #0
 8000586:	3a01      	subs	r2, #1
 8000588:	e737      	b.n	80003fa <__aeabi_fmul+0x92>
 800058a:	f092 0f00 	teq	r2, #0
 800058e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000592:	bf02      	ittt	eq
 8000594:	0040      	lsleq	r0, r0, #1
 8000596:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 800059a:	3a01      	subeq	r2, #1
 800059c:	d0f9      	beq.n	8000592 <__aeabi_fdiv+0xc2>
 800059e:	ea40 000c 	orr.w	r0, r0, ip
 80005a2:	f093 0f00 	teq	r3, #0
 80005a6:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80005aa:	bf02      	ittt	eq
 80005ac:	0049      	lsleq	r1, r1, #1
 80005ae:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 80005b2:	3b01      	subeq	r3, #1
 80005b4:	d0f9      	beq.n	80005aa <__aeabi_fdiv+0xda>
 80005b6:	ea41 010c 	orr.w	r1, r1, ip
 80005ba:	e795      	b.n	80004e8 <__aeabi_fdiv+0x18>
 80005bc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005c0:	ea92 0f0c 	teq	r2, ip
 80005c4:	d108      	bne.n	80005d8 <__aeabi_fdiv+0x108>
 80005c6:	0242      	lsls	r2, r0, #9
 80005c8:	f47f af7d 	bne.w	80004c6 <__aeabi_fmul+0x15e>
 80005cc:	ea93 0f0c 	teq	r3, ip
 80005d0:	f47f af70 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005d4:	4608      	mov	r0, r1
 80005d6:	e776      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005d8:	ea93 0f0c 	teq	r3, ip
 80005dc:	d104      	bne.n	80005e8 <__aeabi_fdiv+0x118>
 80005de:	024b      	lsls	r3, r1, #9
 80005e0:	f43f af4c 	beq.w	800047c <__aeabi_fmul+0x114>
 80005e4:	4608      	mov	r0, r1
 80005e6:	e76e      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005e8:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 80005ec:	bf18      	it	ne
 80005ee:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 80005f2:	d1ca      	bne.n	800058a <__aeabi_fdiv+0xba>
 80005f4:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 80005f8:	f47f af5c 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005fc:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000600:	f47f af3c 	bne.w	800047c <__aeabi_fmul+0x114>
 8000604:	e75f      	b.n	80004c6 <__aeabi_fmul+0x15e>
 8000606:	bf00      	nop

08000608 <__aeabi_ldivmod>:
 8000608:	b97b      	cbnz	r3, 800062a <__aeabi_ldivmod+0x22>
 800060a:	b972      	cbnz	r2, 800062a <__aeabi_ldivmod+0x22>
 800060c:	2900      	cmp	r1, #0
 800060e:	bfbe      	ittt	lt
 8000610:	2000      	movlt	r0, #0
 8000612:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000616:	e006      	blt.n	8000626 <__aeabi_ldivmod+0x1e>
 8000618:	bf08      	it	eq
 800061a:	2800      	cmpeq	r0, #0
 800061c:	bf1c      	itt	ne
 800061e:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000622:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000626:	f000 b9bf 	b.w	80009a8 <__aeabi_idiv0>
 800062a:	f1ad 0c08 	sub.w	ip, sp, #8
 800062e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000632:	2900      	cmp	r1, #0
 8000634:	db09      	blt.n	800064a <__aeabi_ldivmod+0x42>
 8000636:	2b00      	cmp	r3, #0
 8000638:	db1a      	blt.n	8000670 <__aeabi_ldivmod+0x68>
 800063a:	f000 f835 	bl	80006a8 <__udivmoddi4>
 800063e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000642:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000646:	b004      	add	sp, #16
 8000648:	4770      	bx	lr
 800064a:	4240      	negs	r0, r0
 800064c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000650:	2b00      	cmp	r3, #0
 8000652:	db1b      	blt.n	800068c <__aeabi_ldivmod+0x84>
 8000654:	f000 f828 	bl	80006a8 <__udivmoddi4>
 8000658:	f8dd e004 	ldr.w	lr, [sp, #4]
 800065c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000660:	b004      	add	sp, #16
 8000662:	4240      	negs	r0, r0
 8000664:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000668:	4252      	negs	r2, r2
 800066a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800066e:	4770      	bx	lr
 8000670:	4252      	negs	r2, r2
 8000672:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000676:	f000 f817 	bl	80006a8 <__udivmoddi4>
 800067a:	f8dd e004 	ldr.w	lr, [sp, #4]
 800067e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000682:	b004      	add	sp, #16
 8000684:	4240      	negs	r0, r0
 8000686:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800068a:	4770      	bx	lr
 800068c:	4252      	negs	r2, r2
 800068e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000692:	f000 f809 	bl	80006a8 <__udivmoddi4>
 8000696:	f8dd e004 	ldr.w	lr, [sp, #4]
 800069a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800069e:	b004      	add	sp, #16
 80006a0:	4252      	negs	r2, r2
 80006a2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80006a6:	4770      	bx	lr

080006a8 <__udivmoddi4>:
 80006a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80006ac:	9d08      	ldr	r5, [sp, #32]
 80006ae:	468e      	mov	lr, r1
 80006b0:	4604      	mov	r4, r0
 80006b2:	4688      	mov	r8, r1
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d14a      	bne.n	800074e <__udivmoddi4+0xa6>
 80006b8:	428a      	cmp	r2, r1
 80006ba:	4617      	mov	r7, r2
 80006bc:	d962      	bls.n	8000784 <__udivmoddi4+0xdc>
 80006be:	fab2 f682 	clz	r6, r2
 80006c2:	b14e      	cbz	r6, 80006d8 <__udivmoddi4+0x30>
 80006c4:	f1c6 0320 	rsb	r3, r6, #32
 80006c8:	fa01 f806 	lsl.w	r8, r1, r6
 80006cc:	fa20 f303 	lsr.w	r3, r0, r3
 80006d0:	40b7      	lsls	r7, r6
 80006d2:	ea43 0808 	orr.w	r8, r3, r8
 80006d6:	40b4      	lsls	r4, r6
 80006d8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80006dc:	fbb8 f1fe 	udiv	r1, r8, lr
 80006e0:	fa1f fc87 	uxth.w	ip, r7
 80006e4:	fb0e 8811 	mls	r8, lr, r1, r8
 80006e8:	fb01 f20c 	mul.w	r2, r1, ip
 80006ec:	0c23      	lsrs	r3, r4, #16
 80006ee:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80006f2:	429a      	cmp	r2, r3
 80006f4:	d909      	bls.n	800070a <__udivmoddi4+0x62>
 80006f6:	18fb      	adds	r3, r7, r3
 80006f8:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 80006fc:	f080 80eb 	bcs.w	80008d6 <__udivmoddi4+0x22e>
 8000700:	429a      	cmp	r2, r3
 8000702:	f240 80e8 	bls.w	80008d6 <__udivmoddi4+0x22e>
 8000706:	3902      	subs	r1, #2
 8000708:	443b      	add	r3, r7
 800070a:	1a9a      	subs	r2, r3, r2
 800070c:	fbb2 f0fe 	udiv	r0, r2, lr
 8000710:	fb0e 2210 	mls	r2, lr, r0, r2
 8000714:	fb00 fc0c 	mul.w	ip, r0, ip
 8000718:	b2a3      	uxth	r3, r4
 800071a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800071e:	459c      	cmp	ip, r3
 8000720:	d909      	bls.n	8000736 <__udivmoddi4+0x8e>
 8000722:	18fb      	adds	r3, r7, r3
 8000724:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000728:	f080 80d7 	bcs.w	80008da <__udivmoddi4+0x232>
 800072c:	459c      	cmp	ip, r3
 800072e:	f240 80d4 	bls.w	80008da <__udivmoddi4+0x232>
 8000732:	443b      	add	r3, r7
 8000734:	3802      	subs	r0, #2
 8000736:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800073a:	2100      	movs	r1, #0
 800073c:	eba3 030c 	sub.w	r3, r3, ip
 8000740:	b11d      	cbz	r5, 800074a <__udivmoddi4+0xa2>
 8000742:	2200      	movs	r2, #0
 8000744:	40f3      	lsrs	r3, r6
 8000746:	e9c5 3200 	strd	r3, r2, [r5]
 800074a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800074e:	428b      	cmp	r3, r1
 8000750:	d905      	bls.n	800075e <__udivmoddi4+0xb6>
 8000752:	b10d      	cbz	r5, 8000758 <__udivmoddi4+0xb0>
 8000754:	e9c5 0100 	strd	r0, r1, [r5]
 8000758:	2100      	movs	r1, #0
 800075a:	4608      	mov	r0, r1
 800075c:	e7f5      	b.n	800074a <__udivmoddi4+0xa2>
 800075e:	fab3 f183 	clz	r1, r3
 8000762:	2900      	cmp	r1, #0
 8000764:	d146      	bne.n	80007f4 <__udivmoddi4+0x14c>
 8000766:	4573      	cmp	r3, lr
 8000768:	d302      	bcc.n	8000770 <__udivmoddi4+0xc8>
 800076a:	4282      	cmp	r2, r0
 800076c:	f200 8108 	bhi.w	8000980 <__udivmoddi4+0x2d8>
 8000770:	1a84      	subs	r4, r0, r2
 8000772:	eb6e 0203 	sbc.w	r2, lr, r3
 8000776:	2001      	movs	r0, #1
 8000778:	4690      	mov	r8, r2
 800077a:	2d00      	cmp	r5, #0
 800077c:	d0e5      	beq.n	800074a <__udivmoddi4+0xa2>
 800077e:	e9c5 4800 	strd	r4, r8, [r5]
 8000782:	e7e2      	b.n	800074a <__udivmoddi4+0xa2>
 8000784:	2a00      	cmp	r2, #0
 8000786:	f000 8091 	beq.w	80008ac <__udivmoddi4+0x204>
 800078a:	fab2 f682 	clz	r6, r2
 800078e:	2e00      	cmp	r6, #0
 8000790:	f040 80a5 	bne.w	80008de <__udivmoddi4+0x236>
 8000794:	1a8a      	subs	r2, r1, r2
 8000796:	2101      	movs	r1, #1
 8000798:	0c03      	lsrs	r3, r0, #16
 800079a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800079e:	b280      	uxth	r0, r0
 80007a0:	b2bc      	uxth	r4, r7
 80007a2:	fbb2 fcfe 	udiv	ip, r2, lr
 80007a6:	fb0e 221c 	mls	r2, lr, ip, r2
 80007aa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80007ae:	fb04 f20c 	mul.w	r2, r4, ip
 80007b2:	429a      	cmp	r2, r3
 80007b4:	d907      	bls.n	80007c6 <__udivmoddi4+0x11e>
 80007b6:	18fb      	adds	r3, r7, r3
 80007b8:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 80007bc:	d202      	bcs.n	80007c4 <__udivmoddi4+0x11c>
 80007be:	429a      	cmp	r2, r3
 80007c0:	f200 80e3 	bhi.w	800098a <__udivmoddi4+0x2e2>
 80007c4:	46c4      	mov	ip, r8
 80007c6:	1a9b      	subs	r3, r3, r2
 80007c8:	fbb3 f2fe 	udiv	r2, r3, lr
 80007cc:	fb0e 3312 	mls	r3, lr, r2, r3
 80007d0:	fb02 f404 	mul.w	r4, r2, r4
 80007d4:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80007d8:	429c      	cmp	r4, r3
 80007da:	d907      	bls.n	80007ec <__udivmoddi4+0x144>
 80007dc:	18fb      	adds	r3, r7, r3
 80007de:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 80007e2:	d202      	bcs.n	80007ea <__udivmoddi4+0x142>
 80007e4:	429c      	cmp	r4, r3
 80007e6:	f200 80cd 	bhi.w	8000984 <__udivmoddi4+0x2dc>
 80007ea:	4602      	mov	r2, r0
 80007ec:	1b1b      	subs	r3, r3, r4
 80007ee:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80007f2:	e7a5      	b.n	8000740 <__udivmoddi4+0x98>
 80007f4:	f1c1 0620 	rsb	r6, r1, #32
 80007f8:	408b      	lsls	r3, r1
 80007fa:	fa22 f706 	lsr.w	r7, r2, r6
 80007fe:	431f      	orrs	r7, r3
 8000800:	fa2e fa06 	lsr.w	sl, lr, r6
 8000804:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000808:	fbba f8f9 	udiv	r8, sl, r9
 800080c:	fa0e fe01 	lsl.w	lr, lr, r1
 8000810:	fa20 f306 	lsr.w	r3, r0, r6
 8000814:	fb09 aa18 	mls	sl, r9, r8, sl
 8000818:	fa1f fc87 	uxth.w	ip, r7
 800081c:	ea43 030e 	orr.w	r3, r3, lr
 8000820:	fa00 fe01 	lsl.w	lr, r0, r1
 8000824:	fb08 f00c 	mul.w	r0, r8, ip
 8000828:	0c1c      	lsrs	r4, r3, #16
 800082a:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800082e:	42a0      	cmp	r0, r4
 8000830:	fa02 f201 	lsl.w	r2, r2, r1
 8000834:	d90a      	bls.n	800084c <__udivmoddi4+0x1a4>
 8000836:	193c      	adds	r4, r7, r4
 8000838:	f108 3aff 	add.w	sl, r8, #4294967295	@ 0xffffffff
 800083c:	f080 809e 	bcs.w	800097c <__udivmoddi4+0x2d4>
 8000840:	42a0      	cmp	r0, r4
 8000842:	f240 809b 	bls.w	800097c <__udivmoddi4+0x2d4>
 8000846:	f1a8 0802 	sub.w	r8, r8, #2
 800084a:	443c      	add	r4, r7
 800084c:	1a24      	subs	r4, r4, r0
 800084e:	b298      	uxth	r0, r3
 8000850:	fbb4 f3f9 	udiv	r3, r4, r9
 8000854:	fb09 4413 	mls	r4, r9, r3, r4
 8000858:	fb03 fc0c 	mul.w	ip, r3, ip
 800085c:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
 8000860:	45a4      	cmp	ip, r4
 8000862:	d909      	bls.n	8000878 <__udivmoddi4+0x1d0>
 8000864:	193c      	adds	r4, r7, r4
 8000866:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 800086a:	f080 8085 	bcs.w	8000978 <__udivmoddi4+0x2d0>
 800086e:	45a4      	cmp	ip, r4
 8000870:	f240 8082 	bls.w	8000978 <__udivmoddi4+0x2d0>
 8000874:	3b02      	subs	r3, #2
 8000876:	443c      	add	r4, r7
 8000878:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 800087c:	eba4 040c 	sub.w	r4, r4, ip
 8000880:	fba0 8c02 	umull	r8, ip, r0, r2
 8000884:	4564      	cmp	r4, ip
 8000886:	4643      	mov	r3, r8
 8000888:	46e1      	mov	r9, ip
 800088a:	d364      	bcc.n	8000956 <__udivmoddi4+0x2ae>
 800088c:	d061      	beq.n	8000952 <__udivmoddi4+0x2aa>
 800088e:	b15d      	cbz	r5, 80008a8 <__udivmoddi4+0x200>
 8000890:	ebbe 0203 	subs.w	r2, lr, r3
 8000894:	eb64 0409 	sbc.w	r4, r4, r9
 8000898:	fa04 f606 	lsl.w	r6, r4, r6
 800089c:	fa22 f301 	lsr.w	r3, r2, r1
 80008a0:	431e      	orrs	r6, r3
 80008a2:	40cc      	lsrs	r4, r1
 80008a4:	e9c5 6400 	strd	r6, r4, [r5]
 80008a8:	2100      	movs	r1, #0
 80008aa:	e74e      	b.n	800074a <__udivmoddi4+0xa2>
 80008ac:	fbb1 fcf2 	udiv	ip, r1, r2
 80008b0:	0c01      	lsrs	r1, r0, #16
 80008b2:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80008b6:	b280      	uxth	r0, r0
 80008b8:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80008bc:	463b      	mov	r3, r7
 80008be:	fbb1 f1f7 	udiv	r1, r1, r7
 80008c2:	4638      	mov	r0, r7
 80008c4:	463c      	mov	r4, r7
 80008c6:	46b8      	mov	r8, r7
 80008c8:	46be      	mov	lr, r7
 80008ca:	2620      	movs	r6, #32
 80008cc:	eba2 0208 	sub.w	r2, r2, r8
 80008d0:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80008d4:	e765      	b.n	80007a2 <__udivmoddi4+0xfa>
 80008d6:	4601      	mov	r1, r0
 80008d8:	e717      	b.n	800070a <__udivmoddi4+0x62>
 80008da:	4610      	mov	r0, r2
 80008dc:	e72b      	b.n	8000736 <__udivmoddi4+0x8e>
 80008de:	f1c6 0120 	rsb	r1, r6, #32
 80008e2:	fa2e fc01 	lsr.w	ip, lr, r1
 80008e6:	40b7      	lsls	r7, r6
 80008e8:	fa0e fe06 	lsl.w	lr, lr, r6
 80008ec:	fa20 f101 	lsr.w	r1, r0, r1
 80008f0:	ea41 010e 	orr.w	r1, r1, lr
 80008f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80008f8:	fbbc f8fe 	udiv	r8, ip, lr
 80008fc:	b2bc      	uxth	r4, r7
 80008fe:	fb0e cc18 	mls	ip, lr, r8, ip
 8000902:	fb08 f904 	mul.w	r9, r8, r4
 8000906:	0c0a      	lsrs	r2, r1, #16
 8000908:	ea42 420c 	orr.w	r2, r2, ip, lsl #16
 800090c:	40b0      	lsls	r0, r6
 800090e:	4591      	cmp	r9, r2
 8000910:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000914:	b280      	uxth	r0, r0
 8000916:	d93e      	bls.n	8000996 <__udivmoddi4+0x2ee>
 8000918:	18ba      	adds	r2, r7, r2
 800091a:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 800091e:	d201      	bcs.n	8000924 <__udivmoddi4+0x27c>
 8000920:	4591      	cmp	r9, r2
 8000922:	d81f      	bhi.n	8000964 <__udivmoddi4+0x2bc>
 8000924:	eba2 0209 	sub.w	r2, r2, r9
 8000928:	fbb2 f9fe 	udiv	r9, r2, lr
 800092c:	fb09 f804 	mul.w	r8, r9, r4
 8000930:	fb0e 2a19 	mls	sl, lr, r9, r2
 8000934:	b28a      	uxth	r2, r1
 8000936:	ea42 420a 	orr.w	r2, r2, sl, lsl #16
 800093a:	4542      	cmp	r2, r8
 800093c:	d229      	bcs.n	8000992 <__udivmoddi4+0x2ea>
 800093e:	18ba      	adds	r2, r7, r2
 8000940:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000944:	d2c2      	bcs.n	80008cc <__udivmoddi4+0x224>
 8000946:	4542      	cmp	r2, r8
 8000948:	d2c0      	bcs.n	80008cc <__udivmoddi4+0x224>
 800094a:	f1a9 0102 	sub.w	r1, r9, #2
 800094e:	443a      	add	r2, r7
 8000950:	e7bc      	b.n	80008cc <__udivmoddi4+0x224>
 8000952:	45c6      	cmp	lr, r8
 8000954:	d29b      	bcs.n	800088e <__udivmoddi4+0x1e6>
 8000956:	ebb8 0302 	subs.w	r3, r8, r2
 800095a:	eb6c 0c07 	sbc.w	ip, ip, r7
 800095e:	3801      	subs	r0, #1
 8000960:	46e1      	mov	r9, ip
 8000962:	e794      	b.n	800088e <__udivmoddi4+0x1e6>
 8000964:	eba7 0909 	sub.w	r9, r7, r9
 8000968:	444a      	add	r2, r9
 800096a:	fbb2 f9fe 	udiv	r9, r2, lr
 800096e:	f1a8 0c02 	sub.w	ip, r8, #2
 8000972:	fb09 f804 	mul.w	r8, r9, r4
 8000976:	e7db      	b.n	8000930 <__udivmoddi4+0x288>
 8000978:	4603      	mov	r3, r0
 800097a:	e77d      	b.n	8000878 <__udivmoddi4+0x1d0>
 800097c:	46d0      	mov	r8, sl
 800097e:	e765      	b.n	800084c <__udivmoddi4+0x1a4>
 8000980:	4608      	mov	r0, r1
 8000982:	e6fa      	b.n	800077a <__udivmoddi4+0xd2>
 8000984:	443b      	add	r3, r7
 8000986:	3a02      	subs	r2, #2
 8000988:	e730      	b.n	80007ec <__udivmoddi4+0x144>
 800098a:	f1ac 0c02 	sub.w	ip, ip, #2
 800098e:	443b      	add	r3, r7
 8000990:	e719      	b.n	80007c6 <__udivmoddi4+0x11e>
 8000992:	4649      	mov	r1, r9
 8000994:	e79a      	b.n	80008cc <__udivmoddi4+0x224>
 8000996:	eba2 0209 	sub.w	r2, r2, r9
 800099a:	fbb2 f9fe 	udiv	r9, r2, lr
 800099e:	46c4      	mov	ip, r8
 80009a0:	fb09 f804 	mul.w	r8, r9, r4
 80009a4:	e7c4      	b.n	8000930 <__udivmoddi4+0x288>
 80009a6:	bf00      	nop

080009a8 <__aeabi_idiv0>:
 80009a8:	4770      	bx	lr
 80009aa:	bf00      	nop

080009ac <hx711_delay_us>:

#define hx711_delay(x)    HAL_Delay(x)
extern TIM_HandleTypeDef htim2;

// Delay function using a timer for microsecond precision
void hx711_delay_us(uint32_t us) {
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b084      	sub	sp, #16
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
    uint32_t timer_ticks = (SystemCoreClock / 1000000) * us;
 80009b4:	4b0f      	ldr	r3, [pc, #60]	@ (80009f4 <hx711_delay_us+0x48>)
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	4a0f      	ldr	r2, [pc, #60]	@ (80009f8 <hx711_delay_us+0x4c>)
 80009ba:	fba2 2303 	umull	r2, r3, r2, r3
 80009be:	0c9a      	lsrs	r2, r3, #18
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	fb02 f303 	mul.w	r3, r2, r3
 80009c6:	60fb      	str	r3, [r7, #12]
    __HAL_TIM_SET_COUNTER(&htim2, 0);
 80009c8:	4b0c      	ldr	r3, [pc, #48]	@ (80009fc <hx711_delay_us+0x50>)
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	2200      	movs	r2, #0
 80009ce:	625a      	str	r2, [r3, #36]	@ 0x24
    HAL_TIM_Base_Start(&htim2);
 80009d0:	480a      	ldr	r0, [pc, #40]	@ (80009fc <hx711_delay_us+0x50>)
 80009d2:	f003 fa35 	bl	8003e40 <HAL_TIM_Base_Start>
    while (__HAL_TIM_GET_COUNTER(&htim2) < timer_ticks);
 80009d6:	bf00      	nop
 80009d8:	4b08      	ldr	r3, [pc, #32]	@ (80009fc <hx711_delay_us+0x50>)
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80009de:	68fa      	ldr	r2, [r7, #12]
 80009e0:	429a      	cmp	r2, r3
 80009e2:	d8f9      	bhi.n	80009d8 <hx711_delay_us+0x2c>
    HAL_TIM_Base_Stop(&htim2);
 80009e4:	4805      	ldr	r0, [pc, #20]	@ (80009fc <hx711_delay_us+0x50>)
 80009e6:	f003 fa75 	bl	8003ed4 <HAL_TIM_Base_Stop>
}
 80009ea:	bf00      	nop
 80009ec:	3710      	adds	r7, #16
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bd80      	pop	{r7, pc}
 80009f2:	bf00      	nop
 80009f4:	20000000 	.word	0x20000000
 80009f8:	431bde83 	.word	0x431bde83
 80009fc:	200001e0 	.word	0x200001e0

08000a00 <hx711_lock>:

// Lock function to ensure mutual exclusion
void hx711_lock(hx711_t *hx711) {
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b082      	sub	sp, #8
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
    while (hx711->lock) {
 8000a08:	e002      	b.n	8000a10 <hx711_lock+0x10>
        hx711_delay(1);
 8000a0a:	2001      	movs	r0, #1
 8000a0c:	f000 fcee 	bl	80013ec <HAL_Delay>
    while (hx711->lock) {
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	7d1b      	ldrb	r3, [r3, #20]
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d1f8      	bne.n	8000a0a <hx711_lock+0xa>
    }
    hx711->lock = 1;
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	2201      	movs	r2, #1
 8000a1c:	751a      	strb	r2, [r3, #20]
}
 8000a1e:	bf00      	nop
 8000a20:	3708      	adds	r7, #8
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd80      	pop	{r7, pc}

08000a26 <hx711_unlock>:

// Unlock function to release mutual exclusion
void hx711_unlock(hx711_t *hx711) {
 8000a26:	b480      	push	{r7}
 8000a28:	b083      	sub	sp, #12
 8000a2a:	af00      	add	r7, sp, #0
 8000a2c:	6078      	str	r0, [r7, #4]
    hx711->lock = 0;
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	2200      	movs	r2, #0
 8000a32:	751a      	strb	r2, [r3, #20]
}
 8000a34:	bf00      	nop
 8000a36:	370c      	adds	r7, #12
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	bc80      	pop	{r7}
 8000a3c:	4770      	bx	lr

08000a3e <hx711_init>:

// Initialization function for HX711
void hx711_init(hx711_t *hx711, GPIO_TypeDef *clk_gpio, uint16_t clk_pin, GPIO_TypeDef *dat_gpio, uint16_t dat_pin) {
 8000a3e:	b580      	push	{r7, lr}
 8000a40:	b088      	sub	sp, #32
 8000a42:	af00      	add	r7, sp, #0
 8000a44:	60f8      	str	r0, [r7, #12]
 8000a46:	60b9      	str	r1, [r7, #8]
 8000a48:	603b      	str	r3, [r7, #0]
 8000a4a:	4613      	mov	r3, r2
 8000a4c:	80fb      	strh	r3, [r7, #6]
    hx711_lock(hx711);
 8000a4e:	68f8      	ldr	r0, [r7, #12]
 8000a50:	f7ff ffd6 	bl	8000a00 <hx711_lock>

    hx711->clk_gpio = clk_gpio;
 8000a54:	68fb      	ldr	r3, [r7, #12]
 8000a56:	68ba      	ldr	r2, [r7, #8]
 8000a58:	601a      	str	r2, [r3, #0]
    hx711->clk_pin = clk_pin;
 8000a5a:	68fb      	ldr	r3, [r7, #12]
 8000a5c:	88fa      	ldrh	r2, [r7, #6]
 8000a5e:	811a      	strh	r2, [r3, #8]
    hx711->dat_gpio = dat_gpio;
 8000a60:	68fb      	ldr	r3, [r7, #12]
 8000a62:	683a      	ldr	r2, [r7, #0]
 8000a64:	605a      	str	r2, [r3, #4]
    hx711->dat_pin = dat_pin;
 8000a66:	68fb      	ldr	r3, [r7, #12]
 8000a68:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8000a6a:	815a      	strh	r2, [r3, #10]

    GPIO_InitTypeDef gpio = {0};
 8000a6c:	f107 0310 	add.w	r3, r7, #16
 8000a70:	2200      	movs	r2, #0
 8000a72:	601a      	str	r2, [r3, #0]
 8000a74:	605a      	str	r2, [r3, #4]
 8000a76:	609a      	str	r2, [r3, #8]
 8000a78:	60da      	str	r2, [r3, #12]
    gpio.Mode = GPIO_MODE_OUTPUT_PP;
 8000a7a:	2301      	movs	r3, #1
 8000a7c:	617b      	str	r3, [r7, #20]
    gpio.Pull = GPIO_NOPULL;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	61bb      	str	r3, [r7, #24]
    gpio.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a82:	2303      	movs	r3, #3
 8000a84:	61fb      	str	r3, [r7, #28]
    gpio.Pin = clk_pin;
 8000a86:	88fb      	ldrh	r3, [r7, #6]
 8000a88:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(clk_gpio, &gpio);
 8000a8a:	f107 0310 	add.w	r3, r7, #16
 8000a8e:	4619      	mov	r1, r3
 8000a90:	68b8      	ldr	r0, [r7, #8]
 8000a92:	f000 fddd 	bl	8001650 <HAL_GPIO_Init>

    gpio.Mode = GPIO_MODE_INPUT;
 8000a96:	2300      	movs	r3, #0
 8000a98:	617b      	str	r3, [r7, #20]
    gpio.Pull = GPIO_PULLUP;
 8000a9a:	2301      	movs	r3, #1
 8000a9c:	61bb      	str	r3, [r7, #24]
    gpio.Pin = dat_pin;
 8000a9e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8000aa0:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(dat_gpio, &gpio);
 8000aa2:	f107 0310 	add.w	r3, r7, #16
 8000aa6:	4619      	mov	r1, r3
 8000aa8:	6838      	ldr	r0, [r7, #0]
 8000aaa:	f000 fdd1 	bl	8001650 <HAL_GPIO_Init>

    HAL_GPIO_WritePin(hx711->clk_gpio, hx711->clk_pin, GPIO_PIN_SET);
 8000aae:	68fb      	ldr	r3, [r7, #12]
 8000ab0:	6818      	ldr	r0, [r3, #0]
 8000ab2:	68fb      	ldr	r3, [r7, #12]
 8000ab4:	891b      	ldrh	r3, [r3, #8]
 8000ab6:	2201      	movs	r2, #1
 8000ab8:	4619      	mov	r1, r3
 8000aba:	f000 ff64 	bl	8001986 <HAL_GPIO_WritePin>
    hx711_delay(10);
 8000abe:	200a      	movs	r0, #10
 8000ac0:	f000 fc94 	bl	80013ec <HAL_Delay>
    HAL_GPIO_WritePin(hx711->clk_gpio, hx711->clk_pin, GPIO_PIN_RESET);
 8000ac4:	68fb      	ldr	r3, [r7, #12]
 8000ac6:	6818      	ldr	r0, [r3, #0]
 8000ac8:	68fb      	ldr	r3, [r7, #12]
 8000aca:	891b      	ldrh	r3, [r3, #8]
 8000acc:	2200      	movs	r2, #0
 8000ace:	4619      	mov	r1, r3
 8000ad0:	f000 ff59 	bl	8001986 <HAL_GPIO_WritePin>
    hx711_delay(10);
 8000ad4:	200a      	movs	r0, #10
 8000ad6:	f000 fc89 	bl	80013ec <HAL_Delay>

    hx711_value(hx711);
 8000ada:	68f8      	ldr	r0, [r7, #12]
 8000adc:	f000 f80a 	bl	8000af4 <hx711_value>
    hx711_value(hx711);
 8000ae0:	68f8      	ldr	r0, [r7, #12]
 8000ae2:	f000 f807 	bl	8000af4 <hx711_value>

    hx711_unlock(hx711);
 8000ae6:	68f8      	ldr	r0, [r7, #12]
 8000ae8:	f7ff ff9d 	bl	8000a26 <hx711_unlock>
}
 8000aec:	bf00      	nop
 8000aee:	3720      	adds	r7, #32
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bd80      	pop	{r7, pc}

08000af4 <hx711_value>:

// Function to read a value from HX711
int32_t hx711_value(hx711_t *hx711) {
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b086      	sub	sp, #24
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
    uint32_t data = 0;
 8000afc:	2300      	movs	r3, #0
 8000afe:	617b      	str	r3, [r7, #20]
    uint32_t startTime = HAL_GetTick();
 8000b00:	f000 fc6a 	bl	80013d8 <HAL_GetTick>
 8000b04:	60f8      	str	r0, [r7, #12]

    while (HAL_GPIO_ReadPin(hx711->dat_gpio, hx711->dat_pin) == GPIO_PIN_SET) {
 8000b06:	e00b      	b.n	8000b20 <hx711_value+0x2c>
        hx711_delay(1);
 8000b08:	2001      	movs	r0, #1
 8000b0a:	f000 fc6f 	bl	80013ec <HAL_Delay>
        if (HAL_GetTick() - startTime > 150) {
 8000b0e:	f000 fc63 	bl	80013d8 <HAL_GetTick>
 8000b12:	4602      	mov	r2, r0
 8000b14:	68fb      	ldr	r3, [r7, #12]
 8000b16:	1ad3      	subs	r3, r2, r3
 8000b18:	2b96      	cmp	r3, #150	@ 0x96
 8000b1a:	d901      	bls.n	8000b20 <hx711_value+0x2c>
            return 0;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	e059      	b.n	8000bd4 <hx711_value+0xe0>
    while (HAL_GPIO_ReadPin(hx711->dat_gpio, hx711->dat_pin) == GPIO_PIN_SET) {
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	685a      	ldr	r2, [r3, #4]
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	895b      	ldrh	r3, [r3, #10]
 8000b28:	4619      	mov	r1, r3
 8000b2a:	4610      	mov	r0, r2
 8000b2c:	f000 ff14 	bl	8001958 <HAL_GPIO_ReadPin>
 8000b30:	4603      	mov	r3, r0
 8000b32:	2b01      	cmp	r3, #1
 8000b34:	d0e8      	beq.n	8000b08 <hx711_value+0x14>
        }
    }

    for (int8_t i = 0; i < 24; i++) {
 8000b36:	2300      	movs	r3, #0
 8000b38:	74fb      	strb	r3, [r7, #19]
 8000b3a:	e02c      	b.n	8000b96 <hx711_value+0xa2>
        HAL_GPIO_WritePin(hx711->clk_gpio, hx711->clk_pin, GPIO_PIN_SET);
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	6818      	ldr	r0, [r3, #0]
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	891b      	ldrh	r3, [r3, #8]
 8000b44:	2201      	movs	r2, #1
 8000b46:	4619      	mov	r1, r3
 8000b48:	f000 ff1d 	bl	8001986 <HAL_GPIO_WritePin>
        hx711_delay_us(1);
 8000b4c:	2001      	movs	r0, #1
 8000b4e:	f7ff ff2d 	bl	80009ac <hx711_delay_us>
        HAL_GPIO_WritePin(hx711->clk_gpio, hx711->clk_pin, GPIO_PIN_RESET);
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	6818      	ldr	r0, [r3, #0]
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	891b      	ldrh	r3, [r3, #8]
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	4619      	mov	r1, r3
 8000b5e:	f000 ff12 	bl	8001986 <HAL_GPIO_WritePin>
        hx711_delay_us(1);
 8000b62:	2001      	movs	r0, #1
 8000b64:	f7ff ff22 	bl	80009ac <hx711_delay_us>
        data = data << 1;
 8000b68:	697b      	ldr	r3, [r7, #20]
 8000b6a:	005b      	lsls	r3, r3, #1
 8000b6c:	617b      	str	r3, [r7, #20]
        if (HAL_GPIO_ReadPin(hx711->dat_gpio, hx711->dat_pin) == GPIO_PIN_SET) {
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	685a      	ldr	r2, [r3, #4]
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	895b      	ldrh	r3, [r3, #10]
 8000b76:	4619      	mov	r1, r3
 8000b78:	4610      	mov	r0, r2
 8000b7a:	f000 feed 	bl	8001958 <HAL_GPIO_ReadPin>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	2b01      	cmp	r3, #1
 8000b82:	d102      	bne.n	8000b8a <hx711_value+0x96>
            data++;
 8000b84:	697b      	ldr	r3, [r7, #20]
 8000b86:	3301      	adds	r3, #1
 8000b88:	617b      	str	r3, [r7, #20]
    for (int8_t i = 0; i < 24; i++) {
 8000b8a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8000b8e:	b2db      	uxtb	r3, r3
 8000b90:	3301      	adds	r3, #1
 8000b92:	b2db      	uxtb	r3, r3
 8000b94:	74fb      	strb	r3, [r7, #19]
 8000b96:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8000b9a:	2b17      	cmp	r3, #23
 8000b9c:	ddce      	ble.n	8000b3c <hx711_value+0x48>
        }
    }

    data ^= 0x800000;
 8000b9e:	697b      	ldr	r3, [r7, #20]
 8000ba0:	f483 0300 	eor.w	r3, r3, #8388608	@ 0x800000
 8000ba4:	617b      	str	r3, [r7, #20]
    HAL_GPIO_WritePin(hx711->clk_gpio, hx711->clk_pin, GPIO_PIN_SET);   
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	6818      	ldr	r0, [r3, #0]
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	891b      	ldrh	r3, [r3, #8]
 8000bae:	2201      	movs	r2, #1
 8000bb0:	4619      	mov	r1, r3
 8000bb2:	f000 fee8 	bl	8001986 <HAL_GPIO_WritePin>
    hx711_delay_us(1);
 8000bb6:	2001      	movs	r0, #1
 8000bb8:	f7ff fef8 	bl	80009ac <hx711_delay_us>
    HAL_GPIO_WritePin(hx711->clk_gpio, hx711->clk_pin, GPIO_PIN_RESET);
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	6818      	ldr	r0, [r3, #0]
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	891b      	ldrh	r3, [r3, #8]
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	4619      	mov	r1, r3
 8000bc8:	f000 fedd 	bl	8001986 <HAL_GPIO_WritePin>
    hx711_delay_us(1);
 8000bcc:	2001      	movs	r0, #1
 8000bce:	f7ff feed 	bl	80009ac <hx711_delay_us>

    return data;
 8000bd2:	697b      	ldr	r3, [r7, #20]
}
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	3718      	adds	r7, #24
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	bd80      	pop	{r7, pc}

08000bdc <hx711_tare>:

    return answer;
}

// Function to tare the HX711 (set the offset)
void hx711_tare(hx711_t *hx711, uint16_t sample) {
 8000bdc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000be0:	b086      	sub	sp, #24
 8000be2:	af00      	add	r7, sp, #0
 8000be4:	6078      	str	r0, [r7, #4]
 8000be6:	460b      	mov	r3, r1
 8000be8:	807b      	strh	r3, [r7, #2]
    hx711_lock(hx711);
 8000bea:	6878      	ldr	r0, [r7, #4]
 8000bec:	f7ff ff08 	bl	8000a00 <hx711_lock>

    int64_t ave = 0;
 8000bf0:	f04f 0200 	mov.w	r2, #0
 8000bf4:	f04f 0300 	mov.w	r3, #0
 8000bf8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    for (uint16_t i = 0; i < sample; i++) {
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	81fb      	strh	r3, [r7, #14]
 8000c00:	e014      	b.n	8000c2c <hx711_tare+0x50>
        ave += hx711_value(hx711);
 8000c02:	6878      	ldr	r0, [r7, #4]
 8000c04:	f7ff ff76 	bl	8000af4 <hx711_value>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	17da      	asrs	r2, r3, #31
 8000c0c:	461c      	mov	r4, r3
 8000c0e:	4615      	mov	r5, r2
 8000c10:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8000c14:	eb12 0804 	adds.w	r8, r2, r4
 8000c18:	eb43 0905 	adc.w	r9, r3, r5
 8000c1c:	e9c7 8904 	strd	r8, r9, [r7, #16]
        hx711_delay(5);
 8000c20:	2005      	movs	r0, #5
 8000c22:	f000 fbe3 	bl	80013ec <HAL_Delay>
    for (uint16_t i = 0; i < sample; i++) {
 8000c26:	89fb      	ldrh	r3, [r7, #14]
 8000c28:	3301      	adds	r3, #1
 8000c2a:	81fb      	strh	r3, [r7, #14]
 8000c2c:	89fa      	ldrh	r2, [r7, #14]
 8000c2e:	887b      	ldrh	r3, [r7, #2]
 8000c30:	429a      	cmp	r2, r3
 8000c32:	d3e6      	bcc.n	8000c02 <hx711_tare+0x26>
    }

    hx711->offset = (int32_t)(ave / sample);
 8000c34:	887b      	ldrh	r3, [r7, #2]
 8000c36:	2200      	movs	r2, #0
 8000c38:	469a      	mov	sl, r3
 8000c3a:	4693      	mov	fp, r2
 8000c3c:	4652      	mov	r2, sl
 8000c3e:	465b      	mov	r3, fp
 8000c40:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8000c44:	f7ff fce0 	bl	8000608 <__aeabi_ldivmod>
 8000c48:	4602      	mov	r2, r0
 8000c4a:	460b      	mov	r3, r1
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	60da      	str	r2, [r3, #12]
    hx711_unlock(hx711);
 8000c50:	6878      	ldr	r0, [r7, #4]
 8000c52:	f7ff fee8 	bl	8000a26 <hx711_unlock>
}
 8000c56:	bf00      	nop
 8000c58:	3718      	adds	r7, #24
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08000c60 <hx711_weight>:

    hx711_unlock(hx711);
}

// Function to get weight using HX711
float hx711_weight(hx711_t *hx711, uint16_t sample) {
 8000c60:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000c64:	b088      	sub	sp, #32
 8000c66:	af00      	add	r7, sp, #0
 8000c68:	6078      	str	r0, [r7, #4]
 8000c6a:	460b      	mov	r3, r1
 8000c6c:	807b      	strh	r3, [r7, #2]
    hx711_lock(hx711);
 8000c6e:	6878      	ldr	r0, [r7, #4]
 8000c70:	f7ff fec6 	bl	8000a00 <hx711_lock>

    int64_t ave = 0;
 8000c74:	f04f 0200 	mov.w	r2, #0
 8000c78:	f04f 0300 	mov.w	r3, #0
 8000c7c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    for (uint16_t i = 0; i < sample; i++) {
 8000c80:	2300      	movs	r3, #0
 8000c82:	82fb      	strh	r3, [r7, #22]
 8000c84:	e014      	b.n	8000cb0 <hx711_weight+0x50>
        ave += hx711_value(hx711);
 8000c86:	6878      	ldr	r0, [r7, #4]
 8000c88:	f7ff ff34 	bl	8000af4 <hx711_value>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	17da      	asrs	r2, r3, #31
 8000c90:	461c      	mov	r4, r3
 8000c92:	4615      	mov	r5, r2
 8000c94:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8000c98:	eb12 0804 	adds.w	r8, r2, r4
 8000c9c:	eb43 0905 	adc.w	r9, r3, r5
 8000ca0:	e9c7 8906 	strd	r8, r9, [r7, #24]
        hx711_delay(5);
 8000ca4:	2005      	movs	r0, #5
 8000ca6:	f000 fba1 	bl	80013ec <HAL_Delay>
    for (uint16_t i = 0; i < sample; i++) {
 8000caa:	8afb      	ldrh	r3, [r7, #22]
 8000cac:	3301      	adds	r3, #1
 8000cae:	82fb      	strh	r3, [r7, #22]
 8000cb0:	8afa      	ldrh	r2, [r7, #22]
 8000cb2:	887b      	ldrh	r3, [r7, #2]
 8000cb4:	429a      	cmp	r2, r3
 8000cb6:	d3e6      	bcc.n	8000c86 <hx711_weight+0x26>
    }

    int32_t data = (int32_t)(ave / sample);
 8000cb8:	887b      	ldrh	r3, [r7, #2]
 8000cba:	2200      	movs	r2, #0
 8000cbc:	469a      	mov	sl, r3
 8000cbe:	4693      	mov	fp, r2
 8000cc0:	4652      	mov	r2, sl
 8000cc2:	465b      	mov	r3, fp
 8000cc4:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8000cc8:	f7ff fc9e 	bl	8000608 <__aeabi_ldivmod>
 8000ccc:	4602      	mov	r2, r0
 8000cce:	460b      	mov	r3, r1
 8000cd0:	4613      	mov	r3, r2
 8000cd2:	613b      	str	r3, [r7, #16]
    float answer = (data - hx711->offset) / hx711->coef;
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	68db      	ldr	r3, [r3, #12]
 8000cd8:	693a      	ldr	r2, [r7, #16]
 8000cda:	1ad3      	subs	r3, r2, r3
 8000cdc:	4618      	mov	r0, r3
 8000cde:	f7ff faef 	bl	80002c0 <__aeabi_i2f>
 8000ce2:	4602      	mov	r2, r0
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	691b      	ldr	r3, [r3, #16]
 8000ce8:	4619      	mov	r1, r3
 8000cea:	4610      	mov	r0, r2
 8000cec:	f7ff fbf0 	bl	80004d0 <__aeabi_fdiv>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	60fb      	str	r3, [r7, #12]
    hx711_unlock(hx711);
 8000cf4:	6878      	ldr	r0, [r7, #4]
 8000cf6:	f7ff fe96 	bl	8000a26 <hx711_unlock>

    return answer;
 8000cfa:	68fb      	ldr	r3, [r7, #12]
}
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	3720      	adds	r7, #32
 8000d00:	46bd      	mov	sp, r7
 8000d02:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08000d06 <hx711_coef_set>:

// Function to set the calibration coefficient
void hx711_coef_set(hx711_t *hx711, float coef) {
 8000d06:	b480      	push	{r7}
 8000d08:	b083      	sub	sp, #12
 8000d0a:	af00      	add	r7, sp, #0
 8000d0c:	6078      	str	r0, [r7, #4]
 8000d0e:	6039      	str	r1, [r7, #0]
    hx711->coef = coef;
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	683a      	ldr	r2, [r7, #0]
 8000d14:	611a      	str	r2, [r3, #16]
}
 8000d16:	bf00      	nop
 8000d18:	370c      	adds	r7, #12
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bc80      	pop	{r7}
 8000d1e:	4770      	bx	lr

08000d20 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b084      	sub	sp, #16
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
	icCount++;
 8000d28:	4b31      	ldr	r3, [pc, #196]	@ (8000df0 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8000d2a:	881b      	ldrh	r3, [r3, #0]
 8000d2c:	b29b      	uxth	r3, r3
 8000d2e:	3301      	adds	r3, #1
 8000d30:	b29a      	uxth	r2, r3
 8000d32:	4b2f      	ldr	r3, [pc, #188]	@ (8000df0 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8000d34:	801a      	strh	r2, [r3, #0]

	currentEncoderState = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13);
 8000d36:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000d3a:	482e      	ldr	r0, [pc, #184]	@ (8000df4 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8000d3c:	f000 fe0c 	bl	8001958 <HAL_GPIO_ReadPin>
 8000d40:	4603      	mov	r3, r0
 8000d42:	461a      	mov	r2, r3
 8000d44:	4b2c      	ldr	r3, [pc, #176]	@ (8000df8 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8000d46:	701a      	strb	r2, [r3, #0]

	if(previousEncoderState == 1 && currentEncoderState == 0)
 8000d48:	4b2c      	ldr	r3, [pc, #176]	@ (8000dfc <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8000d4a:	781b      	ldrb	r3, [r3, #0]
 8000d4c:	b2db      	uxtb	r3, r3
 8000d4e:	2b01      	cmp	r3, #1
 8000d50:	d10b      	bne.n	8000d6a <HAL_TIM_PeriodElapsedCallback+0x4a>
 8000d52:	4b29      	ldr	r3, [pc, #164]	@ (8000df8 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8000d54:	781b      	ldrb	r3, [r3, #0]
 8000d56:	b2db      	uxtb	r3, r3
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d106      	bne.n	8000d6a <HAL_TIM_PeriodElapsedCallback+0x4a>
	{
		encoderPulses++;
 8000d5c:	4b28      	ldr	r3, [pc, #160]	@ (8000e00 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8000d5e:	781b      	ldrb	r3, [r3, #0]
 8000d60:	b2db      	uxtb	r3, r3
 8000d62:	3301      	adds	r3, #1
 8000d64:	b2da      	uxtb	r2, r3
 8000d66:	4b26      	ldr	r3, [pc, #152]	@ (8000e00 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8000d68:	701a      	strb	r2, [r3, #0]
	}
	previousEncoderState = currentEncoderState;
 8000d6a:	4b23      	ldr	r3, [pc, #140]	@ (8000df8 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8000d6c:	781b      	ldrb	r3, [r3, #0]
 8000d6e:	b2da      	uxtb	r2, r3
 8000d70:	4b22      	ldr	r3, [pc, #136]	@ (8000dfc <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8000d72:	701a      	strb	r2, [r3, #0]

	if(icCount >= 1000) // a cada 500 interrupção de tempo em um timer de 1kHz vai ser 0.5s
 8000d74:	4b1e      	ldr	r3, [pc, #120]	@ (8000df0 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8000d76:	881b      	ldrh	r3, [r3, #0]
 8000d78:	b29b      	uxth	r3, r3
 8000d7a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000d7e:	d332      	bcc.n	8000de6 <HAL_TIM_PeriodElapsedCallback+0xc6>
	{
		float timeElapsed = icCount * MS_TO_S;
 8000d80:	4b1b      	ldr	r3, [pc, #108]	@ (8000df0 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8000d82:	881b      	ldrh	r3, [r3, #0]
 8000d84:	b29b      	uxth	r3, r3
 8000d86:	4618      	mov	r0, r3
 8000d88:	f7ff fa9a 	bl	80002c0 <__aeabi_i2f>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	491d      	ldr	r1, [pc, #116]	@ (8000e04 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8000d90:	4618      	mov	r0, r3
 8000d92:	f7ff fae9 	bl	8000368 <__aeabi_fmul>
 8000d96:	4603      	mov	r3, r0
 8000d98:	60fb      	str	r3, [r7, #12]
		float aux = ((float)encoderPulses/PULSES_PER_ROTATION);
 8000d9a:	4b19      	ldr	r3, [pc, #100]	@ (8000e00 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8000d9c:	781b      	ldrb	r3, [r3, #0]
 8000d9e:	b2db      	uxtb	r3, r3
 8000da0:	4618      	mov	r0, r3
 8000da2:	f7ff fa89 	bl	80002b8 <__aeabi_ui2f>
 8000da6:	4603      	mov	r3, r0
 8000da8:	f04f 4182 	mov.w	r1, #1090519040	@ 0x41000000
 8000dac:	4618      	mov	r0, r3
 8000dae:	f7ff fb8f 	bl	80004d0 <__aeabi_fdiv>
 8000db2:	4603      	mov	r3, r0
 8000db4:	60bb      	str	r3, [r7, #8]
		rotationPerSecond = aux/timeElapsed;
 8000db6:	68f9      	ldr	r1, [r7, #12]
 8000db8:	68b8      	ldr	r0, [r7, #8]
 8000dba:	f7ff fb89 	bl	80004d0 <__aeabi_fdiv>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	461a      	mov	r2, r3
 8000dc2:	4b11      	ldr	r3, [pc, #68]	@ (8000e08 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8000dc4:	601a      	str	r2, [r3, #0]

		rpm = rotationPerSecond * RPS_TO_RPM;
 8000dc6:	4b10      	ldr	r3, [pc, #64]	@ (8000e08 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	4910      	ldr	r1, [pc, #64]	@ (8000e0c <HAL_TIM_PeriodElapsedCallback+0xec>)
 8000dcc:	4618      	mov	r0, r3
 8000dce:	f7ff facb 	bl	8000368 <__aeabi_fmul>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	461a      	mov	r2, r3
 8000dd6:	4b0e      	ldr	r3, [pc, #56]	@ (8000e10 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8000dd8:	601a      	str	r2, [r3, #0]

		icCount = 0;
 8000dda:	4b05      	ldr	r3, [pc, #20]	@ (8000df0 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	801a      	strh	r2, [r3, #0]
		encoderPulses = 0;
 8000de0:	4b07      	ldr	r3, [pc, #28]	@ (8000e00 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	701a      	strb	r2, [r3, #0]
	}
}
 8000de6:	bf00      	nop
 8000de8:	3710      	adds	r7, #16
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}
 8000dee:	bf00      	nop
 8000df0:	2000022c 	.word	0x2000022c
 8000df4:	40010c00 	.word	0x40010c00
 8000df8:	20000228 	.word	0x20000228
 8000dfc:	20000229 	.word	0x20000229
 8000e00:	2000022a 	.word	0x2000022a
 8000e04:	3a83126f 	.word	0x3a83126f
 8000e08:	20000234 	.word	0x20000234
 8000e0c:	42700000 	.word	0x42700000
 8000e10:	20000230 	.word	0x20000230

08000e14 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b086      	sub	sp, #24
 8000e18:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e1a:	f000 fa85 	bl	8001328 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e1e:	f000 f849 	bl	8000eb4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e22:	f000 f941 	bl	80010a8 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000e26:	f000 f8a1 	bl	8000f6c <MX_TIM1_Init>
  MX_TIM2_Init();
 8000e2a:	f000 f8f1 	bl	8001010 <MX_TIM2_Init>
  MX_USB_DEVICE_Init();
 8000e2e:	f007 fb1b 	bl	8008468 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim1); // liga o timer do photo encoder
 8000e32:	4819      	ldr	r0, [pc, #100]	@ (8000e98 <main+0x84>)
 8000e34:	f003 f874 	bl	8003f20 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start(&htim2); // liga o timer do photo encoder
 8000e38:	4818      	ldr	r0, [pc, #96]	@ (8000e9c <main+0x88>)
 8000e3a:	f003 f801 	bl	8003e40 <HAL_TIM_Base_Start>

  hx711_init(&loadcell, GPIOA, GPIO_PIN_1, GPIOA, GPIO_PIN_2);
 8000e3e:	2304      	movs	r3, #4
 8000e40:	9300      	str	r3, [sp, #0]
 8000e42:	4b17      	ldr	r3, [pc, #92]	@ (8000ea0 <main+0x8c>)
 8000e44:	2202      	movs	r2, #2
 8000e46:	4916      	ldr	r1, [pc, #88]	@ (8000ea0 <main+0x8c>)
 8000e48:	4816      	ldr	r0, [pc, #88]	@ (8000ea4 <main+0x90>)
 8000e4a:	f7ff fdf8 	bl	8000a3e <hx711_init>
    hx711_coef_set(&loadcell, 36057.14); // read afer calibration  36057.14
 8000e4e:	4916      	ldr	r1, [pc, #88]	@ (8000ea8 <main+0x94>)
 8000e50:	4814      	ldr	r0, [pc, #80]	@ (8000ea4 <main+0x90>)
 8000e52:	f7ff ff58 	bl	8000d06 <hx711_coef_set>
    hx711_tare(&loadcell, 10);
 8000e56:	210a      	movs	r1, #10
 8000e58:	4812      	ldr	r0, [pc, #72]	@ (8000ea4 <main+0x90>)
 8000e5a:	f7ff febf 	bl	8000bdc <hx711_tare>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  weight = hx711_weight(&loadcell, 10);
 8000e5e:	210a      	movs	r1, #10
 8000e60:	4810      	ldr	r0, [pc, #64]	@ (8000ea4 <main+0x90>)
 8000e62:	f7ff fefd 	bl	8000c60 <hx711_weight>
 8000e66:	4603      	mov	r3, r0
 8000e68:	4a10      	ldr	r2, [pc, #64]	@ (8000eac <main+0x98>)
 8000e6a:	6013      	str	r3, [r2, #0]

    /* USER CODE BEGIN 3 */
	  uint8_t tx_buffer[8]; // 4 bytes para weight + 4 bytes para rpm
	  float_union_t weight_union, rpm_union;

	  weight_union.floatData = weight;
 8000e6c:	4b0f      	ldr	r3, [pc, #60]	@ (8000eac <main+0x98>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	607b      	str	r3, [r7, #4]
	  rpm_union.floatData = rpm;
 8000e72:	4b0f      	ldr	r3, [pc, #60]	@ (8000eb0 <main+0x9c>)
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	603b      	str	r3, [r7, #0]

	  memcpy(&tx_buffer[0], weight_union.binData, 4);
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	60bb      	str	r3, [r7, #8]
	  memcpy(&tx_buffer[4], rpm_union.binData, 4);
 8000e7c:	683b      	ldr	r3, [r7, #0]
 8000e7e:	60fb      	str	r3, [r7, #12]

	  CDC_Transmit_FS(tx_buffer, 8);
 8000e80:	f107 0308 	add.w	r3, r7, #8
 8000e84:	2108      	movs	r1, #8
 8000e86:	4618      	mov	r0, r3
 8000e88:	f007 fbac 	bl	80085e4 <CDC_Transmit_FS>
	  HAL_Delay(100);
 8000e8c:	2064      	movs	r0, #100	@ 0x64
 8000e8e:	f000 faad 	bl	80013ec <HAL_Delay>
  {
 8000e92:	bf00      	nop
 8000e94:	e7e3      	b.n	8000e5e <main+0x4a>
 8000e96:	bf00      	nop
 8000e98:	20000198 	.word	0x20000198
 8000e9c:	200001e0 	.word	0x200001e0
 8000ea0:	40010800 	.word	0x40010800
 8000ea4:	20000238 	.word	0x20000238
 8000ea8:	470cd924 	.word	0x470cd924
 8000eac:	20000250 	.word	0x20000250
 8000eb0:	20000230 	.word	0x20000230

08000eb4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b094      	sub	sp, #80	@ 0x50
 8000eb8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000eba:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000ebe:	2228      	movs	r2, #40	@ 0x28
 8000ec0:	2100      	movs	r1, #0
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	f007 ff6c 	bl	8008da0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ec8:	f107 0314 	add.w	r3, r7, #20
 8000ecc:	2200      	movs	r2, #0
 8000ece:	601a      	str	r2, [r3, #0]
 8000ed0:	605a      	str	r2, [r3, #4]
 8000ed2:	609a      	str	r2, [r3, #8]
 8000ed4:	60da      	str	r2, [r3, #12]
 8000ed6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ed8:	1d3b      	adds	r3, r7, #4
 8000eda:	2200      	movs	r2, #0
 8000edc:	601a      	str	r2, [r3, #0]
 8000ede:	605a      	str	r2, [r3, #4]
 8000ee0:	609a      	str	r2, [r3, #8]
 8000ee2:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ee4:	2301      	movs	r3, #1
 8000ee6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ee8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000eec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ef2:	2301      	movs	r3, #1
 8000ef4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ef6:	2302      	movs	r3, #2
 8000ef8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000efa:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000efe:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000f00:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8000f04:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f06:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	f002 fab4 	bl	8003478 <HAL_RCC_OscConfig>
 8000f10:	4603      	mov	r3, r0
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d001      	beq.n	8000f1a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000f16:	f000 f92b 	bl	8001170 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f1a:	230f      	movs	r3, #15
 8000f1c:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f1e:	2302      	movs	r3, #2
 8000f20:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f22:	2300      	movs	r3, #0
 8000f24:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f26:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000f2a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000f30:	f107 0314 	add.w	r3, r7, #20
 8000f34:	2101      	movs	r1, #1
 8000f36:	4618      	mov	r0, r3
 8000f38:	f002 fd20 	bl	800397c <HAL_RCC_ClockConfig>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d001      	beq.n	8000f46 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000f42:	f000 f915 	bl	8001170 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000f46:	2310      	movs	r3, #16
 8000f48:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8000f4a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000f4e:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f50:	1d3b      	adds	r3, r7, #4
 8000f52:	4618      	mov	r0, r3
 8000f54:	f002 fe6e 	bl	8003c34 <HAL_RCCEx_PeriphCLKConfig>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d001      	beq.n	8000f62 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000f5e:	f000 f907 	bl	8001170 <Error_Handler>
  }
}
 8000f62:	bf00      	nop
 8000f64:	3750      	adds	r7, #80	@ 0x50
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}
	...

08000f6c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b086      	sub	sp, #24
 8000f70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f72:	f107 0308 	add.w	r3, r7, #8
 8000f76:	2200      	movs	r2, #0
 8000f78:	601a      	str	r2, [r3, #0]
 8000f7a:	605a      	str	r2, [r3, #4]
 8000f7c:	609a      	str	r2, [r3, #8]
 8000f7e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f80:	463b      	mov	r3, r7
 8000f82:	2200      	movs	r2, #0
 8000f84:	601a      	str	r2, [r3, #0]
 8000f86:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000f88:	4b1f      	ldr	r3, [pc, #124]	@ (8001008 <MX_TIM1_Init+0x9c>)
 8000f8a:	4a20      	ldr	r2, [pc, #128]	@ (800100c <MX_TIM1_Init+0xa0>)
 8000f8c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000f8e:	4b1e      	ldr	r3, [pc, #120]	@ (8001008 <MX_TIM1_Init+0x9c>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f94:	4b1c      	ldr	r3, [pc, #112]	@ (8001008 <MX_TIM1_Init+0x9c>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 18000;
 8000f9a:	4b1b      	ldr	r3, [pc, #108]	@ (8001008 <MX_TIM1_Init+0x9c>)
 8000f9c:	f244 6250 	movw	r2, #18000	@ 0x4650
 8000fa0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8000fa2:	4b19      	ldr	r3, [pc, #100]	@ (8001008 <MX_TIM1_Init+0x9c>)
 8000fa4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000fa8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000faa:	4b17      	ldr	r3, [pc, #92]	@ (8001008 <MX_TIM1_Init+0x9c>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fb0:	4b15      	ldr	r3, [pc, #84]	@ (8001008 <MX_TIM1_Init+0x9c>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000fb6:	4814      	ldr	r0, [pc, #80]	@ (8001008 <MX_TIM1_Init+0x9c>)
 8000fb8:	f002 fef2 	bl	8003da0 <HAL_TIM_Base_Init>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d001      	beq.n	8000fc6 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8000fc2:	f000 f8d5 	bl	8001170 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000fc6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000fca:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000fcc:	f107 0308 	add.w	r3, r7, #8
 8000fd0:	4619      	mov	r1, r3
 8000fd2:	480d      	ldr	r0, [pc, #52]	@ (8001008 <MX_TIM1_Init+0x9c>)
 8000fd4:	f003 f8e6 	bl	80041a4 <HAL_TIM_ConfigClockSource>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d001      	beq.n	8000fe2 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8000fde:	f000 f8c7 	bl	8001170 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000fea:	463b      	mov	r3, r7
 8000fec:	4619      	mov	r1, r3
 8000fee:	4806      	ldr	r0, [pc, #24]	@ (8001008 <MX_TIM1_Init+0x9c>)
 8000ff0:	f003 fac8 	bl	8004584 <HAL_TIMEx_MasterConfigSynchronization>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d001      	beq.n	8000ffe <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8000ffa:	f000 f8b9 	bl	8001170 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000ffe:	bf00      	nop
 8001000:	3718      	adds	r7, #24
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	20000198 	.word	0x20000198
 800100c:	40012c00 	.word	0x40012c00

08001010 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b086      	sub	sp, #24
 8001014:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001016:	f107 0308 	add.w	r3, r7, #8
 800101a:	2200      	movs	r2, #0
 800101c:	601a      	str	r2, [r3, #0]
 800101e:	605a      	str	r2, [r3, #4]
 8001020:	609a      	str	r2, [r3, #8]
 8001022:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001024:	463b      	mov	r3, r7
 8001026:	2200      	movs	r2, #0
 8001028:	601a      	str	r2, [r3, #0]
 800102a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800102c:	4b1d      	ldr	r3, [pc, #116]	@ (80010a4 <MX_TIM2_Init+0x94>)
 800102e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001032:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72-1;
 8001034:	4b1b      	ldr	r3, [pc, #108]	@ (80010a4 <MX_TIM2_Init+0x94>)
 8001036:	2247      	movs	r2, #71	@ 0x47
 8001038:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800103a:	4b1a      	ldr	r3, [pc, #104]	@ (80010a4 <MX_TIM2_Init+0x94>)
 800103c:	2200      	movs	r2, #0
 800103e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8001040:	4b18      	ldr	r3, [pc, #96]	@ (80010a4 <MX_TIM2_Init+0x94>)
 8001042:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001046:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001048:	4b16      	ldr	r3, [pc, #88]	@ (80010a4 <MX_TIM2_Init+0x94>)
 800104a:	2200      	movs	r2, #0
 800104c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800104e:	4b15      	ldr	r3, [pc, #84]	@ (80010a4 <MX_TIM2_Init+0x94>)
 8001050:	2200      	movs	r2, #0
 8001052:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001054:	4813      	ldr	r0, [pc, #76]	@ (80010a4 <MX_TIM2_Init+0x94>)
 8001056:	f002 fea3 	bl	8003da0 <HAL_TIM_Base_Init>
 800105a:	4603      	mov	r3, r0
 800105c:	2b00      	cmp	r3, #0
 800105e:	d001      	beq.n	8001064 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001060:	f000 f886 	bl	8001170 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001064:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001068:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800106a:	f107 0308 	add.w	r3, r7, #8
 800106e:	4619      	mov	r1, r3
 8001070:	480c      	ldr	r0, [pc, #48]	@ (80010a4 <MX_TIM2_Init+0x94>)
 8001072:	f003 f897 	bl	80041a4 <HAL_TIM_ConfigClockSource>
 8001076:	4603      	mov	r3, r0
 8001078:	2b00      	cmp	r3, #0
 800107a:	d001      	beq.n	8001080 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800107c:	f000 f878 	bl	8001170 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001080:	2300      	movs	r3, #0
 8001082:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001084:	2300      	movs	r3, #0
 8001086:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001088:	463b      	mov	r3, r7
 800108a:	4619      	mov	r1, r3
 800108c:	4805      	ldr	r0, [pc, #20]	@ (80010a4 <MX_TIM2_Init+0x94>)
 800108e:	f003 fa79 	bl	8004584 <HAL_TIMEx_MasterConfigSynchronization>
 8001092:	4603      	mov	r3, r0
 8001094:	2b00      	cmp	r3, #0
 8001096:	d001      	beq.n	800109c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001098:	f000 f86a 	bl	8001170 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800109c:	bf00      	nop
 800109e:	3718      	adds	r7, #24
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd80      	pop	{r7, pc}
 80010a4:	200001e0 	.word	0x200001e0

080010a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b088      	sub	sp, #32
 80010ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010ae:	f107 0310 	add.w	r3, r7, #16
 80010b2:	2200      	movs	r2, #0
 80010b4:	601a      	str	r2, [r3, #0]
 80010b6:	605a      	str	r2, [r3, #4]
 80010b8:	609a      	str	r2, [r3, #8]
 80010ba:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80010bc:	4b29      	ldr	r3, [pc, #164]	@ (8001164 <MX_GPIO_Init+0xbc>)
 80010be:	699b      	ldr	r3, [r3, #24]
 80010c0:	4a28      	ldr	r2, [pc, #160]	@ (8001164 <MX_GPIO_Init+0xbc>)
 80010c2:	f043 0320 	orr.w	r3, r3, #32
 80010c6:	6193      	str	r3, [r2, #24]
 80010c8:	4b26      	ldr	r3, [pc, #152]	@ (8001164 <MX_GPIO_Init+0xbc>)
 80010ca:	699b      	ldr	r3, [r3, #24]
 80010cc:	f003 0320 	and.w	r3, r3, #32
 80010d0:	60fb      	str	r3, [r7, #12]
 80010d2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010d4:	4b23      	ldr	r3, [pc, #140]	@ (8001164 <MX_GPIO_Init+0xbc>)
 80010d6:	699b      	ldr	r3, [r3, #24]
 80010d8:	4a22      	ldr	r2, [pc, #136]	@ (8001164 <MX_GPIO_Init+0xbc>)
 80010da:	f043 0304 	orr.w	r3, r3, #4
 80010de:	6193      	str	r3, [r2, #24]
 80010e0:	4b20      	ldr	r3, [pc, #128]	@ (8001164 <MX_GPIO_Init+0xbc>)
 80010e2:	699b      	ldr	r3, [r3, #24]
 80010e4:	f003 0304 	and.w	r3, r3, #4
 80010e8:	60bb      	str	r3, [r7, #8]
 80010ea:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010ec:	4b1d      	ldr	r3, [pc, #116]	@ (8001164 <MX_GPIO_Init+0xbc>)
 80010ee:	699b      	ldr	r3, [r3, #24]
 80010f0:	4a1c      	ldr	r2, [pc, #112]	@ (8001164 <MX_GPIO_Init+0xbc>)
 80010f2:	f043 0308 	orr.w	r3, r3, #8
 80010f6:	6193      	str	r3, [r2, #24]
 80010f8:	4b1a      	ldr	r3, [pc, #104]	@ (8001164 <MX_GPIO_Init+0xbc>)
 80010fa:	699b      	ldr	r3, [r3, #24]
 80010fc:	f003 0308 	and.w	r3, r3, #8
 8001100:	607b      	str	r3, [r7, #4]
 8001102:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET);
 8001104:	2200      	movs	r2, #0
 8001106:	2104      	movs	r1, #4
 8001108:	4817      	ldr	r0, [pc, #92]	@ (8001168 <MX_GPIO_Init+0xc0>)
 800110a:	f000 fc3c 	bl	8001986 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 800110e:	2302      	movs	r3, #2
 8001110:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001112:	2300      	movs	r3, #0
 8001114:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001116:	2300      	movs	r3, #0
 8001118:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800111a:	f107 0310 	add.w	r3, r7, #16
 800111e:	4619      	mov	r1, r3
 8001120:	4811      	ldr	r0, [pc, #68]	@ (8001168 <MX_GPIO_Init+0xc0>)
 8001122:	f000 fa95 	bl	8001650 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001126:	2304      	movs	r3, #4
 8001128:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800112a:	2301      	movs	r3, #1
 800112c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800112e:	2300      	movs	r3, #0
 8001130:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001132:	2302      	movs	r3, #2
 8001134:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001136:	f107 0310 	add.w	r3, r7, #16
 800113a:	4619      	mov	r1, r3
 800113c:	480a      	ldr	r0, [pc, #40]	@ (8001168 <MX_GPIO_Init+0xc0>)
 800113e:	f000 fa87 	bl	8001650 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001142:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001146:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001148:	2300      	movs	r3, #0
 800114a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800114c:	2300      	movs	r3, #0
 800114e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001150:	f107 0310 	add.w	r3, r7, #16
 8001154:	4619      	mov	r1, r3
 8001156:	4805      	ldr	r0, [pc, #20]	@ (800116c <MX_GPIO_Init+0xc4>)
 8001158:	f000 fa7a 	bl	8001650 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800115c:	bf00      	nop
 800115e:	3720      	adds	r7, #32
 8001160:	46bd      	mov	sp, r7
 8001162:	bd80      	pop	{r7, pc}
 8001164:	40021000 	.word	0x40021000
 8001168:	40010800 	.word	0x40010800
 800116c:	40010c00 	.word	0x40010c00

08001170 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001170:	b480      	push	{r7}
 8001172:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001174:	b672      	cpsid	i
}
 8001176:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001178:	bf00      	nop
 800117a:	e7fd      	b.n	8001178 <Error_Handler+0x8>

0800117c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800117c:	b480      	push	{r7}
 800117e:	b085      	sub	sp, #20
 8001180:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001182:	4b15      	ldr	r3, [pc, #84]	@ (80011d8 <HAL_MspInit+0x5c>)
 8001184:	699b      	ldr	r3, [r3, #24]
 8001186:	4a14      	ldr	r2, [pc, #80]	@ (80011d8 <HAL_MspInit+0x5c>)
 8001188:	f043 0301 	orr.w	r3, r3, #1
 800118c:	6193      	str	r3, [r2, #24]
 800118e:	4b12      	ldr	r3, [pc, #72]	@ (80011d8 <HAL_MspInit+0x5c>)
 8001190:	699b      	ldr	r3, [r3, #24]
 8001192:	f003 0301 	and.w	r3, r3, #1
 8001196:	60bb      	str	r3, [r7, #8]
 8001198:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800119a:	4b0f      	ldr	r3, [pc, #60]	@ (80011d8 <HAL_MspInit+0x5c>)
 800119c:	69db      	ldr	r3, [r3, #28]
 800119e:	4a0e      	ldr	r2, [pc, #56]	@ (80011d8 <HAL_MspInit+0x5c>)
 80011a0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80011a4:	61d3      	str	r3, [r2, #28]
 80011a6:	4b0c      	ldr	r3, [pc, #48]	@ (80011d8 <HAL_MspInit+0x5c>)
 80011a8:	69db      	ldr	r3, [r3, #28]
 80011aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011ae:	607b      	str	r3, [r7, #4]
 80011b0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80011b2:	4b0a      	ldr	r3, [pc, #40]	@ (80011dc <HAL_MspInit+0x60>)
 80011b4:	685b      	ldr	r3, [r3, #4]
 80011b6:	60fb      	str	r3, [r7, #12]
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80011be:	60fb      	str	r3, [r7, #12]
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80011c6:	60fb      	str	r3, [r7, #12]
 80011c8:	4a04      	ldr	r2, [pc, #16]	@ (80011dc <HAL_MspInit+0x60>)
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011ce:	bf00      	nop
 80011d0:	3714      	adds	r7, #20
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bc80      	pop	{r7}
 80011d6:	4770      	bx	lr
 80011d8:	40021000 	.word	0x40021000
 80011dc:	40010000 	.word	0x40010000

080011e0 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b084      	sub	sp, #16
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	4a16      	ldr	r2, [pc, #88]	@ (8001248 <HAL_TIM_Base_MspInit+0x68>)
 80011ee:	4293      	cmp	r3, r2
 80011f0:	d114      	bne.n	800121c <HAL_TIM_Base_MspInit+0x3c>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80011f2:	4b16      	ldr	r3, [pc, #88]	@ (800124c <HAL_TIM_Base_MspInit+0x6c>)
 80011f4:	699b      	ldr	r3, [r3, #24]
 80011f6:	4a15      	ldr	r2, [pc, #84]	@ (800124c <HAL_TIM_Base_MspInit+0x6c>)
 80011f8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80011fc:	6193      	str	r3, [r2, #24]
 80011fe:	4b13      	ldr	r3, [pc, #76]	@ (800124c <HAL_TIM_Base_MspInit+0x6c>)
 8001200:	699b      	ldr	r3, [r3, #24]
 8001202:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001206:	60fb      	str	r3, [r7, #12]
 8001208:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 800120a:	2200      	movs	r2, #0
 800120c:	2100      	movs	r1, #0
 800120e:	2019      	movs	r0, #25
 8001210:	f000 f9e7 	bl	80015e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8001214:	2019      	movs	r0, #25
 8001216:	f000 fa00 	bl	800161a <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM2_MspInit 1 */

    /* USER CODE END TIM2_MspInit 1 */
  }

}
 800121a:	e010      	b.n	800123e <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM2)
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001224:	d10b      	bne.n	800123e <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001226:	4b09      	ldr	r3, [pc, #36]	@ (800124c <HAL_TIM_Base_MspInit+0x6c>)
 8001228:	69db      	ldr	r3, [r3, #28]
 800122a:	4a08      	ldr	r2, [pc, #32]	@ (800124c <HAL_TIM_Base_MspInit+0x6c>)
 800122c:	f043 0301 	orr.w	r3, r3, #1
 8001230:	61d3      	str	r3, [r2, #28]
 8001232:	4b06      	ldr	r3, [pc, #24]	@ (800124c <HAL_TIM_Base_MspInit+0x6c>)
 8001234:	69db      	ldr	r3, [r3, #28]
 8001236:	f003 0301 	and.w	r3, r3, #1
 800123a:	60bb      	str	r3, [r7, #8]
 800123c:	68bb      	ldr	r3, [r7, #8]
}
 800123e:	bf00      	nop
 8001240:	3710      	adds	r7, #16
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}
 8001246:	bf00      	nop
 8001248:	40012c00 	.word	0x40012c00
 800124c:	40021000 	.word	0x40021000

08001250 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001250:	b480      	push	{r7}
 8001252:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001254:	bf00      	nop
 8001256:	e7fd      	b.n	8001254 <NMI_Handler+0x4>

08001258 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001258:	b480      	push	{r7}
 800125a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800125c:	bf00      	nop
 800125e:	e7fd      	b.n	800125c <HardFault_Handler+0x4>

08001260 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001260:	b480      	push	{r7}
 8001262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001264:	bf00      	nop
 8001266:	e7fd      	b.n	8001264 <MemManage_Handler+0x4>

08001268 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001268:	b480      	push	{r7}
 800126a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800126c:	bf00      	nop
 800126e:	e7fd      	b.n	800126c <BusFault_Handler+0x4>

08001270 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001270:	b480      	push	{r7}
 8001272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001274:	bf00      	nop
 8001276:	e7fd      	b.n	8001274 <UsageFault_Handler+0x4>

08001278 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001278:	b480      	push	{r7}
 800127a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800127c:	bf00      	nop
 800127e:	46bd      	mov	sp, r7
 8001280:	bc80      	pop	{r7}
 8001282:	4770      	bx	lr

08001284 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001284:	b480      	push	{r7}
 8001286:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001288:	bf00      	nop
 800128a:	46bd      	mov	sp, r7
 800128c:	bc80      	pop	{r7}
 800128e:	4770      	bx	lr

08001290 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001290:	b480      	push	{r7}
 8001292:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001294:	bf00      	nop
 8001296:	46bd      	mov	sp, r7
 8001298:	bc80      	pop	{r7}
 800129a:	4770      	bx	lr

0800129c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012a0:	f000 f888 	bl	80013b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012a4:	bf00      	nop
 80012a6:	bd80      	pop	{r7, pc}

080012a8 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80012ac:	4802      	ldr	r0, [pc, #8]	@ (80012b8 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80012ae:	f000 fc9e 	bl	8001bee <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80012b2:	bf00      	nop
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	bf00      	nop
 80012b8:	20000f20 	.word	0x20000f20

080012bc <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80012c0:	4802      	ldr	r0, [pc, #8]	@ (80012cc <TIM1_UP_IRQHandler+0x10>)
 80012c2:	f002 fe7f 	bl	8003fc4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80012c6:	bf00      	nop
 80012c8:	bd80      	pop	{r7, pc}
 80012ca:	bf00      	nop
 80012cc:	20000198 	.word	0x20000198

080012d0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80012d0:	b480      	push	{r7}
 80012d2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80012d4:	bf00      	nop
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bc80      	pop	{r7}
 80012da:	4770      	bx	lr

080012dc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80012dc:	f7ff fff8 	bl	80012d0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80012e0:	480b      	ldr	r0, [pc, #44]	@ (8001310 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80012e2:	490c      	ldr	r1, [pc, #48]	@ (8001314 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80012e4:	4a0c      	ldr	r2, [pc, #48]	@ (8001318 <LoopFillZerobss+0x16>)
  movs r3, #0
 80012e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012e8:	e002      	b.n	80012f0 <LoopCopyDataInit>

080012ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012ee:	3304      	adds	r3, #4

080012f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012f4:	d3f9      	bcc.n	80012ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012f6:	4a09      	ldr	r2, [pc, #36]	@ (800131c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80012f8:	4c09      	ldr	r4, [pc, #36]	@ (8001320 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80012fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012fc:	e001      	b.n	8001302 <LoopFillZerobss>

080012fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001300:	3204      	adds	r2, #4

08001302 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001302:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001304:	d3fb      	bcc.n	80012fe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001306:	f007 fd53 	bl	8008db0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800130a:	f7ff fd83 	bl	8000e14 <main>
  bx lr
 800130e:	4770      	bx	lr
  ldr r0, =_sdata
 8001310:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001314:	2000017c 	.word	0x2000017c
  ldr r2, =_sidata
 8001318:	08008e8c 	.word	0x08008e8c
  ldr r2, =_sbss
 800131c:	2000017c 	.word	0x2000017c
  ldr r4, =_ebss
 8001320:	20001418 	.word	0x20001418

08001324 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001324:	e7fe      	b.n	8001324 <ADC1_2_IRQHandler>
	...

08001328 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800132c:	4b08      	ldr	r3, [pc, #32]	@ (8001350 <HAL_Init+0x28>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	4a07      	ldr	r2, [pc, #28]	@ (8001350 <HAL_Init+0x28>)
 8001332:	f043 0310 	orr.w	r3, r3, #16
 8001336:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001338:	2003      	movs	r0, #3
 800133a:	f000 f947 	bl	80015cc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800133e:	200f      	movs	r0, #15
 8001340:	f000 f808 	bl	8001354 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001344:	f7ff ff1a 	bl	800117c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001348:	2300      	movs	r3, #0
}
 800134a:	4618      	mov	r0, r3
 800134c:	bd80      	pop	{r7, pc}
 800134e:	bf00      	nop
 8001350:	40022000 	.word	0x40022000

08001354 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b082      	sub	sp, #8
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800135c:	4b12      	ldr	r3, [pc, #72]	@ (80013a8 <HAL_InitTick+0x54>)
 800135e:	681a      	ldr	r2, [r3, #0]
 8001360:	4b12      	ldr	r3, [pc, #72]	@ (80013ac <HAL_InitTick+0x58>)
 8001362:	781b      	ldrb	r3, [r3, #0]
 8001364:	4619      	mov	r1, r3
 8001366:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800136a:	fbb3 f3f1 	udiv	r3, r3, r1
 800136e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001372:	4618      	mov	r0, r3
 8001374:	f000 f95f 	bl	8001636 <HAL_SYSTICK_Config>
 8001378:	4603      	mov	r3, r0
 800137a:	2b00      	cmp	r3, #0
 800137c:	d001      	beq.n	8001382 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800137e:	2301      	movs	r3, #1
 8001380:	e00e      	b.n	80013a0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	2b0f      	cmp	r3, #15
 8001386:	d80a      	bhi.n	800139e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001388:	2200      	movs	r2, #0
 800138a:	6879      	ldr	r1, [r7, #4]
 800138c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001390:	f000 f927 	bl	80015e2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001394:	4a06      	ldr	r2, [pc, #24]	@ (80013b0 <HAL_InitTick+0x5c>)
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800139a:	2300      	movs	r3, #0
 800139c:	e000      	b.n	80013a0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800139e:	2301      	movs	r3, #1
}
 80013a0:	4618      	mov	r0, r3
 80013a2:	3708      	adds	r7, #8
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bd80      	pop	{r7, pc}
 80013a8:	20000000 	.word	0x20000000
 80013ac:	20000008 	.word	0x20000008
 80013b0:	20000004 	.word	0x20000004

080013b4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013b4:	b480      	push	{r7}
 80013b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013b8:	4b05      	ldr	r3, [pc, #20]	@ (80013d0 <HAL_IncTick+0x1c>)
 80013ba:	781b      	ldrb	r3, [r3, #0]
 80013bc:	461a      	mov	r2, r3
 80013be:	4b05      	ldr	r3, [pc, #20]	@ (80013d4 <HAL_IncTick+0x20>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	4413      	add	r3, r2
 80013c4:	4a03      	ldr	r2, [pc, #12]	@ (80013d4 <HAL_IncTick+0x20>)
 80013c6:	6013      	str	r3, [r2, #0]
}
 80013c8:	bf00      	nop
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bc80      	pop	{r7}
 80013ce:	4770      	bx	lr
 80013d0:	20000008 	.word	0x20000008
 80013d4:	20000254 	.word	0x20000254

080013d8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013d8:	b480      	push	{r7}
 80013da:	af00      	add	r7, sp, #0
  return uwTick;
 80013dc:	4b02      	ldr	r3, [pc, #8]	@ (80013e8 <HAL_GetTick+0x10>)
 80013de:	681b      	ldr	r3, [r3, #0]
}
 80013e0:	4618      	mov	r0, r3
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bc80      	pop	{r7}
 80013e6:	4770      	bx	lr
 80013e8:	20000254 	.word	0x20000254

080013ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b084      	sub	sp, #16
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80013f4:	f7ff fff0 	bl	80013d8 <HAL_GetTick>
 80013f8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001404:	d005      	beq.n	8001412 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001406:	4b0a      	ldr	r3, [pc, #40]	@ (8001430 <HAL_Delay+0x44>)
 8001408:	781b      	ldrb	r3, [r3, #0]
 800140a:	461a      	mov	r2, r3
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	4413      	add	r3, r2
 8001410:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001412:	bf00      	nop
 8001414:	f7ff ffe0 	bl	80013d8 <HAL_GetTick>
 8001418:	4602      	mov	r2, r0
 800141a:	68bb      	ldr	r3, [r7, #8]
 800141c:	1ad3      	subs	r3, r2, r3
 800141e:	68fa      	ldr	r2, [r7, #12]
 8001420:	429a      	cmp	r2, r3
 8001422:	d8f7      	bhi.n	8001414 <HAL_Delay+0x28>
  {
  }
}
 8001424:	bf00      	nop
 8001426:	bf00      	nop
 8001428:	3710      	adds	r7, #16
 800142a:	46bd      	mov	sp, r7
 800142c:	bd80      	pop	{r7, pc}
 800142e:	bf00      	nop
 8001430:	20000008 	.word	0x20000008

08001434 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001434:	b480      	push	{r7}
 8001436:	b085      	sub	sp, #20
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	f003 0307 	and.w	r3, r3, #7
 8001442:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001444:	4b0c      	ldr	r3, [pc, #48]	@ (8001478 <__NVIC_SetPriorityGrouping+0x44>)
 8001446:	68db      	ldr	r3, [r3, #12]
 8001448:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800144a:	68ba      	ldr	r2, [r7, #8]
 800144c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001450:	4013      	ands	r3, r2
 8001452:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001458:	68bb      	ldr	r3, [r7, #8]
 800145a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800145c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001460:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001464:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001466:	4a04      	ldr	r2, [pc, #16]	@ (8001478 <__NVIC_SetPriorityGrouping+0x44>)
 8001468:	68bb      	ldr	r3, [r7, #8]
 800146a:	60d3      	str	r3, [r2, #12]
}
 800146c:	bf00      	nop
 800146e:	3714      	adds	r7, #20
 8001470:	46bd      	mov	sp, r7
 8001472:	bc80      	pop	{r7}
 8001474:	4770      	bx	lr
 8001476:	bf00      	nop
 8001478:	e000ed00 	.word	0xe000ed00

0800147c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800147c:	b480      	push	{r7}
 800147e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001480:	4b04      	ldr	r3, [pc, #16]	@ (8001494 <__NVIC_GetPriorityGrouping+0x18>)
 8001482:	68db      	ldr	r3, [r3, #12]
 8001484:	0a1b      	lsrs	r3, r3, #8
 8001486:	f003 0307 	and.w	r3, r3, #7
}
 800148a:	4618      	mov	r0, r3
 800148c:	46bd      	mov	sp, r7
 800148e:	bc80      	pop	{r7}
 8001490:	4770      	bx	lr
 8001492:	bf00      	nop
 8001494:	e000ed00 	.word	0xe000ed00

08001498 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001498:	b480      	push	{r7}
 800149a:	b083      	sub	sp, #12
 800149c:	af00      	add	r7, sp, #0
 800149e:	4603      	mov	r3, r0
 80014a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	db0b      	blt.n	80014c2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014aa:	79fb      	ldrb	r3, [r7, #7]
 80014ac:	f003 021f 	and.w	r2, r3, #31
 80014b0:	4906      	ldr	r1, [pc, #24]	@ (80014cc <__NVIC_EnableIRQ+0x34>)
 80014b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014b6:	095b      	lsrs	r3, r3, #5
 80014b8:	2001      	movs	r0, #1
 80014ba:	fa00 f202 	lsl.w	r2, r0, r2
 80014be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80014c2:	bf00      	nop
 80014c4:	370c      	adds	r7, #12
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bc80      	pop	{r7}
 80014ca:	4770      	bx	lr
 80014cc:	e000e100 	.word	0xe000e100

080014d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014d0:	b480      	push	{r7}
 80014d2:	b083      	sub	sp, #12
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	4603      	mov	r3, r0
 80014d8:	6039      	str	r1, [r7, #0]
 80014da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	db0a      	blt.n	80014fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	b2da      	uxtb	r2, r3
 80014e8:	490c      	ldr	r1, [pc, #48]	@ (800151c <__NVIC_SetPriority+0x4c>)
 80014ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014ee:	0112      	lsls	r2, r2, #4
 80014f0:	b2d2      	uxtb	r2, r2
 80014f2:	440b      	add	r3, r1
 80014f4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014f8:	e00a      	b.n	8001510 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014fa:	683b      	ldr	r3, [r7, #0]
 80014fc:	b2da      	uxtb	r2, r3
 80014fe:	4908      	ldr	r1, [pc, #32]	@ (8001520 <__NVIC_SetPriority+0x50>)
 8001500:	79fb      	ldrb	r3, [r7, #7]
 8001502:	f003 030f 	and.w	r3, r3, #15
 8001506:	3b04      	subs	r3, #4
 8001508:	0112      	lsls	r2, r2, #4
 800150a:	b2d2      	uxtb	r2, r2
 800150c:	440b      	add	r3, r1
 800150e:	761a      	strb	r2, [r3, #24]
}
 8001510:	bf00      	nop
 8001512:	370c      	adds	r7, #12
 8001514:	46bd      	mov	sp, r7
 8001516:	bc80      	pop	{r7}
 8001518:	4770      	bx	lr
 800151a:	bf00      	nop
 800151c:	e000e100 	.word	0xe000e100
 8001520:	e000ed00 	.word	0xe000ed00

08001524 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001524:	b480      	push	{r7}
 8001526:	b089      	sub	sp, #36	@ 0x24
 8001528:	af00      	add	r7, sp, #0
 800152a:	60f8      	str	r0, [r7, #12]
 800152c:	60b9      	str	r1, [r7, #8]
 800152e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	f003 0307 	and.w	r3, r3, #7
 8001536:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001538:	69fb      	ldr	r3, [r7, #28]
 800153a:	f1c3 0307 	rsb	r3, r3, #7
 800153e:	2b04      	cmp	r3, #4
 8001540:	bf28      	it	cs
 8001542:	2304      	movcs	r3, #4
 8001544:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001546:	69fb      	ldr	r3, [r7, #28]
 8001548:	3304      	adds	r3, #4
 800154a:	2b06      	cmp	r3, #6
 800154c:	d902      	bls.n	8001554 <NVIC_EncodePriority+0x30>
 800154e:	69fb      	ldr	r3, [r7, #28]
 8001550:	3b03      	subs	r3, #3
 8001552:	e000      	b.n	8001556 <NVIC_EncodePriority+0x32>
 8001554:	2300      	movs	r3, #0
 8001556:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001558:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800155c:	69bb      	ldr	r3, [r7, #24]
 800155e:	fa02 f303 	lsl.w	r3, r2, r3
 8001562:	43da      	mvns	r2, r3
 8001564:	68bb      	ldr	r3, [r7, #8]
 8001566:	401a      	ands	r2, r3
 8001568:	697b      	ldr	r3, [r7, #20]
 800156a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800156c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001570:	697b      	ldr	r3, [r7, #20]
 8001572:	fa01 f303 	lsl.w	r3, r1, r3
 8001576:	43d9      	mvns	r1, r3
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800157c:	4313      	orrs	r3, r2
         );
}
 800157e:	4618      	mov	r0, r3
 8001580:	3724      	adds	r7, #36	@ 0x24
 8001582:	46bd      	mov	sp, r7
 8001584:	bc80      	pop	{r7}
 8001586:	4770      	bx	lr

08001588 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b082      	sub	sp, #8
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	3b01      	subs	r3, #1
 8001594:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001598:	d301      	bcc.n	800159e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800159a:	2301      	movs	r3, #1
 800159c:	e00f      	b.n	80015be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800159e:	4a0a      	ldr	r2, [pc, #40]	@ (80015c8 <SysTick_Config+0x40>)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	3b01      	subs	r3, #1
 80015a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015a6:	210f      	movs	r1, #15
 80015a8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80015ac:	f7ff ff90 	bl	80014d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015b0:	4b05      	ldr	r3, [pc, #20]	@ (80015c8 <SysTick_Config+0x40>)
 80015b2:	2200      	movs	r2, #0
 80015b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015b6:	4b04      	ldr	r3, [pc, #16]	@ (80015c8 <SysTick_Config+0x40>)
 80015b8:	2207      	movs	r2, #7
 80015ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015bc:	2300      	movs	r3, #0
}
 80015be:	4618      	mov	r0, r3
 80015c0:	3708      	adds	r7, #8
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd80      	pop	{r7, pc}
 80015c6:	bf00      	nop
 80015c8:	e000e010 	.word	0xe000e010

080015cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b082      	sub	sp, #8
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015d4:	6878      	ldr	r0, [r7, #4]
 80015d6:	f7ff ff2d 	bl	8001434 <__NVIC_SetPriorityGrouping>
}
 80015da:	bf00      	nop
 80015dc:	3708      	adds	r7, #8
 80015de:	46bd      	mov	sp, r7
 80015e0:	bd80      	pop	{r7, pc}

080015e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80015e2:	b580      	push	{r7, lr}
 80015e4:	b086      	sub	sp, #24
 80015e6:	af00      	add	r7, sp, #0
 80015e8:	4603      	mov	r3, r0
 80015ea:	60b9      	str	r1, [r7, #8]
 80015ec:	607a      	str	r2, [r7, #4]
 80015ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80015f0:	2300      	movs	r3, #0
 80015f2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80015f4:	f7ff ff42 	bl	800147c <__NVIC_GetPriorityGrouping>
 80015f8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015fa:	687a      	ldr	r2, [r7, #4]
 80015fc:	68b9      	ldr	r1, [r7, #8]
 80015fe:	6978      	ldr	r0, [r7, #20]
 8001600:	f7ff ff90 	bl	8001524 <NVIC_EncodePriority>
 8001604:	4602      	mov	r2, r0
 8001606:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800160a:	4611      	mov	r1, r2
 800160c:	4618      	mov	r0, r3
 800160e:	f7ff ff5f 	bl	80014d0 <__NVIC_SetPriority>
}
 8001612:	bf00      	nop
 8001614:	3718      	adds	r7, #24
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}

0800161a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800161a:	b580      	push	{r7, lr}
 800161c:	b082      	sub	sp, #8
 800161e:	af00      	add	r7, sp, #0
 8001620:	4603      	mov	r3, r0
 8001622:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001624:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001628:	4618      	mov	r0, r3
 800162a:	f7ff ff35 	bl	8001498 <__NVIC_EnableIRQ>
}
 800162e:	bf00      	nop
 8001630:	3708      	adds	r7, #8
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}

08001636 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001636:	b580      	push	{r7, lr}
 8001638:	b082      	sub	sp, #8
 800163a:	af00      	add	r7, sp, #0
 800163c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800163e:	6878      	ldr	r0, [r7, #4]
 8001640:	f7ff ffa2 	bl	8001588 <SysTick_Config>
 8001644:	4603      	mov	r3, r0
}
 8001646:	4618      	mov	r0, r3
 8001648:	3708      	adds	r7, #8
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}
	...

08001650 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001650:	b480      	push	{r7}
 8001652:	b08b      	sub	sp, #44	@ 0x2c
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
 8001658:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800165a:	2300      	movs	r3, #0
 800165c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800165e:	2300      	movs	r3, #0
 8001660:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001662:	e169      	b.n	8001938 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001664:	2201      	movs	r2, #1
 8001666:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001668:	fa02 f303 	lsl.w	r3, r2, r3
 800166c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800166e:	683b      	ldr	r3, [r7, #0]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	69fa      	ldr	r2, [r7, #28]
 8001674:	4013      	ands	r3, r2
 8001676:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001678:	69ba      	ldr	r2, [r7, #24]
 800167a:	69fb      	ldr	r3, [r7, #28]
 800167c:	429a      	cmp	r2, r3
 800167e:	f040 8158 	bne.w	8001932 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001682:	683b      	ldr	r3, [r7, #0]
 8001684:	685b      	ldr	r3, [r3, #4]
 8001686:	4a9a      	ldr	r2, [pc, #616]	@ (80018f0 <HAL_GPIO_Init+0x2a0>)
 8001688:	4293      	cmp	r3, r2
 800168a:	d05e      	beq.n	800174a <HAL_GPIO_Init+0xfa>
 800168c:	4a98      	ldr	r2, [pc, #608]	@ (80018f0 <HAL_GPIO_Init+0x2a0>)
 800168e:	4293      	cmp	r3, r2
 8001690:	d875      	bhi.n	800177e <HAL_GPIO_Init+0x12e>
 8001692:	4a98      	ldr	r2, [pc, #608]	@ (80018f4 <HAL_GPIO_Init+0x2a4>)
 8001694:	4293      	cmp	r3, r2
 8001696:	d058      	beq.n	800174a <HAL_GPIO_Init+0xfa>
 8001698:	4a96      	ldr	r2, [pc, #600]	@ (80018f4 <HAL_GPIO_Init+0x2a4>)
 800169a:	4293      	cmp	r3, r2
 800169c:	d86f      	bhi.n	800177e <HAL_GPIO_Init+0x12e>
 800169e:	4a96      	ldr	r2, [pc, #600]	@ (80018f8 <HAL_GPIO_Init+0x2a8>)
 80016a0:	4293      	cmp	r3, r2
 80016a2:	d052      	beq.n	800174a <HAL_GPIO_Init+0xfa>
 80016a4:	4a94      	ldr	r2, [pc, #592]	@ (80018f8 <HAL_GPIO_Init+0x2a8>)
 80016a6:	4293      	cmp	r3, r2
 80016a8:	d869      	bhi.n	800177e <HAL_GPIO_Init+0x12e>
 80016aa:	4a94      	ldr	r2, [pc, #592]	@ (80018fc <HAL_GPIO_Init+0x2ac>)
 80016ac:	4293      	cmp	r3, r2
 80016ae:	d04c      	beq.n	800174a <HAL_GPIO_Init+0xfa>
 80016b0:	4a92      	ldr	r2, [pc, #584]	@ (80018fc <HAL_GPIO_Init+0x2ac>)
 80016b2:	4293      	cmp	r3, r2
 80016b4:	d863      	bhi.n	800177e <HAL_GPIO_Init+0x12e>
 80016b6:	4a92      	ldr	r2, [pc, #584]	@ (8001900 <HAL_GPIO_Init+0x2b0>)
 80016b8:	4293      	cmp	r3, r2
 80016ba:	d046      	beq.n	800174a <HAL_GPIO_Init+0xfa>
 80016bc:	4a90      	ldr	r2, [pc, #576]	@ (8001900 <HAL_GPIO_Init+0x2b0>)
 80016be:	4293      	cmp	r3, r2
 80016c0:	d85d      	bhi.n	800177e <HAL_GPIO_Init+0x12e>
 80016c2:	2b12      	cmp	r3, #18
 80016c4:	d82a      	bhi.n	800171c <HAL_GPIO_Init+0xcc>
 80016c6:	2b12      	cmp	r3, #18
 80016c8:	d859      	bhi.n	800177e <HAL_GPIO_Init+0x12e>
 80016ca:	a201      	add	r2, pc, #4	@ (adr r2, 80016d0 <HAL_GPIO_Init+0x80>)
 80016cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016d0:	0800174b 	.word	0x0800174b
 80016d4:	08001725 	.word	0x08001725
 80016d8:	08001737 	.word	0x08001737
 80016dc:	08001779 	.word	0x08001779
 80016e0:	0800177f 	.word	0x0800177f
 80016e4:	0800177f 	.word	0x0800177f
 80016e8:	0800177f 	.word	0x0800177f
 80016ec:	0800177f 	.word	0x0800177f
 80016f0:	0800177f 	.word	0x0800177f
 80016f4:	0800177f 	.word	0x0800177f
 80016f8:	0800177f 	.word	0x0800177f
 80016fc:	0800177f 	.word	0x0800177f
 8001700:	0800177f 	.word	0x0800177f
 8001704:	0800177f 	.word	0x0800177f
 8001708:	0800177f 	.word	0x0800177f
 800170c:	0800177f 	.word	0x0800177f
 8001710:	0800177f 	.word	0x0800177f
 8001714:	0800172d 	.word	0x0800172d
 8001718:	08001741 	.word	0x08001741
 800171c:	4a79      	ldr	r2, [pc, #484]	@ (8001904 <HAL_GPIO_Init+0x2b4>)
 800171e:	4293      	cmp	r3, r2
 8001720:	d013      	beq.n	800174a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001722:	e02c      	b.n	800177e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	68db      	ldr	r3, [r3, #12]
 8001728:	623b      	str	r3, [r7, #32]
          break;
 800172a:	e029      	b.n	8001780 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	68db      	ldr	r3, [r3, #12]
 8001730:	3304      	adds	r3, #4
 8001732:	623b      	str	r3, [r7, #32]
          break;
 8001734:	e024      	b.n	8001780 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001736:	683b      	ldr	r3, [r7, #0]
 8001738:	68db      	ldr	r3, [r3, #12]
 800173a:	3308      	adds	r3, #8
 800173c:	623b      	str	r3, [r7, #32]
          break;
 800173e:	e01f      	b.n	8001780 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	68db      	ldr	r3, [r3, #12]
 8001744:	330c      	adds	r3, #12
 8001746:	623b      	str	r3, [r7, #32]
          break;
 8001748:	e01a      	b.n	8001780 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800174a:	683b      	ldr	r3, [r7, #0]
 800174c:	689b      	ldr	r3, [r3, #8]
 800174e:	2b00      	cmp	r3, #0
 8001750:	d102      	bne.n	8001758 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001752:	2304      	movs	r3, #4
 8001754:	623b      	str	r3, [r7, #32]
          break;
 8001756:	e013      	b.n	8001780 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	689b      	ldr	r3, [r3, #8]
 800175c:	2b01      	cmp	r3, #1
 800175e:	d105      	bne.n	800176c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001760:	2308      	movs	r3, #8
 8001762:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	69fa      	ldr	r2, [r7, #28]
 8001768:	611a      	str	r2, [r3, #16]
          break;
 800176a:	e009      	b.n	8001780 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800176c:	2308      	movs	r3, #8
 800176e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	69fa      	ldr	r2, [r7, #28]
 8001774:	615a      	str	r2, [r3, #20]
          break;
 8001776:	e003      	b.n	8001780 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001778:	2300      	movs	r3, #0
 800177a:	623b      	str	r3, [r7, #32]
          break;
 800177c:	e000      	b.n	8001780 <HAL_GPIO_Init+0x130>
          break;
 800177e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001780:	69bb      	ldr	r3, [r7, #24]
 8001782:	2bff      	cmp	r3, #255	@ 0xff
 8001784:	d801      	bhi.n	800178a <HAL_GPIO_Init+0x13a>
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	e001      	b.n	800178e <HAL_GPIO_Init+0x13e>
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	3304      	adds	r3, #4
 800178e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001790:	69bb      	ldr	r3, [r7, #24]
 8001792:	2bff      	cmp	r3, #255	@ 0xff
 8001794:	d802      	bhi.n	800179c <HAL_GPIO_Init+0x14c>
 8001796:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001798:	009b      	lsls	r3, r3, #2
 800179a:	e002      	b.n	80017a2 <HAL_GPIO_Init+0x152>
 800179c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800179e:	3b08      	subs	r3, #8
 80017a0:	009b      	lsls	r3, r3, #2
 80017a2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80017a4:	697b      	ldr	r3, [r7, #20]
 80017a6:	681a      	ldr	r2, [r3, #0]
 80017a8:	210f      	movs	r1, #15
 80017aa:	693b      	ldr	r3, [r7, #16]
 80017ac:	fa01 f303 	lsl.w	r3, r1, r3
 80017b0:	43db      	mvns	r3, r3
 80017b2:	401a      	ands	r2, r3
 80017b4:	6a39      	ldr	r1, [r7, #32]
 80017b6:	693b      	ldr	r3, [r7, #16]
 80017b8:	fa01 f303 	lsl.w	r3, r1, r3
 80017bc:	431a      	orrs	r2, r3
 80017be:	697b      	ldr	r3, [r7, #20]
 80017c0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80017c2:	683b      	ldr	r3, [r7, #0]
 80017c4:	685b      	ldr	r3, [r3, #4]
 80017c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	f000 80b1 	beq.w	8001932 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80017d0:	4b4d      	ldr	r3, [pc, #308]	@ (8001908 <HAL_GPIO_Init+0x2b8>)
 80017d2:	699b      	ldr	r3, [r3, #24]
 80017d4:	4a4c      	ldr	r2, [pc, #304]	@ (8001908 <HAL_GPIO_Init+0x2b8>)
 80017d6:	f043 0301 	orr.w	r3, r3, #1
 80017da:	6193      	str	r3, [r2, #24]
 80017dc:	4b4a      	ldr	r3, [pc, #296]	@ (8001908 <HAL_GPIO_Init+0x2b8>)
 80017de:	699b      	ldr	r3, [r3, #24]
 80017e0:	f003 0301 	and.w	r3, r3, #1
 80017e4:	60bb      	str	r3, [r7, #8]
 80017e6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80017e8:	4a48      	ldr	r2, [pc, #288]	@ (800190c <HAL_GPIO_Init+0x2bc>)
 80017ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017ec:	089b      	lsrs	r3, r3, #2
 80017ee:	3302      	adds	r3, #2
 80017f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017f4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80017f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017f8:	f003 0303 	and.w	r3, r3, #3
 80017fc:	009b      	lsls	r3, r3, #2
 80017fe:	220f      	movs	r2, #15
 8001800:	fa02 f303 	lsl.w	r3, r2, r3
 8001804:	43db      	mvns	r3, r3
 8001806:	68fa      	ldr	r2, [r7, #12]
 8001808:	4013      	ands	r3, r2
 800180a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	4a40      	ldr	r2, [pc, #256]	@ (8001910 <HAL_GPIO_Init+0x2c0>)
 8001810:	4293      	cmp	r3, r2
 8001812:	d013      	beq.n	800183c <HAL_GPIO_Init+0x1ec>
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	4a3f      	ldr	r2, [pc, #252]	@ (8001914 <HAL_GPIO_Init+0x2c4>)
 8001818:	4293      	cmp	r3, r2
 800181a:	d00d      	beq.n	8001838 <HAL_GPIO_Init+0x1e8>
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	4a3e      	ldr	r2, [pc, #248]	@ (8001918 <HAL_GPIO_Init+0x2c8>)
 8001820:	4293      	cmp	r3, r2
 8001822:	d007      	beq.n	8001834 <HAL_GPIO_Init+0x1e4>
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	4a3d      	ldr	r2, [pc, #244]	@ (800191c <HAL_GPIO_Init+0x2cc>)
 8001828:	4293      	cmp	r3, r2
 800182a:	d101      	bne.n	8001830 <HAL_GPIO_Init+0x1e0>
 800182c:	2303      	movs	r3, #3
 800182e:	e006      	b.n	800183e <HAL_GPIO_Init+0x1ee>
 8001830:	2304      	movs	r3, #4
 8001832:	e004      	b.n	800183e <HAL_GPIO_Init+0x1ee>
 8001834:	2302      	movs	r3, #2
 8001836:	e002      	b.n	800183e <HAL_GPIO_Init+0x1ee>
 8001838:	2301      	movs	r3, #1
 800183a:	e000      	b.n	800183e <HAL_GPIO_Init+0x1ee>
 800183c:	2300      	movs	r3, #0
 800183e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001840:	f002 0203 	and.w	r2, r2, #3
 8001844:	0092      	lsls	r2, r2, #2
 8001846:	4093      	lsls	r3, r2
 8001848:	68fa      	ldr	r2, [r7, #12]
 800184a:	4313      	orrs	r3, r2
 800184c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800184e:	492f      	ldr	r1, [pc, #188]	@ (800190c <HAL_GPIO_Init+0x2bc>)
 8001850:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001852:	089b      	lsrs	r3, r3, #2
 8001854:	3302      	adds	r3, #2
 8001856:	68fa      	ldr	r2, [r7, #12]
 8001858:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	685b      	ldr	r3, [r3, #4]
 8001860:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001864:	2b00      	cmp	r3, #0
 8001866:	d006      	beq.n	8001876 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001868:	4b2d      	ldr	r3, [pc, #180]	@ (8001920 <HAL_GPIO_Init+0x2d0>)
 800186a:	689a      	ldr	r2, [r3, #8]
 800186c:	492c      	ldr	r1, [pc, #176]	@ (8001920 <HAL_GPIO_Init+0x2d0>)
 800186e:	69bb      	ldr	r3, [r7, #24]
 8001870:	4313      	orrs	r3, r2
 8001872:	608b      	str	r3, [r1, #8]
 8001874:	e006      	b.n	8001884 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001876:	4b2a      	ldr	r3, [pc, #168]	@ (8001920 <HAL_GPIO_Init+0x2d0>)
 8001878:	689a      	ldr	r2, [r3, #8]
 800187a:	69bb      	ldr	r3, [r7, #24]
 800187c:	43db      	mvns	r3, r3
 800187e:	4928      	ldr	r1, [pc, #160]	@ (8001920 <HAL_GPIO_Init+0x2d0>)
 8001880:	4013      	ands	r3, r2
 8001882:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	685b      	ldr	r3, [r3, #4]
 8001888:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800188c:	2b00      	cmp	r3, #0
 800188e:	d006      	beq.n	800189e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001890:	4b23      	ldr	r3, [pc, #140]	@ (8001920 <HAL_GPIO_Init+0x2d0>)
 8001892:	68da      	ldr	r2, [r3, #12]
 8001894:	4922      	ldr	r1, [pc, #136]	@ (8001920 <HAL_GPIO_Init+0x2d0>)
 8001896:	69bb      	ldr	r3, [r7, #24]
 8001898:	4313      	orrs	r3, r2
 800189a:	60cb      	str	r3, [r1, #12]
 800189c:	e006      	b.n	80018ac <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800189e:	4b20      	ldr	r3, [pc, #128]	@ (8001920 <HAL_GPIO_Init+0x2d0>)
 80018a0:	68da      	ldr	r2, [r3, #12]
 80018a2:	69bb      	ldr	r3, [r7, #24]
 80018a4:	43db      	mvns	r3, r3
 80018a6:	491e      	ldr	r1, [pc, #120]	@ (8001920 <HAL_GPIO_Init+0x2d0>)
 80018a8:	4013      	ands	r3, r2
 80018aa:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	685b      	ldr	r3, [r3, #4]
 80018b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d006      	beq.n	80018c6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80018b8:	4b19      	ldr	r3, [pc, #100]	@ (8001920 <HAL_GPIO_Init+0x2d0>)
 80018ba:	685a      	ldr	r2, [r3, #4]
 80018bc:	4918      	ldr	r1, [pc, #96]	@ (8001920 <HAL_GPIO_Init+0x2d0>)
 80018be:	69bb      	ldr	r3, [r7, #24]
 80018c0:	4313      	orrs	r3, r2
 80018c2:	604b      	str	r3, [r1, #4]
 80018c4:	e006      	b.n	80018d4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80018c6:	4b16      	ldr	r3, [pc, #88]	@ (8001920 <HAL_GPIO_Init+0x2d0>)
 80018c8:	685a      	ldr	r2, [r3, #4]
 80018ca:	69bb      	ldr	r3, [r7, #24]
 80018cc:	43db      	mvns	r3, r3
 80018ce:	4914      	ldr	r1, [pc, #80]	@ (8001920 <HAL_GPIO_Init+0x2d0>)
 80018d0:	4013      	ands	r3, r2
 80018d2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	685b      	ldr	r3, [r3, #4]
 80018d8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d021      	beq.n	8001924 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80018e0:	4b0f      	ldr	r3, [pc, #60]	@ (8001920 <HAL_GPIO_Init+0x2d0>)
 80018e2:	681a      	ldr	r2, [r3, #0]
 80018e4:	490e      	ldr	r1, [pc, #56]	@ (8001920 <HAL_GPIO_Init+0x2d0>)
 80018e6:	69bb      	ldr	r3, [r7, #24]
 80018e8:	4313      	orrs	r3, r2
 80018ea:	600b      	str	r3, [r1, #0]
 80018ec:	e021      	b.n	8001932 <HAL_GPIO_Init+0x2e2>
 80018ee:	bf00      	nop
 80018f0:	10320000 	.word	0x10320000
 80018f4:	10310000 	.word	0x10310000
 80018f8:	10220000 	.word	0x10220000
 80018fc:	10210000 	.word	0x10210000
 8001900:	10120000 	.word	0x10120000
 8001904:	10110000 	.word	0x10110000
 8001908:	40021000 	.word	0x40021000
 800190c:	40010000 	.word	0x40010000
 8001910:	40010800 	.word	0x40010800
 8001914:	40010c00 	.word	0x40010c00
 8001918:	40011000 	.word	0x40011000
 800191c:	40011400 	.word	0x40011400
 8001920:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001924:	4b0b      	ldr	r3, [pc, #44]	@ (8001954 <HAL_GPIO_Init+0x304>)
 8001926:	681a      	ldr	r2, [r3, #0]
 8001928:	69bb      	ldr	r3, [r7, #24]
 800192a:	43db      	mvns	r3, r3
 800192c:	4909      	ldr	r1, [pc, #36]	@ (8001954 <HAL_GPIO_Init+0x304>)
 800192e:	4013      	ands	r3, r2
 8001930:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001932:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001934:	3301      	adds	r3, #1
 8001936:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	681a      	ldr	r2, [r3, #0]
 800193c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800193e:	fa22 f303 	lsr.w	r3, r2, r3
 8001942:	2b00      	cmp	r3, #0
 8001944:	f47f ae8e 	bne.w	8001664 <HAL_GPIO_Init+0x14>
  }
}
 8001948:	bf00      	nop
 800194a:	bf00      	nop
 800194c:	372c      	adds	r7, #44	@ 0x2c
 800194e:	46bd      	mov	sp, r7
 8001950:	bc80      	pop	{r7}
 8001952:	4770      	bx	lr
 8001954:	40010400 	.word	0x40010400

08001958 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001958:	b480      	push	{r7}
 800195a:	b085      	sub	sp, #20
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
 8001960:	460b      	mov	r3, r1
 8001962:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	689a      	ldr	r2, [r3, #8]
 8001968:	887b      	ldrh	r3, [r7, #2]
 800196a:	4013      	ands	r3, r2
 800196c:	2b00      	cmp	r3, #0
 800196e:	d002      	beq.n	8001976 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001970:	2301      	movs	r3, #1
 8001972:	73fb      	strb	r3, [r7, #15]
 8001974:	e001      	b.n	800197a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001976:	2300      	movs	r3, #0
 8001978:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800197a:	7bfb      	ldrb	r3, [r7, #15]
}
 800197c:	4618      	mov	r0, r3
 800197e:	3714      	adds	r7, #20
 8001980:	46bd      	mov	sp, r7
 8001982:	bc80      	pop	{r7}
 8001984:	4770      	bx	lr

08001986 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001986:	b480      	push	{r7}
 8001988:	b083      	sub	sp, #12
 800198a:	af00      	add	r7, sp, #0
 800198c:	6078      	str	r0, [r7, #4]
 800198e:	460b      	mov	r3, r1
 8001990:	807b      	strh	r3, [r7, #2]
 8001992:	4613      	mov	r3, r2
 8001994:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001996:	787b      	ldrb	r3, [r7, #1]
 8001998:	2b00      	cmp	r3, #0
 800199a:	d003      	beq.n	80019a4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800199c:	887a      	ldrh	r2, [r7, #2]
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80019a2:	e003      	b.n	80019ac <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80019a4:	887b      	ldrh	r3, [r7, #2]
 80019a6:	041a      	lsls	r2, r3, #16
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	611a      	str	r2, [r3, #16]
}
 80019ac:	bf00      	nop
 80019ae:	370c      	adds	r7, #12
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bc80      	pop	{r7}
 80019b4:	4770      	bx	lr

080019b6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80019b6:	b580      	push	{r7, lr}
 80019b8:	b084      	sub	sp, #16
 80019ba:	af00      	add	r7, sp, #0
 80019bc:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d101      	bne.n	80019c8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80019c4:	2301      	movs	r3, #1
 80019c6:	e0e8      	b.n	8001b9a <HAL_PCD_Init+0x1e4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 80019ce:	b2db      	uxtb	r3, r3
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d106      	bne.n	80019e2 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	2200      	movs	r2, #0
 80019d8:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80019dc:	6878      	ldr	r0, [r7, #4]
 80019de:	f006 ff35 	bl	800884c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	2203      	movs	r2, #3
 80019e6:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	2200      	movs	r2, #0
 80019ee:	715a      	strb	r2, [r3, #5]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4618      	mov	r0, r3
 80019f6:	f002 fe58 	bl	80046aa <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	6818      	ldr	r0, [r3, #0]
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	3304      	adds	r3, #4
 8001a02:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001a04:	f002 fe2e 	bl	8004664 <USB_CoreInit>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d005      	beq.n	8001a1a <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	2202      	movs	r2, #2
 8001a12:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8001a16:	2301      	movs	r3, #1
 8001a18:	e0bf      	b.n	8001b9a <HAL_PCD_Init+0x1e4>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	2100      	movs	r1, #0
 8001a20:	4618      	mov	r0, r3
 8001a22:	f002 fe5c 	bl	80046de <USB_SetCurrentMode>
 8001a26:	4603      	mov	r3, r0
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d005      	beq.n	8001a38 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	2202      	movs	r2, #2
 8001a30:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8001a34:	2301      	movs	r3, #1
 8001a36:	e0b0      	b.n	8001b9a <HAL_PCD_Init+0x1e4>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a38:	2300      	movs	r3, #0
 8001a3a:	73fb      	strb	r3, [r7, #15]
 8001a3c:	e03e      	b.n	8001abc <HAL_PCD_Init+0x106>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001a3e:	7bfa      	ldrb	r2, [r7, #15]
 8001a40:	6879      	ldr	r1, [r7, #4]
 8001a42:	4613      	mov	r3, r2
 8001a44:	009b      	lsls	r3, r3, #2
 8001a46:	4413      	add	r3, r2
 8001a48:	00db      	lsls	r3, r3, #3
 8001a4a:	440b      	add	r3, r1
 8001a4c:	3311      	adds	r3, #17
 8001a4e:	2201      	movs	r2, #1
 8001a50:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001a52:	7bfa      	ldrb	r2, [r7, #15]
 8001a54:	6879      	ldr	r1, [r7, #4]
 8001a56:	4613      	mov	r3, r2
 8001a58:	009b      	lsls	r3, r3, #2
 8001a5a:	4413      	add	r3, r2
 8001a5c:	00db      	lsls	r3, r3, #3
 8001a5e:	440b      	add	r3, r1
 8001a60:	3310      	adds	r3, #16
 8001a62:	7bfa      	ldrb	r2, [r7, #15]
 8001a64:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001a66:	7bfa      	ldrb	r2, [r7, #15]
 8001a68:	6879      	ldr	r1, [r7, #4]
 8001a6a:	4613      	mov	r3, r2
 8001a6c:	009b      	lsls	r3, r3, #2
 8001a6e:	4413      	add	r3, r2
 8001a70:	00db      	lsls	r3, r3, #3
 8001a72:	440b      	add	r3, r1
 8001a74:	3313      	adds	r3, #19
 8001a76:	2200      	movs	r2, #0
 8001a78:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001a7a:	7bfa      	ldrb	r2, [r7, #15]
 8001a7c:	6879      	ldr	r1, [r7, #4]
 8001a7e:	4613      	mov	r3, r2
 8001a80:	009b      	lsls	r3, r3, #2
 8001a82:	4413      	add	r3, r2
 8001a84:	00db      	lsls	r3, r3, #3
 8001a86:	440b      	add	r3, r1
 8001a88:	3320      	adds	r3, #32
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001a8e:	7bfa      	ldrb	r2, [r7, #15]
 8001a90:	6879      	ldr	r1, [r7, #4]
 8001a92:	4613      	mov	r3, r2
 8001a94:	009b      	lsls	r3, r3, #2
 8001a96:	4413      	add	r3, r2
 8001a98:	00db      	lsls	r3, r3, #3
 8001a9a:	440b      	add	r3, r1
 8001a9c:	3324      	adds	r3, #36	@ 0x24
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001aa2:	7bfb      	ldrb	r3, [r7, #15]
 8001aa4:	6879      	ldr	r1, [r7, #4]
 8001aa6:	1c5a      	adds	r2, r3, #1
 8001aa8:	4613      	mov	r3, r2
 8001aaa:	009b      	lsls	r3, r3, #2
 8001aac:	4413      	add	r3, r2
 8001aae:	00db      	lsls	r3, r3, #3
 8001ab0:	440b      	add	r3, r1
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ab6:	7bfb      	ldrb	r3, [r7, #15]
 8001ab8:	3301      	adds	r3, #1
 8001aba:	73fb      	strb	r3, [r7, #15]
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	791b      	ldrb	r3, [r3, #4]
 8001ac0:	7bfa      	ldrb	r2, [r7, #15]
 8001ac2:	429a      	cmp	r2, r3
 8001ac4:	d3bb      	bcc.n	8001a3e <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	73fb      	strb	r3, [r7, #15]
 8001aca:	e044      	b.n	8001b56 <HAL_PCD_Init+0x1a0>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001acc:	7bfa      	ldrb	r2, [r7, #15]
 8001ace:	6879      	ldr	r1, [r7, #4]
 8001ad0:	4613      	mov	r3, r2
 8001ad2:	009b      	lsls	r3, r3, #2
 8001ad4:	4413      	add	r3, r2
 8001ad6:	00db      	lsls	r3, r3, #3
 8001ad8:	440b      	add	r3, r1
 8001ada:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8001ade:	2200      	movs	r2, #0
 8001ae0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001ae2:	7bfa      	ldrb	r2, [r7, #15]
 8001ae4:	6879      	ldr	r1, [r7, #4]
 8001ae6:	4613      	mov	r3, r2
 8001ae8:	009b      	lsls	r3, r3, #2
 8001aea:	4413      	add	r3, r2
 8001aec:	00db      	lsls	r3, r3, #3
 8001aee:	440b      	add	r3, r1
 8001af0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001af4:	7bfa      	ldrb	r2, [r7, #15]
 8001af6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001af8:	7bfa      	ldrb	r2, [r7, #15]
 8001afa:	6879      	ldr	r1, [r7, #4]
 8001afc:	4613      	mov	r3, r2
 8001afe:	009b      	lsls	r3, r3, #2
 8001b00:	4413      	add	r3, r2
 8001b02:	00db      	lsls	r3, r3, #3
 8001b04:	440b      	add	r3, r1
 8001b06:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001b0e:	7bfa      	ldrb	r2, [r7, #15]
 8001b10:	6879      	ldr	r1, [r7, #4]
 8001b12:	4613      	mov	r3, r2
 8001b14:	009b      	lsls	r3, r3, #2
 8001b16:	4413      	add	r3, r2
 8001b18:	00db      	lsls	r3, r3, #3
 8001b1a:	440b      	add	r3, r1
 8001b1c:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8001b20:	2200      	movs	r2, #0
 8001b22:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001b24:	7bfa      	ldrb	r2, [r7, #15]
 8001b26:	6879      	ldr	r1, [r7, #4]
 8001b28:	4613      	mov	r3, r2
 8001b2a:	009b      	lsls	r3, r3, #2
 8001b2c:	4413      	add	r3, r2
 8001b2e:	00db      	lsls	r3, r3, #3
 8001b30:	440b      	add	r3, r1
 8001b32:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8001b36:	2200      	movs	r2, #0
 8001b38:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001b3a:	7bfa      	ldrb	r2, [r7, #15]
 8001b3c:	6879      	ldr	r1, [r7, #4]
 8001b3e:	4613      	mov	r3, r2
 8001b40:	009b      	lsls	r3, r3, #2
 8001b42:	4413      	add	r3, r2
 8001b44:	00db      	lsls	r3, r3, #3
 8001b46:	440b      	add	r3, r1
 8001b48:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b50:	7bfb      	ldrb	r3, [r7, #15]
 8001b52:	3301      	adds	r3, #1
 8001b54:	73fb      	strb	r3, [r7, #15]
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	791b      	ldrb	r3, [r3, #4]
 8001b5a:	7bfa      	ldrb	r2, [r7, #15]
 8001b5c:	429a      	cmp	r2, r3
 8001b5e:	d3b5      	bcc.n	8001acc <HAL_PCD_Init+0x116>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	6818      	ldr	r0, [r3, #0]
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	3304      	adds	r3, #4
 8001b68:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001b6a:	f002 fdc4 	bl	80046f6 <USB_DevInit>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d005      	beq.n	8001b80 <HAL_PCD_Init+0x1ca>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	2202      	movs	r2, #2
 8001b78:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8001b7c:	2301      	movs	r3, #1
 8001b7e:	e00c      	b.n	8001b9a <HAL_PCD_Init+0x1e4>
  }

  hpcd->USB_Address = 0U;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	2200      	movs	r2, #0
 8001b84:	735a      	strb	r2, [r3, #13]
  hpcd->State = HAL_PCD_STATE_READY;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	2201      	movs	r2, #1
 8001b8a:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
  (void)USB_DevDisconnect(hpcd->Instance);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	4618      	mov	r0, r3
 8001b94:	f005 f843 	bl	8006c1e <USB_DevDisconnect>

  return HAL_OK;
 8001b98:	2300      	movs	r3, #0
}
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	3710      	adds	r7, #16
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bd80      	pop	{r7, pc}

08001ba2 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001ba2:	b580      	push	{r7, lr}
 8001ba4:	b082      	sub	sp, #8
 8001ba6:	af00      	add	r7, sp, #0
 8001ba8:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8001bb0:	2b01      	cmp	r3, #1
 8001bb2:	d101      	bne.n	8001bb8 <HAL_PCD_Start+0x16>
 8001bb4:	2302      	movs	r3, #2
 8001bb6:	e016      	b.n	8001be6 <HAL_PCD_Start+0x44>
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	2201      	movs	r2, #1
 8001bbc:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	f002 fd5a 	bl	800467e <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8001bca:	2101      	movs	r1, #1
 8001bcc:	6878      	ldr	r0, [r7, #4]
 8001bce:	f007 f8b0 	bl	8008d32 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	f005 f817 	bl	8006c0a <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	2200      	movs	r2, #0
 8001be0:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8001be4:	2300      	movs	r3, #0
}
 8001be6:	4618      	mov	r0, r3
 8001be8:	3708      	adds	r7, #8
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd80      	pop	{r7, pc}

08001bee <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001bee:	b580      	push	{r7, lr}
 8001bf0:	b088      	sub	sp, #32
 8001bf2:	af00      	add	r7, sp, #0
 8001bf4:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	f005 f819 	bl	8006c32 <USB_ReadInterrupts>
 8001c00:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8001c02:	69bb      	ldr	r3, [r7, #24]
 8001c04:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d003      	beq.n	8001c14 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001c0c:	6878      	ldr	r0, [r7, #4]
 8001c0e:	f000 fb1a 	bl	8002246 <PCD_EP_ISR_Handler>

    return;
 8001c12:	e119      	b.n	8001e48 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8001c14:	69bb      	ldr	r3, [r7, #24]
 8001c16:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d013      	beq.n	8001c46 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001c26:	b29a      	uxth	r2, r3
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001c30:	b292      	uxth	r2, r2
 8001c32:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001c36:	6878      	ldr	r0, [r7, #4]
 8001c38:	f006 fe83 	bl	8008942 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001c3c:	2100      	movs	r1, #0
 8001c3e:	6878      	ldr	r0, [r7, #4]
 8001c40:	f000 f905 	bl	8001e4e <HAL_PCD_SetAddress>

    return;
 8001c44:	e100      	b.n	8001e48 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8001c46:	69bb      	ldr	r3, [r7, #24]
 8001c48:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d00c      	beq.n	8001c6a <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001c58:	b29a      	uxth	r2, r3
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8001c62:	b292      	uxth	r2, r2
 8001c64:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8001c68:	e0ee      	b.n	8001e48 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8001c6a:	69bb      	ldr	r3, [r7, #24]
 8001c6c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d00c      	beq.n	8001c8e <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001c7c:	b29a      	uxth	r2, r3
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001c86:	b292      	uxth	r2, r2
 8001c88:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8001c8c:	e0dc      	b.n	8001e48 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8001c8e:	69bb      	ldr	r3, [r7, #24]
 8001c90:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d027      	beq.n	8001ce8 <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001ca0:	b29a      	uxth	r2, r3
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f022 0204 	bic.w	r2, r2, #4
 8001caa:	b292      	uxth	r2, r2
 8001cac:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001cb8:	b29a      	uxth	r2, r3
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f022 0208 	bic.w	r2, r2, #8
 8001cc2:	b292      	uxth	r2, r2
 8001cc4:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001cc8:	6878      	ldr	r0, [r7, #4]
 8001cca:	f006 fe73 	bl	80089b4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001cd6:	b29a      	uxth	r2, r3
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001ce0:	b292      	uxth	r2, r2
 8001ce2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8001ce6:	e0af      	b.n	8001e48 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8001ce8:	69bb      	ldr	r3, [r7, #24]
 8001cea:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	f000 8083 	beq.w	8001dfa <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	77fb      	strb	r3, [r7, #31]
 8001cf8:	e010      	b.n	8001d1c <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	461a      	mov	r2, r3
 8001d00:	7ffb      	ldrb	r3, [r7, #31]
 8001d02:	009b      	lsls	r3, r3, #2
 8001d04:	441a      	add	r2, r3
 8001d06:	7ffb      	ldrb	r3, [r7, #31]
 8001d08:	8812      	ldrh	r2, [r2, #0]
 8001d0a:	b292      	uxth	r2, r2
 8001d0c:	005b      	lsls	r3, r3, #1
 8001d0e:	3320      	adds	r3, #32
 8001d10:	443b      	add	r3, r7
 8001d12:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 8001d16:	7ffb      	ldrb	r3, [r7, #31]
 8001d18:	3301      	adds	r3, #1
 8001d1a:	77fb      	strb	r3, [r7, #31]
 8001d1c:	7ffb      	ldrb	r3, [r7, #31]
 8001d1e:	2b07      	cmp	r3, #7
 8001d20:	d9eb      	bls.n	8001cfa <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001d2a:	b29a      	uxth	r2, r3
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f042 0201 	orr.w	r2, r2, #1
 8001d34:	b292      	uxth	r2, r2
 8001d36:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001d42:	b29a      	uxth	r2, r3
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f022 0201 	bic.w	r2, r2, #1
 8001d4c:	b292      	uxth	r2, r2
 8001d4e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8001d52:	bf00      	nop
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001d5c:	b29b      	uxth	r3, r3
 8001d5e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d0f6      	beq.n	8001d54 <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001d6e:	b29a      	uxth	r2, r3
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001d78:	b292      	uxth	r2, r2
 8001d7a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8001d7e:	2300      	movs	r3, #0
 8001d80:	77fb      	strb	r3, [r7, #31]
 8001d82:	e00f      	b.n	8001da4 <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8001d84:	7ffb      	ldrb	r3, [r7, #31]
 8001d86:	687a      	ldr	r2, [r7, #4]
 8001d88:	6812      	ldr	r2, [r2, #0]
 8001d8a:	4611      	mov	r1, r2
 8001d8c:	7ffa      	ldrb	r2, [r7, #31]
 8001d8e:	0092      	lsls	r2, r2, #2
 8001d90:	440a      	add	r2, r1
 8001d92:	005b      	lsls	r3, r3, #1
 8001d94:	3320      	adds	r3, #32
 8001d96:	443b      	add	r3, r7
 8001d98:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8001d9c:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8001d9e:	7ffb      	ldrb	r3, [r7, #31]
 8001da0:	3301      	adds	r3, #1
 8001da2:	77fb      	strb	r3, [r7, #31]
 8001da4:	7ffb      	ldrb	r3, [r7, #31]
 8001da6:	2b07      	cmp	r3, #7
 8001da8:	d9ec      	bls.n	8001d84 <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001db2:	b29a      	uxth	r2, r3
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f042 0208 	orr.w	r2, r2, #8
 8001dbc:	b292      	uxth	r2, r2
 8001dbe:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001dca:	b29a      	uxth	r2, r3
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001dd4:	b292      	uxth	r2, r2
 8001dd6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001de2:	b29a      	uxth	r2, r3
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f042 0204 	orr.w	r2, r2, #4
 8001dec:	b292      	uxth	r2, r2
 8001dee:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001df2:	6878      	ldr	r0, [r7, #4]
 8001df4:	f006 fdc4 	bl	8008980 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8001df8:	e026      	b.n	8001e48 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8001dfa:	69bb      	ldr	r3, [r7, #24]
 8001dfc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d00f      	beq.n	8001e24 <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001e0c:	b29a      	uxth	r2, r3
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001e16:	b292      	uxth	r2, r2
 8001e18:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001e1c:	6878      	ldr	r0, [r7, #4]
 8001e1e:	f006 fd82 	bl	8008926 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8001e22:	e011      	b.n	8001e48 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8001e24:	69bb      	ldr	r3, [r7, #24]
 8001e26:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d00c      	beq.n	8001e48 <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001e36:	b29a      	uxth	r2, r3
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001e40:	b292      	uxth	r2, r2
 8001e42:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8001e46:	bf00      	nop
  }
}
 8001e48:	3720      	adds	r7, #32
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bd80      	pop	{r7, pc}

08001e4e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001e4e:	b580      	push	{r7, lr}
 8001e50:	b082      	sub	sp, #8
 8001e52:	af00      	add	r7, sp, #0
 8001e54:	6078      	str	r0, [r7, #4]
 8001e56:	460b      	mov	r3, r1
 8001e58:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8001e60:	2b01      	cmp	r3, #1
 8001e62:	d101      	bne.n	8001e68 <HAL_PCD_SetAddress+0x1a>
 8001e64:	2302      	movs	r3, #2
 8001e66:	e012      	b.n	8001e8e <HAL_PCD_SetAddress+0x40>
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	2201      	movs	r2, #1
 8001e6c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	78fa      	ldrb	r2, [r7, #3]
 8001e74:	735a      	strb	r2, [r3, #13]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	78fa      	ldrb	r2, [r7, #3]
 8001e7c:	4611      	mov	r1, r2
 8001e7e:	4618      	mov	r0, r3
 8001e80:	f004 feb0 	bl	8006be4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	2200      	movs	r2, #0
 8001e88:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8001e8c:	2300      	movs	r3, #0
}
 8001e8e:	4618      	mov	r0, r3
 8001e90:	3708      	adds	r7, #8
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}

08001e96 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001e96:	b580      	push	{r7, lr}
 8001e98:	b084      	sub	sp, #16
 8001e9a:	af00      	add	r7, sp, #0
 8001e9c:	6078      	str	r0, [r7, #4]
 8001e9e:	4608      	mov	r0, r1
 8001ea0:	4611      	mov	r1, r2
 8001ea2:	461a      	mov	r2, r3
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	70fb      	strb	r3, [r7, #3]
 8001ea8:	460b      	mov	r3, r1
 8001eaa:	803b      	strh	r3, [r7, #0]
 8001eac:	4613      	mov	r3, r2
 8001eae:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001eb4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	da0e      	bge.n	8001eda <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001ebc:	78fb      	ldrb	r3, [r7, #3]
 8001ebe:	f003 0207 	and.w	r2, r3, #7
 8001ec2:	4613      	mov	r3, r2
 8001ec4:	009b      	lsls	r3, r3, #2
 8001ec6:	4413      	add	r3, r2
 8001ec8:	00db      	lsls	r3, r3, #3
 8001eca:	3310      	adds	r3, #16
 8001ecc:	687a      	ldr	r2, [r7, #4]
 8001ece:	4413      	add	r3, r2
 8001ed0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	2201      	movs	r2, #1
 8001ed6:	705a      	strb	r2, [r3, #1]
 8001ed8:	e00e      	b.n	8001ef8 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001eda:	78fb      	ldrb	r3, [r7, #3]
 8001edc:	f003 0207 	and.w	r2, r3, #7
 8001ee0:	4613      	mov	r3, r2
 8001ee2:	009b      	lsls	r3, r3, #2
 8001ee4:	4413      	add	r3, r2
 8001ee6:	00db      	lsls	r3, r3, #3
 8001ee8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001eec:	687a      	ldr	r2, [r7, #4]
 8001eee:	4413      	add	r3, r2
 8001ef0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001ef8:	78fb      	ldrb	r3, [r7, #3]
 8001efa:	f003 0307 	and.w	r3, r3, #7
 8001efe:	b2da      	uxtb	r2, r3
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001f04:	883a      	ldrh	r2, [r7, #0]
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	78ba      	ldrb	r2, [r7, #2]
 8001f0e:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001f10:	78bb      	ldrb	r3, [r7, #2]
 8001f12:	2b02      	cmp	r3, #2
 8001f14:	d102      	bne.n	8001f1c <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	2200      	movs	r2, #0
 8001f1a:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8001f22:	2b01      	cmp	r3, #1
 8001f24:	d101      	bne.n	8001f2a <HAL_PCD_EP_Open+0x94>
 8001f26:	2302      	movs	r3, #2
 8001f28:	e00e      	b.n	8001f48 <HAL_PCD_EP_Open+0xb2>
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	2201      	movs	r2, #1
 8001f2e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	68f9      	ldr	r1, [r7, #12]
 8001f38:	4618      	mov	r0, r3
 8001f3a:	f002 fbf9 	bl	8004730 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	2200      	movs	r2, #0
 8001f42:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 8001f46:	7afb      	ldrb	r3, [r7, #11]
}
 8001f48:	4618      	mov	r0, r3
 8001f4a:	3710      	adds	r7, #16
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	bd80      	pop	{r7, pc}

08001f50 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b084      	sub	sp, #16
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
 8001f58:	460b      	mov	r3, r1
 8001f5a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001f5c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	da0e      	bge.n	8001f82 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f64:	78fb      	ldrb	r3, [r7, #3]
 8001f66:	f003 0207 	and.w	r2, r3, #7
 8001f6a:	4613      	mov	r3, r2
 8001f6c:	009b      	lsls	r3, r3, #2
 8001f6e:	4413      	add	r3, r2
 8001f70:	00db      	lsls	r3, r3, #3
 8001f72:	3310      	adds	r3, #16
 8001f74:	687a      	ldr	r2, [r7, #4]
 8001f76:	4413      	add	r3, r2
 8001f78:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	2201      	movs	r2, #1
 8001f7e:	705a      	strb	r2, [r3, #1]
 8001f80:	e00e      	b.n	8001fa0 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001f82:	78fb      	ldrb	r3, [r7, #3]
 8001f84:	f003 0207 	and.w	r2, r3, #7
 8001f88:	4613      	mov	r3, r2
 8001f8a:	009b      	lsls	r3, r3, #2
 8001f8c:	4413      	add	r3, r2
 8001f8e:	00db      	lsls	r3, r3, #3
 8001f90:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001f94:	687a      	ldr	r2, [r7, #4]
 8001f96:	4413      	add	r3, r2
 8001f98:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8001fa0:	78fb      	ldrb	r3, [r7, #3]
 8001fa2:	f003 0307 	and.w	r3, r3, #7
 8001fa6:	b2da      	uxtb	r2, r3
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8001fb2:	2b01      	cmp	r3, #1
 8001fb4:	d101      	bne.n	8001fba <HAL_PCD_EP_Close+0x6a>
 8001fb6:	2302      	movs	r3, #2
 8001fb8:	e00e      	b.n	8001fd8 <HAL_PCD_EP_Close+0x88>
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	2201      	movs	r2, #1
 8001fbe:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	68f9      	ldr	r1, [r7, #12]
 8001fc8:	4618      	mov	r0, r3
 8001fca:	f002 ff71 	bl	8004eb0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 8001fd6:	2300      	movs	r3, #0
}
 8001fd8:	4618      	mov	r0, r3
 8001fda:	3710      	adds	r7, #16
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	bd80      	pop	{r7, pc}

08001fe0 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b086      	sub	sp, #24
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	60f8      	str	r0, [r7, #12]
 8001fe8:	607a      	str	r2, [r7, #4]
 8001fea:	603b      	str	r3, [r7, #0]
 8001fec:	460b      	mov	r3, r1
 8001fee:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001ff0:	7afb      	ldrb	r3, [r7, #11]
 8001ff2:	f003 0207 	and.w	r2, r3, #7
 8001ff6:	4613      	mov	r3, r2
 8001ff8:	009b      	lsls	r3, r3, #2
 8001ffa:	4413      	add	r3, r2
 8001ffc:	00db      	lsls	r3, r3, #3
 8001ffe:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002002:	68fa      	ldr	r2, [r7, #12]
 8002004:	4413      	add	r3, r2
 8002006:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002008:	697b      	ldr	r3, [r7, #20]
 800200a:	687a      	ldr	r2, [r7, #4]
 800200c:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800200e:	697b      	ldr	r3, [r7, #20]
 8002010:	683a      	ldr	r2, [r7, #0]
 8002012:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002014:	697b      	ldr	r3, [r7, #20]
 8002016:	2200      	movs	r2, #0
 8002018:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800201a:	697b      	ldr	r3, [r7, #20]
 800201c:	2200      	movs	r2, #0
 800201e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002020:	7afb      	ldrb	r3, [r7, #11]
 8002022:	f003 0307 	and.w	r3, r3, #7
 8002026:	b2da      	uxtb	r2, r3
 8002028:	697b      	ldr	r3, [r7, #20]
 800202a:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	6979      	ldr	r1, [r7, #20]
 8002032:	4618      	mov	r0, r3
 8002034:	f003 f928 	bl	8005288 <USB_EPStartXfer>

  return HAL_OK;
 8002038:	2300      	movs	r3, #0
}
 800203a:	4618      	mov	r0, r3
 800203c:	3718      	adds	r7, #24
 800203e:	46bd      	mov	sp, r7
 8002040:	bd80      	pop	{r7, pc}

08002042 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8002042:	b480      	push	{r7}
 8002044:	b083      	sub	sp, #12
 8002046:	af00      	add	r7, sp, #0
 8002048:	6078      	str	r0, [r7, #4]
 800204a:	460b      	mov	r3, r1
 800204c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800204e:	78fb      	ldrb	r3, [r7, #3]
 8002050:	f003 0207 	and.w	r2, r3, #7
 8002054:	6879      	ldr	r1, [r7, #4]
 8002056:	4613      	mov	r3, r2
 8002058:	009b      	lsls	r3, r3, #2
 800205a:	4413      	add	r3, r2
 800205c:	00db      	lsls	r3, r3, #3
 800205e:	440b      	add	r3, r1
 8002060:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 8002064:	681b      	ldr	r3, [r3, #0]
}
 8002066:	4618      	mov	r0, r3
 8002068:	370c      	adds	r7, #12
 800206a:	46bd      	mov	sp, r7
 800206c:	bc80      	pop	{r7}
 800206e:	4770      	bx	lr

08002070 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b086      	sub	sp, #24
 8002074:	af00      	add	r7, sp, #0
 8002076:	60f8      	str	r0, [r7, #12]
 8002078:	607a      	str	r2, [r7, #4]
 800207a:	603b      	str	r3, [r7, #0]
 800207c:	460b      	mov	r3, r1
 800207e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002080:	7afb      	ldrb	r3, [r7, #11]
 8002082:	f003 0207 	and.w	r2, r3, #7
 8002086:	4613      	mov	r3, r2
 8002088:	009b      	lsls	r3, r3, #2
 800208a:	4413      	add	r3, r2
 800208c:	00db      	lsls	r3, r3, #3
 800208e:	3310      	adds	r3, #16
 8002090:	68fa      	ldr	r2, [r7, #12]
 8002092:	4413      	add	r3, r2
 8002094:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002096:	697b      	ldr	r3, [r7, #20]
 8002098:	687a      	ldr	r2, [r7, #4]
 800209a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800209c:	697b      	ldr	r3, [r7, #20]
 800209e:	683a      	ldr	r2, [r7, #0]
 80020a0:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 80020a2:	697b      	ldr	r3, [r7, #20]
 80020a4:	2201      	movs	r2, #1
 80020a6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 80020aa:	697b      	ldr	r3, [r7, #20]
 80020ac:	683a      	ldr	r2, [r7, #0]
 80020ae:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 80020b0:	697b      	ldr	r3, [r7, #20]
 80020b2:	2200      	movs	r2, #0
 80020b4:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80020b6:	697b      	ldr	r3, [r7, #20]
 80020b8:	2201      	movs	r2, #1
 80020ba:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80020bc:	7afb      	ldrb	r3, [r7, #11]
 80020be:	f003 0307 	and.w	r3, r3, #7
 80020c2:	b2da      	uxtb	r2, r3
 80020c4:	697b      	ldr	r3, [r7, #20]
 80020c6:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	6979      	ldr	r1, [r7, #20]
 80020ce:	4618      	mov	r0, r3
 80020d0:	f003 f8da 	bl	8005288 <USB_EPStartXfer>

  return HAL_OK;
 80020d4:	2300      	movs	r3, #0
}
 80020d6:	4618      	mov	r0, r3
 80020d8:	3718      	adds	r7, #24
 80020da:	46bd      	mov	sp, r7
 80020dc:	bd80      	pop	{r7, pc}

080020de <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80020de:	b580      	push	{r7, lr}
 80020e0:	b084      	sub	sp, #16
 80020e2:	af00      	add	r7, sp, #0
 80020e4:	6078      	str	r0, [r7, #4]
 80020e6:	460b      	mov	r3, r1
 80020e8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80020ea:	78fb      	ldrb	r3, [r7, #3]
 80020ec:	f003 0307 	and.w	r3, r3, #7
 80020f0:	687a      	ldr	r2, [r7, #4]
 80020f2:	7912      	ldrb	r2, [r2, #4]
 80020f4:	4293      	cmp	r3, r2
 80020f6:	d901      	bls.n	80020fc <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80020f8:	2301      	movs	r3, #1
 80020fa:	e04c      	b.n	8002196 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80020fc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002100:	2b00      	cmp	r3, #0
 8002102:	da0e      	bge.n	8002122 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002104:	78fb      	ldrb	r3, [r7, #3]
 8002106:	f003 0207 	and.w	r2, r3, #7
 800210a:	4613      	mov	r3, r2
 800210c:	009b      	lsls	r3, r3, #2
 800210e:	4413      	add	r3, r2
 8002110:	00db      	lsls	r3, r3, #3
 8002112:	3310      	adds	r3, #16
 8002114:	687a      	ldr	r2, [r7, #4]
 8002116:	4413      	add	r3, r2
 8002118:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	2201      	movs	r2, #1
 800211e:	705a      	strb	r2, [r3, #1]
 8002120:	e00c      	b.n	800213c <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002122:	78fa      	ldrb	r2, [r7, #3]
 8002124:	4613      	mov	r3, r2
 8002126:	009b      	lsls	r3, r3, #2
 8002128:	4413      	add	r3, r2
 800212a:	00db      	lsls	r3, r3, #3
 800212c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002130:	687a      	ldr	r2, [r7, #4]
 8002132:	4413      	add	r3, r2
 8002134:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	2200      	movs	r2, #0
 800213a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	2201      	movs	r2, #1
 8002140:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002142:	78fb      	ldrb	r3, [r7, #3]
 8002144:	f003 0307 	and.w	r3, r3, #7
 8002148:	b2da      	uxtb	r2, r3
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002154:	2b01      	cmp	r3, #1
 8002156:	d101      	bne.n	800215c <HAL_PCD_EP_SetStall+0x7e>
 8002158:	2302      	movs	r3, #2
 800215a:	e01c      	b.n	8002196 <HAL_PCD_EP_SetStall+0xb8>
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	2201      	movs	r2, #1
 8002160:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	68f9      	ldr	r1, [r7, #12]
 800216a:	4618      	mov	r0, r3
 800216c:	f004 fc3d 	bl	80069ea <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002170:	78fb      	ldrb	r3, [r7, #3]
 8002172:	f003 0307 	and.w	r3, r3, #7
 8002176:	2b00      	cmp	r3, #0
 8002178:	d108      	bne.n	800218c <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681a      	ldr	r2, [r3, #0]
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 8002184:	4619      	mov	r1, r3
 8002186:	4610      	mov	r0, r2
 8002188:	f004 fd62 	bl	8006c50 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2200      	movs	r2, #0
 8002190:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8002194:	2300      	movs	r3, #0
}
 8002196:	4618      	mov	r0, r3
 8002198:	3710      	adds	r7, #16
 800219a:	46bd      	mov	sp, r7
 800219c:	bd80      	pop	{r7, pc}

0800219e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800219e:	b580      	push	{r7, lr}
 80021a0:	b084      	sub	sp, #16
 80021a2:	af00      	add	r7, sp, #0
 80021a4:	6078      	str	r0, [r7, #4]
 80021a6:	460b      	mov	r3, r1
 80021a8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80021aa:	78fb      	ldrb	r3, [r7, #3]
 80021ac:	f003 030f 	and.w	r3, r3, #15
 80021b0:	687a      	ldr	r2, [r7, #4]
 80021b2:	7912      	ldrb	r2, [r2, #4]
 80021b4:	4293      	cmp	r3, r2
 80021b6:	d901      	bls.n	80021bc <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80021b8:	2301      	movs	r3, #1
 80021ba:	e040      	b.n	800223e <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80021bc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	da0e      	bge.n	80021e2 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80021c4:	78fb      	ldrb	r3, [r7, #3]
 80021c6:	f003 0207 	and.w	r2, r3, #7
 80021ca:	4613      	mov	r3, r2
 80021cc:	009b      	lsls	r3, r3, #2
 80021ce:	4413      	add	r3, r2
 80021d0:	00db      	lsls	r3, r3, #3
 80021d2:	3310      	adds	r3, #16
 80021d4:	687a      	ldr	r2, [r7, #4]
 80021d6:	4413      	add	r3, r2
 80021d8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	2201      	movs	r2, #1
 80021de:	705a      	strb	r2, [r3, #1]
 80021e0:	e00e      	b.n	8002200 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80021e2:	78fb      	ldrb	r3, [r7, #3]
 80021e4:	f003 0207 	and.w	r2, r3, #7
 80021e8:	4613      	mov	r3, r2
 80021ea:	009b      	lsls	r3, r3, #2
 80021ec:	4413      	add	r3, r2
 80021ee:	00db      	lsls	r3, r3, #3
 80021f0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80021f4:	687a      	ldr	r2, [r7, #4]
 80021f6:	4413      	add	r3, r2
 80021f8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	2200      	movs	r2, #0
 80021fe:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	2200      	movs	r2, #0
 8002204:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002206:	78fb      	ldrb	r3, [r7, #3]
 8002208:	f003 0307 	and.w	r3, r3, #7
 800220c:	b2da      	uxtb	r2, r3
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002218:	2b01      	cmp	r3, #1
 800221a:	d101      	bne.n	8002220 <HAL_PCD_EP_ClrStall+0x82>
 800221c:	2302      	movs	r3, #2
 800221e:	e00e      	b.n	800223e <HAL_PCD_EP_ClrStall+0xa0>
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2201      	movs	r2, #1
 8002224:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	68f9      	ldr	r1, [r7, #12]
 800222e:	4618      	mov	r0, r3
 8002230:	f004 fc2b 	bl	8006a8a <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2200      	movs	r2, #0
 8002238:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800223c:	2300      	movs	r3, #0
}
 800223e:	4618      	mov	r0, r3
 8002240:	3710      	adds	r7, #16
 8002242:	46bd      	mov	sp, r7
 8002244:	bd80      	pop	{r7, pc}

08002246 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8002246:	b580      	push	{r7, lr}
 8002248:	b096      	sub	sp, #88	@ 0x58
 800224a:	af00      	add	r7, sp, #0
 800224c:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800224e:	e3bb      	b.n	80029c8 <PCD_EP_ISR_Handler+0x782>
  {
    wIstr = hpcd->Instance->ISTR;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002258:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800225c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8002260:	b2db      	uxtb	r3, r3
 8002262:	f003 030f 	and.w	r3, r3, #15
 8002266:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

    if (epindex == 0U)
 800226a:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800226e:	2b00      	cmp	r3, #0
 8002270:	f040 8175 	bne.w	800255e <PCD_EP_ISR_Handler+0x318>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8002274:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8002278:	f003 0310 	and.w	r3, r3, #16
 800227c:	2b00      	cmp	r3, #0
 800227e:	d14e      	bne.n	800231e <PCD_EP_ISR_Handler+0xd8>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	881b      	ldrh	r3, [r3, #0]
 8002286:	b29b      	uxth	r3, r3
 8002288:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 800228c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002290:	81fb      	strh	r3, [r7, #14]
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681a      	ldr	r2, [r3, #0]
 8002296:	89fb      	ldrh	r3, [r7, #14]
 8002298:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800229c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80022a0:	b29b      	uxth	r3, r3
 80022a2:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	3310      	adds	r3, #16
 80022a8:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80022b2:	b29b      	uxth	r3, r3
 80022b4:	461a      	mov	r2, r3
 80022b6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80022b8:	781b      	ldrb	r3, [r3, #0]
 80022ba:	00db      	lsls	r3, r3, #3
 80022bc:	4413      	add	r3, r2
 80022be:	3302      	adds	r3, #2
 80022c0:	005b      	lsls	r3, r3, #1
 80022c2:	687a      	ldr	r2, [r7, #4]
 80022c4:	6812      	ldr	r2, [r2, #0]
 80022c6:	4413      	add	r3, r2
 80022c8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80022cc:	881b      	ldrh	r3, [r3, #0]
 80022ce:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80022d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80022d4:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80022d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80022d8:	695a      	ldr	r2, [r3, #20]
 80022da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80022dc:	69db      	ldr	r3, [r3, #28]
 80022de:	441a      	add	r2, r3
 80022e0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80022e2:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80022e4:	2100      	movs	r1, #0
 80022e6:	6878      	ldr	r0, [r7, #4]
 80022e8:	f006 fb03 	bl	80088f2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	7b5b      	ldrb	r3, [r3, #13]
 80022f0:	b2db      	uxtb	r3, r3
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	f000 8368 	beq.w	80029c8 <PCD_EP_ISR_Handler+0x782>
 80022f8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80022fa:	699b      	ldr	r3, [r3, #24]
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	f040 8363 	bne.w	80029c8 <PCD_EP_ISR_Handler+0x782>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	7b5b      	ldrb	r3, [r3, #13]
 8002306:	b2db      	uxtb	r3, r3
 8002308:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800230c:	b2da      	uxtb	r2, r3
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	2200      	movs	r2, #0
 800231a:	735a      	strb	r2, [r3, #13]
 800231c:	e354      	b.n	80029c8 <PCD_EP_ISR_Handler+0x782>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002324:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	881b      	ldrh	r3, [r3, #0]
 800232c:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8002330:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002334:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002338:	2b00      	cmp	r3, #0
 800233a:	d034      	beq.n	80023a6 <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002344:	b29b      	uxth	r3, r3
 8002346:	461a      	mov	r2, r3
 8002348:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800234a:	781b      	ldrb	r3, [r3, #0]
 800234c:	00db      	lsls	r3, r3, #3
 800234e:	4413      	add	r3, r2
 8002350:	3306      	adds	r3, #6
 8002352:	005b      	lsls	r3, r3, #1
 8002354:	687a      	ldr	r2, [r7, #4]
 8002356:	6812      	ldr	r2, [r2, #0]
 8002358:	4413      	add	r3, r2
 800235a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800235e:	881b      	ldrh	r3, [r3, #0]
 8002360:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002364:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002366:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6818      	ldr	r0, [r3, #0]
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 8002372:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002374:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8002376:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002378:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800237a:	b29b      	uxth	r3, r3
 800237c:	f004 fcb9 	bl	8006cf2 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	881b      	ldrh	r3, [r3, #0]
 8002386:	b29a      	uxth	r2, r3
 8002388:	f640 738f 	movw	r3, #3983	@ 0xf8f
 800238c:	4013      	ands	r3, r2
 800238e:	823b      	strh	r3, [r7, #16]
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	8a3a      	ldrh	r2, [r7, #16]
 8002396:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800239a:	b292      	uxth	r2, r2
 800239c:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800239e:	6878      	ldr	r0, [r7, #4]
 80023a0:	f006 fa7a 	bl	8008898 <HAL_PCD_SetupStageCallback>
 80023a4:	e310      	b.n	80029c8 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80023a6:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	f280 830c 	bge.w	80029c8 <PCD_EP_ISR_Handler+0x782>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	881b      	ldrh	r3, [r3, #0]
 80023b6:	b29a      	uxth	r2, r3
 80023b8:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80023bc:	4013      	ands	r3, r2
 80023be:	83fb      	strh	r3, [r7, #30]
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	8bfa      	ldrh	r2, [r7, #30]
 80023c6:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80023ca:	b292      	uxth	r2, r2
 80023cc:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80023d6:	b29b      	uxth	r3, r3
 80023d8:	461a      	mov	r2, r3
 80023da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80023dc:	781b      	ldrb	r3, [r3, #0]
 80023de:	00db      	lsls	r3, r3, #3
 80023e0:	4413      	add	r3, r2
 80023e2:	3306      	adds	r3, #6
 80023e4:	005b      	lsls	r3, r3, #1
 80023e6:	687a      	ldr	r2, [r7, #4]
 80023e8:	6812      	ldr	r2, [r2, #0]
 80023ea:	4413      	add	r3, r2
 80023ec:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80023f0:	881b      	ldrh	r3, [r3, #0]
 80023f2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80023f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80023f8:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80023fa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80023fc:	69db      	ldr	r3, [r3, #28]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d019      	beq.n	8002436 <PCD_EP_ISR_Handler+0x1f0>
 8002402:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002404:	695b      	ldr	r3, [r3, #20]
 8002406:	2b00      	cmp	r3, #0
 8002408:	d015      	beq.n	8002436 <PCD_EP_ISR_Handler+0x1f0>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6818      	ldr	r0, [r3, #0]
 800240e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002410:	6959      	ldr	r1, [r3, #20]
 8002412:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002414:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8002416:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002418:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800241a:	b29b      	uxth	r3, r3
 800241c:	f004 fc69 	bl	8006cf2 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8002420:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002422:	695a      	ldr	r2, [r3, #20]
 8002424:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002426:	69db      	ldr	r3, [r3, #28]
 8002428:	441a      	add	r2, r3
 800242a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800242c:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800242e:	2100      	movs	r1, #0
 8002430:	6878      	ldr	r0, [r7, #4]
 8002432:	f006 fa43 	bl	80088bc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	881b      	ldrh	r3, [r3, #0]
 800243c:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8002440:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002444:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002448:	2b00      	cmp	r3, #0
 800244a:	f040 82bd 	bne.w	80029c8 <PCD_EP_ISR_Handler+0x782>
 800244e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002452:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8002456:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800245a:	f000 82b5 	beq.w	80029c8 <PCD_EP_ISR_Handler+0x782>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	61bb      	str	r3, [r7, #24]
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800246c:	b29b      	uxth	r3, r3
 800246e:	461a      	mov	r2, r3
 8002470:	69bb      	ldr	r3, [r7, #24]
 8002472:	4413      	add	r3, r2
 8002474:	61bb      	str	r3, [r7, #24]
 8002476:	69bb      	ldr	r3, [r7, #24]
 8002478:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800247c:	617b      	str	r3, [r7, #20]
 800247e:	697b      	ldr	r3, [r7, #20]
 8002480:	881b      	ldrh	r3, [r3, #0]
 8002482:	b29b      	uxth	r3, r3
 8002484:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002488:	b29a      	uxth	r2, r3
 800248a:	697b      	ldr	r3, [r7, #20]
 800248c:	801a      	strh	r2, [r3, #0]
 800248e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002490:	691b      	ldr	r3, [r3, #16]
 8002492:	2b3e      	cmp	r3, #62	@ 0x3e
 8002494:	d91d      	bls.n	80024d2 <PCD_EP_ISR_Handler+0x28c>
 8002496:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002498:	691b      	ldr	r3, [r3, #16]
 800249a:	095b      	lsrs	r3, r3, #5
 800249c:	647b      	str	r3, [r7, #68]	@ 0x44
 800249e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80024a0:	691b      	ldr	r3, [r3, #16]
 80024a2:	f003 031f 	and.w	r3, r3, #31
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d102      	bne.n	80024b0 <PCD_EP_ISR_Handler+0x26a>
 80024aa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80024ac:	3b01      	subs	r3, #1
 80024ae:	647b      	str	r3, [r7, #68]	@ 0x44
 80024b0:	697b      	ldr	r3, [r7, #20]
 80024b2:	881b      	ldrh	r3, [r3, #0]
 80024b4:	b29a      	uxth	r2, r3
 80024b6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80024b8:	b29b      	uxth	r3, r3
 80024ba:	029b      	lsls	r3, r3, #10
 80024bc:	b29b      	uxth	r3, r3
 80024be:	4313      	orrs	r3, r2
 80024c0:	b29b      	uxth	r3, r3
 80024c2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80024c6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80024ca:	b29a      	uxth	r2, r3
 80024cc:	697b      	ldr	r3, [r7, #20]
 80024ce:	801a      	strh	r2, [r3, #0]
 80024d0:	e026      	b.n	8002520 <PCD_EP_ISR_Handler+0x2da>
 80024d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80024d4:	691b      	ldr	r3, [r3, #16]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d10a      	bne.n	80024f0 <PCD_EP_ISR_Handler+0x2aa>
 80024da:	697b      	ldr	r3, [r7, #20]
 80024dc:	881b      	ldrh	r3, [r3, #0]
 80024de:	b29b      	uxth	r3, r3
 80024e0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80024e4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80024e8:	b29a      	uxth	r2, r3
 80024ea:	697b      	ldr	r3, [r7, #20]
 80024ec:	801a      	strh	r2, [r3, #0]
 80024ee:	e017      	b.n	8002520 <PCD_EP_ISR_Handler+0x2da>
 80024f0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80024f2:	691b      	ldr	r3, [r3, #16]
 80024f4:	085b      	lsrs	r3, r3, #1
 80024f6:	647b      	str	r3, [r7, #68]	@ 0x44
 80024f8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80024fa:	691b      	ldr	r3, [r3, #16]
 80024fc:	f003 0301 	and.w	r3, r3, #1
 8002500:	2b00      	cmp	r3, #0
 8002502:	d002      	beq.n	800250a <PCD_EP_ISR_Handler+0x2c4>
 8002504:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002506:	3301      	adds	r3, #1
 8002508:	647b      	str	r3, [r7, #68]	@ 0x44
 800250a:	697b      	ldr	r3, [r7, #20]
 800250c:	881b      	ldrh	r3, [r3, #0]
 800250e:	b29a      	uxth	r2, r3
 8002510:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002512:	b29b      	uxth	r3, r3
 8002514:	029b      	lsls	r3, r3, #10
 8002516:	b29b      	uxth	r3, r3
 8002518:	4313      	orrs	r3, r2
 800251a:	b29a      	uxth	r2, r3
 800251c:	697b      	ldr	r3, [r7, #20]
 800251e:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	881b      	ldrh	r3, [r3, #0]
 8002526:	b29b      	uxth	r3, r3
 8002528:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800252c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002530:	827b      	strh	r3, [r7, #18]
 8002532:	8a7b      	ldrh	r3, [r7, #18]
 8002534:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8002538:	827b      	strh	r3, [r7, #18]
 800253a:	8a7b      	ldrh	r3, [r7, #18]
 800253c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8002540:	827b      	strh	r3, [r7, #18]
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681a      	ldr	r2, [r3, #0]
 8002546:	8a7b      	ldrh	r3, [r7, #18]
 8002548:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800254c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002550:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002554:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002558:	b29b      	uxth	r3, r3
 800255a:	8013      	strh	r3, [r2, #0]
 800255c:	e234      	b.n	80029c8 <PCD_EP_ISR_Handler+0x782>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	461a      	mov	r2, r3
 8002564:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002568:	009b      	lsls	r3, r3, #2
 800256a:	4413      	add	r3, r2
 800256c:	881b      	ldrh	r3, [r3, #0]
 800256e:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002572:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8002576:	2b00      	cmp	r3, #0
 8002578:	f280 80fc 	bge.w	8002774 <PCD_EP_ISR_Handler+0x52e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	461a      	mov	r2, r3
 8002582:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002586:	009b      	lsls	r3, r3, #2
 8002588:	4413      	add	r3, r2
 800258a:	881b      	ldrh	r3, [r3, #0]
 800258c:	b29a      	uxth	r2, r3
 800258e:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8002592:	4013      	ands	r3, r2
 8002594:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	461a      	mov	r2, r3
 800259e:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80025a2:	009b      	lsls	r3, r3, #2
 80025a4:	4413      	add	r3, r2
 80025a6:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 80025aa:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80025ae:	b292      	uxth	r2, r2
 80025b0:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80025b2:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 80025b6:	4613      	mov	r3, r2
 80025b8:	009b      	lsls	r3, r3, #2
 80025ba:	4413      	add	r3, r2
 80025bc:	00db      	lsls	r3, r3, #3
 80025be:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80025c2:	687a      	ldr	r2, [r7, #4]
 80025c4:	4413      	add	r3, r2
 80025c6:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80025c8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80025ca:	7b1b      	ldrb	r3, [r3, #12]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d125      	bne.n	800261c <PCD_EP_ISR_Handler+0x3d6>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80025d8:	b29b      	uxth	r3, r3
 80025da:	461a      	mov	r2, r3
 80025dc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80025de:	781b      	ldrb	r3, [r3, #0]
 80025e0:	00db      	lsls	r3, r3, #3
 80025e2:	4413      	add	r3, r2
 80025e4:	3306      	adds	r3, #6
 80025e6:	005b      	lsls	r3, r3, #1
 80025e8:	687a      	ldr	r2, [r7, #4]
 80025ea:	6812      	ldr	r2, [r2, #0]
 80025ec:	4413      	add	r3, r2
 80025ee:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80025f2:	881b      	ldrh	r3, [r3, #0]
 80025f4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80025f8:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 80025fc:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002600:	2b00      	cmp	r3, #0
 8002602:	f000 8092 	beq.w	800272a <PCD_EP_ISR_Handler+0x4e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6818      	ldr	r0, [r3, #0]
 800260a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800260c:	6959      	ldr	r1, [r3, #20]
 800260e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002610:	88da      	ldrh	r2, [r3, #6]
 8002612:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002616:	f004 fb6c 	bl	8006cf2 <USB_ReadPMA>
 800261a:	e086      	b.n	800272a <PCD_EP_ISR_Handler+0x4e4>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800261c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800261e:	78db      	ldrb	r3, [r3, #3]
 8002620:	2b02      	cmp	r3, #2
 8002622:	d10a      	bne.n	800263a <PCD_EP_ISR_Handler+0x3f4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8002624:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002628:	461a      	mov	r2, r3
 800262a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800262c:	6878      	ldr	r0, [r7, #4]
 800262e:	f000 f9d9 	bl	80029e4 <HAL_PCD_EP_DB_Receive>
 8002632:	4603      	mov	r3, r0
 8002634:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 8002638:	e077      	b.n	800272a <PCD_EP_ISR_Handler+0x4e4>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	461a      	mov	r2, r3
 8002640:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002642:	781b      	ldrb	r3, [r3, #0]
 8002644:	009b      	lsls	r3, r3, #2
 8002646:	4413      	add	r3, r2
 8002648:	881b      	ldrh	r3, [r3, #0]
 800264a:	b29b      	uxth	r3, r3
 800264c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002650:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002654:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	461a      	mov	r2, r3
 800265e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002660:	781b      	ldrb	r3, [r3, #0]
 8002662:	009b      	lsls	r3, r3, #2
 8002664:	441a      	add	r2, r3
 8002666:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 800266a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800266e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002672:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002676:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800267a:	b29b      	uxth	r3, r3
 800267c:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	461a      	mov	r2, r3
 8002684:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002686:	781b      	ldrb	r3, [r3, #0]
 8002688:	009b      	lsls	r3, r3, #2
 800268a:	4413      	add	r3, r2
 800268c:	881b      	ldrh	r3, [r3, #0]
 800268e:	b29b      	uxth	r3, r3
 8002690:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002694:	2b00      	cmp	r3, #0
 8002696:	d024      	beq.n	80026e2 <PCD_EP_ISR_Handler+0x49c>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80026a0:	b29b      	uxth	r3, r3
 80026a2:	461a      	mov	r2, r3
 80026a4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80026a6:	781b      	ldrb	r3, [r3, #0]
 80026a8:	00db      	lsls	r3, r3, #3
 80026aa:	4413      	add	r3, r2
 80026ac:	3302      	adds	r3, #2
 80026ae:	005b      	lsls	r3, r3, #1
 80026b0:	687a      	ldr	r2, [r7, #4]
 80026b2:	6812      	ldr	r2, [r2, #0]
 80026b4:	4413      	add	r3, r2
 80026b6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80026ba:	881b      	ldrh	r3, [r3, #0]
 80026bc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80026c0:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 80026c4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d02e      	beq.n	800272a <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6818      	ldr	r0, [r3, #0]
 80026d0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80026d2:	6959      	ldr	r1, [r3, #20]
 80026d4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80026d6:	891a      	ldrh	r2, [r3, #8]
 80026d8:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80026dc:	f004 fb09 	bl	8006cf2 <USB_ReadPMA>
 80026e0:	e023      	b.n	800272a <PCD_EP_ISR_Handler+0x4e4>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80026ea:	b29b      	uxth	r3, r3
 80026ec:	461a      	mov	r2, r3
 80026ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80026f0:	781b      	ldrb	r3, [r3, #0]
 80026f2:	00db      	lsls	r3, r3, #3
 80026f4:	4413      	add	r3, r2
 80026f6:	3306      	adds	r3, #6
 80026f8:	005b      	lsls	r3, r3, #1
 80026fa:	687a      	ldr	r2, [r7, #4]
 80026fc:	6812      	ldr	r2, [r2, #0]
 80026fe:	4413      	add	r3, r2
 8002700:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002704:	881b      	ldrh	r3, [r3, #0]
 8002706:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800270a:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 800270e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002712:	2b00      	cmp	r3, #0
 8002714:	d009      	beq.n	800272a <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6818      	ldr	r0, [r3, #0]
 800271a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800271c:	6959      	ldr	r1, [r3, #20]
 800271e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002720:	895a      	ldrh	r2, [r3, #10]
 8002722:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002726:	f004 fae4 	bl	8006cf2 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800272a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800272c:	69da      	ldr	r2, [r3, #28]
 800272e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002732:	441a      	add	r2, r3
 8002734:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002736:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8002738:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800273a:	695a      	ldr	r2, [r3, #20]
 800273c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002740:	441a      	add	r2, r3
 8002742:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002744:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002746:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002748:	699b      	ldr	r3, [r3, #24]
 800274a:	2b00      	cmp	r3, #0
 800274c:	d005      	beq.n	800275a <PCD_EP_ISR_Handler+0x514>
 800274e:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 8002752:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002754:	691b      	ldr	r3, [r3, #16]
 8002756:	429a      	cmp	r2, r3
 8002758:	d206      	bcs.n	8002768 <PCD_EP_ISR_Handler+0x522>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800275a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800275c:	781b      	ldrb	r3, [r3, #0]
 800275e:	4619      	mov	r1, r3
 8002760:	6878      	ldr	r0, [r7, #4]
 8002762:	f006 f8ab 	bl	80088bc <HAL_PCD_DataOutStageCallback>
 8002766:	e005      	b.n	8002774 <PCD_EP_ISR_Handler+0x52e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800276e:	4618      	mov	r0, r3
 8002770:	f002 fd8a 	bl	8005288 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002774:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002778:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800277c:	2b00      	cmp	r3, #0
 800277e:	f000 8123 	beq.w	80029c8 <PCD_EP_ISR_Handler+0x782>
      {
        ep = &hpcd->IN_ep[epindex];
 8002782:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8002786:	4613      	mov	r3, r2
 8002788:	009b      	lsls	r3, r3, #2
 800278a:	4413      	add	r3, r2
 800278c:	00db      	lsls	r3, r3, #3
 800278e:	3310      	adds	r3, #16
 8002790:	687a      	ldr	r2, [r7, #4]
 8002792:	4413      	add	r3, r2
 8002794:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	461a      	mov	r2, r3
 800279c:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80027a0:	009b      	lsls	r3, r3, #2
 80027a2:	4413      	add	r3, r2
 80027a4:	881b      	ldrh	r3, [r3, #0]
 80027a6:	b29b      	uxth	r3, r3
 80027a8:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 80027ac:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80027b0:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	461a      	mov	r2, r3
 80027ba:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80027be:	009b      	lsls	r3, r3, #2
 80027c0:	441a      	add	r2, r3
 80027c2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80027c6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80027ca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80027ce:	b29b      	uxth	r3, r3
 80027d0:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 80027d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80027d4:	78db      	ldrb	r3, [r3, #3]
 80027d6:	2b01      	cmp	r3, #1
 80027d8:	f040 80a2 	bne.w	8002920 <PCD_EP_ISR_Handler+0x6da>
        {
          ep->xfer_len = 0U;
 80027dc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80027de:	2200      	movs	r2, #0
 80027e0:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 80027e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80027e4:	7b1b      	ldrb	r3, [r3, #12]
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	f000 8093 	beq.w	8002912 <PCD_EP_ISR_Handler+0x6cc>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80027ec:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80027f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d046      	beq.n	8002886 <PCD_EP_ISR_Handler+0x640>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80027f8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80027fa:	785b      	ldrb	r3, [r3, #1]
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d126      	bne.n	800284e <PCD_EP_ISR_Handler+0x608>
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	627b      	str	r3, [r7, #36]	@ 0x24
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800280e:	b29b      	uxth	r3, r3
 8002810:	461a      	mov	r2, r3
 8002812:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002814:	4413      	add	r3, r2
 8002816:	627b      	str	r3, [r7, #36]	@ 0x24
 8002818:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800281a:	781b      	ldrb	r3, [r3, #0]
 800281c:	011a      	lsls	r2, r3, #4
 800281e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002820:	4413      	add	r3, r2
 8002822:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002826:	623b      	str	r3, [r7, #32]
 8002828:	6a3b      	ldr	r3, [r7, #32]
 800282a:	881b      	ldrh	r3, [r3, #0]
 800282c:	b29b      	uxth	r3, r3
 800282e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002832:	b29a      	uxth	r2, r3
 8002834:	6a3b      	ldr	r3, [r7, #32]
 8002836:	801a      	strh	r2, [r3, #0]
 8002838:	6a3b      	ldr	r3, [r7, #32]
 800283a:	881b      	ldrh	r3, [r3, #0]
 800283c:	b29b      	uxth	r3, r3
 800283e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002842:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002846:	b29a      	uxth	r2, r3
 8002848:	6a3b      	ldr	r3, [r7, #32]
 800284a:	801a      	strh	r2, [r3, #0]
 800284c:	e061      	b.n	8002912 <PCD_EP_ISR_Handler+0x6cc>
 800284e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002850:	785b      	ldrb	r3, [r3, #1]
 8002852:	2b01      	cmp	r3, #1
 8002854:	d15d      	bne.n	8002912 <PCD_EP_ISR_Handler+0x6cc>
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002864:	b29b      	uxth	r3, r3
 8002866:	461a      	mov	r2, r3
 8002868:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800286a:	4413      	add	r3, r2
 800286c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800286e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002870:	781b      	ldrb	r3, [r3, #0]
 8002872:	011a      	lsls	r2, r3, #4
 8002874:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002876:	4413      	add	r3, r2
 8002878:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800287c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800287e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002880:	2200      	movs	r2, #0
 8002882:	801a      	strh	r2, [r3, #0]
 8002884:	e045      	b.n	8002912 <PCD_EP_ISR_Handler+0x6cc>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800288c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800288e:	785b      	ldrb	r3, [r3, #1]
 8002890:	2b00      	cmp	r3, #0
 8002892:	d126      	bne.n	80028e2 <PCD_EP_ISR_Handler+0x69c>
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	637b      	str	r3, [r7, #52]	@ 0x34
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80028a2:	b29b      	uxth	r3, r3
 80028a4:	461a      	mov	r2, r3
 80028a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80028a8:	4413      	add	r3, r2
 80028aa:	637b      	str	r3, [r7, #52]	@ 0x34
 80028ac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80028ae:	781b      	ldrb	r3, [r3, #0]
 80028b0:	011a      	lsls	r2, r3, #4
 80028b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80028b4:	4413      	add	r3, r2
 80028b6:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80028ba:	633b      	str	r3, [r7, #48]	@ 0x30
 80028bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028be:	881b      	ldrh	r3, [r3, #0]
 80028c0:	b29b      	uxth	r3, r3
 80028c2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80028c6:	b29a      	uxth	r2, r3
 80028c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028ca:	801a      	strh	r2, [r3, #0]
 80028cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028ce:	881b      	ldrh	r3, [r3, #0]
 80028d0:	b29b      	uxth	r3, r3
 80028d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80028d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80028da:	b29a      	uxth	r2, r3
 80028dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028de:	801a      	strh	r2, [r3, #0]
 80028e0:	e017      	b.n	8002912 <PCD_EP_ISR_Handler+0x6cc>
 80028e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80028e4:	785b      	ldrb	r3, [r3, #1]
 80028e6:	2b01      	cmp	r3, #1
 80028e8:	d113      	bne.n	8002912 <PCD_EP_ISR_Handler+0x6cc>
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80028f2:	b29b      	uxth	r3, r3
 80028f4:	461a      	mov	r2, r3
 80028f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80028f8:	4413      	add	r3, r2
 80028fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80028fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80028fe:	781b      	ldrb	r3, [r3, #0]
 8002900:	011a      	lsls	r2, r3, #4
 8002902:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002904:	4413      	add	r3, r2
 8002906:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800290a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800290c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800290e:	2200      	movs	r2, #0
 8002910:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002912:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002914:	781b      	ldrb	r3, [r3, #0]
 8002916:	4619      	mov	r1, r3
 8002918:	6878      	ldr	r0, [r7, #4]
 800291a:	f005 ffea 	bl	80088f2 <HAL_PCD_DataInStageCallback>
 800291e:	e053      	b.n	80029c8 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8002920:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002924:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002928:	2b00      	cmp	r3, #0
 800292a:	d146      	bne.n	80029ba <PCD_EP_ISR_Handler+0x774>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002934:	b29b      	uxth	r3, r3
 8002936:	461a      	mov	r2, r3
 8002938:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800293a:	781b      	ldrb	r3, [r3, #0]
 800293c:	00db      	lsls	r3, r3, #3
 800293e:	4413      	add	r3, r2
 8002940:	3302      	adds	r3, #2
 8002942:	005b      	lsls	r3, r3, #1
 8002944:	687a      	ldr	r2, [r7, #4]
 8002946:	6812      	ldr	r2, [r2, #0]
 8002948:	4413      	add	r3, r2
 800294a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800294e:	881b      	ldrh	r3, [r3, #0]
 8002950:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002954:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 8002958:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800295a:	699a      	ldr	r2, [r3, #24]
 800295c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8002960:	429a      	cmp	r2, r3
 8002962:	d907      	bls.n	8002974 <PCD_EP_ISR_Handler+0x72e>
            {
              ep->xfer_len -= TxPctSize;
 8002964:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002966:	699a      	ldr	r2, [r3, #24]
 8002968:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800296c:	1ad2      	subs	r2, r2, r3
 800296e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002970:	619a      	str	r2, [r3, #24]
 8002972:	e002      	b.n	800297a <PCD_EP_ISR_Handler+0x734>
            }
            else
            {
              ep->xfer_len = 0U;
 8002974:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002976:	2200      	movs	r2, #0
 8002978:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 800297a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800297c:	699b      	ldr	r3, [r3, #24]
 800297e:	2b00      	cmp	r3, #0
 8002980:	d106      	bne.n	8002990 <PCD_EP_ISR_Handler+0x74a>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002982:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002984:	781b      	ldrb	r3, [r3, #0]
 8002986:	4619      	mov	r1, r3
 8002988:	6878      	ldr	r0, [r7, #4]
 800298a:	f005 ffb2 	bl	80088f2 <HAL_PCD_DataInStageCallback>
 800298e:	e01b      	b.n	80029c8 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8002990:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002992:	695a      	ldr	r2, [r3, #20]
 8002994:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8002998:	441a      	add	r2, r3
 800299a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800299c:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 800299e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80029a0:	69da      	ldr	r2, [r3, #28]
 80029a2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80029a6:	441a      	add	r2, r3
 80029a8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80029aa:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80029b2:	4618      	mov	r0, r3
 80029b4:	f002 fc68 	bl	8005288 <USB_EPStartXfer>
 80029b8:	e006      	b.n	80029c8 <PCD_EP_ISR_Handler+0x782>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80029ba:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80029be:	461a      	mov	r2, r3
 80029c0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80029c2:	6878      	ldr	r0, [r7, #4]
 80029c4:	f000 f91b 	bl	8002bfe <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80029d0:	b29b      	uxth	r3, r3
 80029d2:	b21b      	sxth	r3, r3
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	f6ff ac3b 	blt.w	8002250 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80029da:	2300      	movs	r3, #0
}
 80029dc:	4618      	mov	r0, r3
 80029de:	3758      	adds	r7, #88	@ 0x58
 80029e0:	46bd      	mov	sp, r7
 80029e2:	bd80      	pop	{r7, pc}

080029e4 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b088      	sub	sp, #32
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	60f8      	str	r0, [r7, #12]
 80029ec:	60b9      	str	r1, [r7, #8]
 80029ee:	4613      	mov	r3, r2
 80029f0:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80029f2:	88fb      	ldrh	r3, [r7, #6]
 80029f4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d07e      	beq.n	8002afa <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002a04:	b29b      	uxth	r3, r3
 8002a06:	461a      	mov	r2, r3
 8002a08:	68bb      	ldr	r3, [r7, #8]
 8002a0a:	781b      	ldrb	r3, [r3, #0]
 8002a0c:	00db      	lsls	r3, r3, #3
 8002a0e:	4413      	add	r3, r2
 8002a10:	3302      	adds	r3, #2
 8002a12:	005b      	lsls	r3, r3, #1
 8002a14:	68fa      	ldr	r2, [r7, #12]
 8002a16:	6812      	ldr	r2, [r2, #0]
 8002a18:	4413      	add	r3, r2
 8002a1a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002a1e:	881b      	ldrh	r3, [r3, #0]
 8002a20:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002a24:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002a26:	68bb      	ldr	r3, [r7, #8]
 8002a28:	699a      	ldr	r2, [r3, #24]
 8002a2a:	8b7b      	ldrh	r3, [r7, #26]
 8002a2c:	429a      	cmp	r2, r3
 8002a2e:	d306      	bcc.n	8002a3e <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8002a30:	68bb      	ldr	r3, [r7, #8]
 8002a32:	699a      	ldr	r2, [r3, #24]
 8002a34:	8b7b      	ldrh	r3, [r7, #26]
 8002a36:	1ad2      	subs	r2, r2, r3
 8002a38:	68bb      	ldr	r3, [r7, #8]
 8002a3a:	619a      	str	r2, [r3, #24]
 8002a3c:	e002      	b.n	8002a44 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8002a3e:	68bb      	ldr	r3, [r7, #8]
 8002a40:	2200      	movs	r2, #0
 8002a42:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002a44:	68bb      	ldr	r3, [r7, #8]
 8002a46:	699b      	ldr	r3, [r3, #24]
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d123      	bne.n	8002a94 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	461a      	mov	r2, r3
 8002a52:	68bb      	ldr	r3, [r7, #8]
 8002a54:	781b      	ldrb	r3, [r3, #0]
 8002a56:	009b      	lsls	r3, r3, #2
 8002a58:	4413      	add	r3, r2
 8002a5a:	881b      	ldrh	r3, [r3, #0]
 8002a5c:	b29b      	uxth	r3, r3
 8002a5e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002a62:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002a66:	833b      	strh	r3, [r7, #24]
 8002a68:	8b3b      	ldrh	r3, [r7, #24]
 8002a6a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8002a6e:	833b      	strh	r3, [r7, #24]
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	461a      	mov	r2, r3
 8002a76:	68bb      	ldr	r3, [r7, #8]
 8002a78:	781b      	ldrb	r3, [r3, #0]
 8002a7a:	009b      	lsls	r3, r3, #2
 8002a7c:	441a      	add	r2, r3
 8002a7e:	8b3b      	ldrh	r3, [r7, #24]
 8002a80:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002a84:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002a88:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002a8c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002a90:	b29b      	uxth	r3, r3
 8002a92:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002a94:	88fb      	ldrh	r3, [r7, #6]
 8002a96:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d01f      	beq.n	8002ade <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	461a      	mov	r2, r3
 8002aa4:	68bb      	ldr	r3, [r7, #8]
 8002aa6:	781b      	ldrb	r3, [r3, #0]
 8002aa8:	009b      	lsls	r3, r3, #2
 8002aaa:	4413      	add	r3, r2
 8002aac:	881b      	ldrh	r3, [r3, #0]
 8002aae:	b29b      	uxth	r3, r3
 8002ab0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002ab4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002ab8:	82fb      	strh	r3, [r7, #22]
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	461a      	mov	r2, r3
 8002ac0:	68bb      	ldr	r3, [r7, #8]
 8002ac2:	781b      	ldrb	r3, [r3, #0]
 8002ac4:	009b      	lsls	r3, r3, #2
 8002ac6:	441a      	add	r2, r3
 8002ac8:	8afb      	ldrh	r3, [r7, #22]
 8002aca:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002ace:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002ad2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002ad6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8002ada:	b29b      	uxth	r3, r3
 8002adc:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002ade:	8b7b      	ldrh	r3, [r7, #26]
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	f000 8087 	beq.w	8002bf4 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	6818      	ldr	r0, [r3, #0]
 8002aea:	68bb      	ldr	r3, [r7, #8]
 8002aec:	6959      	ldr	r1, [r3, #20]
 8002aee:	68bb      	ldr	r3, [r7, #8]
 8002af0:	891a      	ldrh	r2, [r3, #8]
 8002af2:	8b7b      	ldrh	r3, [r7, #26]
 8002af4:	f004 f8fd 	bl	8006cf2 <USB_ReadPMA>
 8002af8:	e07c      	b.n	8002bf4 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002b02:	b29b      	uxth	r3, r3
 8002b04:	461a      	mov	r2, r3
 8002b06:	68bb      	ldr	r3, [r7, #8]
 8002b08:	781b      	ldrb	r3, [r3, #0]
 8002b0a:	00db      	lsls	r3, r3, #3
 8002b0c:	4413      	add	r3, r2
 8002b0e:	3306      	adds	r3, #6
 8002b10:	005b      	lsls	r3, r3, #1
 8002b12:	68fa      	ldr	r2, [r7, #12]
 8002b14:	6812      	ldr	r2, [r2, #0]
 8002b16:	4413      	add	r3, r2
 8002b18:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002b1c:	881b      	ldrh	r3, [r3, #0]
 8002b1e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002b22:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002b24:	68bb      	ldr	r3, [r7, #8]
 8002b26:	699a      	ldr	r2, [r3, #24]
 8002b28:	8b7b      	ldrh	r3, [r7, #26]
 8002b2a:	429a      	cmp	r2, r3
 8002b2c:	d306      	bcc.n	8002b3c <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8002b2e:	68bb      	ldr	r3, [r7, #8]
 8002b30:	699a      	ldr	r2, [r3, #24]
 8002b32:	8b7b      	ldrh	r3, [r7, #26]
 8002b34:	1ad2      	subs	r2, r2, r3
 8002b36:	68bb      	ldr	r3, [r7, #8]
 8002b38:	619a      	str	r2, [r3, #24]
 8002b3a:	e002      	b.n	8002b42 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8002b3c:	68bb      	ldr	r3, [r7, #8]
 8002b3e:	2200      	movs	r2, #0
 8002b40:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002b42:	68bb      	ldr	r3, [r7, #8]
 8002b44:	699b      	ldr	r3, [r3, #24]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d123      	bne.n	8002b92 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	461a      	mov	r2, r3
 8002b50:	68bb      	ldr	r3, [r7, #8]
 8002b52:	781b      	ldrb	r3, [r3, #0]
 8002b54:	009b      	lsls	r3, r3, #2
 8002b56:	4413      	add	r3, r2
 8002b58:	881b      	ldrh	r3, [r3, #0]
 8002b5a:	b29b      	uxth	r3, r3
 8002b5c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002b60:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002b64:	83fb      	strh	r3, [r7, #30]
 8002b66:	8bfb      	ldrh	r3, [r7, #30]
 8002b68:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8002b6c:	83fb      	strh	r3, [r7, #30]
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	461a      	mov	r2, r3
 8002b74:	68bb      	ldr	r3, [r7, #8]
 8002b76:	781b      	ldrb	r3, [r3, #0]
 8002b78:	009b      	lsls	r3, r3, #2
 8002b7a:	441a      	add	r2, r3
 8002b7c:	8bfb      	ldrh	r3, [r7, #30]
 8002b7e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002b82:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002b86:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002b8a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002b8e:	b29b      	uxth	r3, r3
 8002b90:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002b92:	88fb      	ldrh	r3, [r7, #6]
 8002b94:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d11f      	bne.n	8002bdc <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	461a      	mov	r2, r3
 8002ba2:	68bb      	ldr	r3, [r7, #8]
 8002ba4:	781b      	ldrb	r3, [r3, #0]
 8002ba6:	009b      	lsls	r3, r3, #2
 8002ba8:	4413      	add	r3, r2
 8002baa:	881b      	ldrh	r3, [r3, #0]
 8002bac:	b29b      	uxth	r3, r3
 8002bae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002bb2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002bb6:	83bb      	strh	r3, [r7, #28]
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	461a      	mov	r2, r3
 8002bbe:	68bb      	ldr	r3, [r7, #8]
 8002bc0:	781b      	ldrb	r3, [r3, #0]
 8002bc2:	009b      	lsls	r3, r3, #2
 8002bc4:	441a      	add	r2, r3
 8002bc6:	8bbb      	ldrh	r3, [r7, #28]
 8002bc8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002bcc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002bd0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002bd4:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8002bd8:	b29b      	uxth	r3, r3
 8002bda:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002bdc:	8b7b      	ldrh	r3, [r7, #26]
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d008      	beq.n	8002bf4 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	6818      	ldr	r0, [r3, #0]
 8002be6:	68bb      	ldr	r3, [r7, #8]
 8002be8:	6959      	ldr	r1, [r3, #20]
 8002bea:	68bb      	ldr	r3, [r7, #8]
 8002bec:	895a      	ldrh	r2, [r3, #10]
 8002bee:	8b7b      	ldrh	r3, [r7, #26]
 8002bf0:	f004 f87f 	bl	8006cf2 <USB_ReadPMA>
    }
  }

  return count;
 8002bf4:	8b7b      	ldrh	r3, [r7, #26]
}
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	3720      	adds	r7, #32
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bd80      	pop	{r7, pc}

08002bfe <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002bfe:	b580      	push	{r7, lr}
 8002c00:	b0a4      	sub	sp, #144	@ 0x90
 8002c02:	af00      	add	r7, sp, #0
 8002c04:	60f8      	str	r0, [r7, #12]
 8002c06:	60b9      	str	r1, [r7, #8]
 8002c08:	4613      	mov	r3, r2
 8002c0a:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002c0c:	88fb      	ldrh	r3, [r7, #6]
 8002c0e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	f000 81dd 	beq.w	8002fd2 <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002c20:	b29b      	uxth	r3, r3
 8002c22:	461a      	mov	r2, r3
 8002c24:	68bb      	ldr	r3, [r7, #8]
 8002c26:	781b      	ldrb	r3, [r3, #0]
 8002c28:	00db      	lsls	r3, r3, #3
 8002c2a:	4413      	add	r3, r2
 8002c2c:	3302      	adds	r3, #2
 8002c2e:	005b      	lsls	r3, r3, #1
 8002c30:	68fa      	ldr	r2, [r7, #12]
 8002c32:	6812      	ldr	r2, [r2, #0]
 8002c34:	4413      	add	r3, r2
 8002c36:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002c3a:	881b      	ldrh	r3, [r3, #0]
 8002c3c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002c40:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len > TxPctSize)
 8002c44:	68bb      	ldr	r3, [r7, #8]
 8002c46:	699a      	ldr	r2, [r3, #24]
 8002c48:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002c4c:	429a      	cmp	r2, r3
 8002c4e:	d907      	bls.n	8002c60 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 8002c50:	68bb      	ldr	r3, [r7, #8]
 8002c52:	699a      	ldr	r2, [r3, #24]
 8002c54:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002c58:	1ad2      	subs	r2, r2, r3
 8002c5a:	68bb      	ldr	r3, [r7, #8]
 8002c5c:	619a      	str	r2, [r3, #24]
 8002c5e:	e002      	b.n	8002c66 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8002c60:	68bb      	ldr	r3, [r7, #8]
 8002c62:	2200      	movs	r2, #0
 8002c64:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002c66:	68bb      	ldr	r3, [r7, #8]
 8002c68:	699b      	ldr	r3, [r3, #24]
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	f040 80b9 	bne.w	8002de2 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002c70:	68bb      	ldr	r3, [r7, #8]
 8002c72:	785b      	ldrb	r3, [r3, #1]
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d126      	bne.n	8002cc6 <HAL_PCD_EP_DB_Transmit+0xc8>
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002c86:	b29b      	uxth	r3, r3
 8002c88:	461a      	mov	r2, r3
 8002c8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c8c:	4413      	add	r3, r2
 8002c8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002c90:	68bb      	ldr	r3, [r7, #8]
 8002c92:	781b      	ldrb	r3, [r3, #0]
 8002c94:	011a      	lsls	r2, r3, #4
 8002c96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c98:	4413      	add	r3, r2
 8002c9a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002c9e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002ca0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ca2:	881b      	ldrh	r3, [r3, #0]
 8002ca4:	b29b      	uxth	r3, r3
 8002ca6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002caa:	b29a      	uxth	r2, r3
 8002cac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002cae:	801a      	strh	r2, [r3, #0]
 8002cb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002cb2:	881b      	ldrh	r3, [r3, #0]
 8002cb4:	b29b      	uxth	r3, r3
 8002cb6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002cba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002cbe:	b29a      	uxth	r2, r3
 8002cc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002cc2:	801a      	strh	r2, [r3, #0]
 8002cc4:	e01a      	b.n	8002cfc <HAL_PCD_EP_DB_Transmit+0xfe>
 8002cc6:	68bb      	ldr	r3, [r7, #8]
 8002cc8:	785b      	ldrb	r3, [r3, #1]
 8002cca:	2b01      	cmp	r3, #1
 8002ccc:	d116      	bne.n	8002cfc <HAL_PCD_EP_DB_Transmit+0xfe>
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	637b      	str	r3, [r7, #52]	@ 0x34
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002cdc:	b29b      	uxth	r3, r3
 8002cde:	461a      	mov	r2, r3
 8002ce0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ce2:	4413      	add	r3, r2
 8002ce4:	637b      	str	r3, [r7, #52]	@ 0x34
 8002ce6:	68bb      	ldr	r3, [r7, #8]
 8002ce8:	781b      	ldrb	r3, [r3, #0]
 8002cea:	011a      	lsls	r2, r3, #4
 8002cec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002cee:	4413      	add	r3, r2
 8002cf0:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002cf4:	633b      	str	r3, [r7, #48]	@ 0x30
 8002cf6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d02:	68bb      	ldr	r3, [r7, #8]
 8002d04:	785b      	ldrb	r3, [r3, #1]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d126      	bne.n	8002d58 <HAL_PCD_EP_DB_Transmit+0x15a>
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	61fb      	str	r3, [r7, #28]
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002d18:	b29b      	uxth	r3, r3
 8002d1a:	461a      	mov	r2, r3
 8002d1c:	69fb      	ldr	r3, [r7, #28]
 8002d1e:	4413      	add	r3, r2
 8002d20:	61fb      	str	r3, [r7, #28]
 8002d22:	68bb      	ldr	r3, [r7, #8]
 8002d24:	781b      	ldrb	r3, [r3, #0]
 8002d26:	011a      	lsls	r2, r3, #4
 8002d28:	69fb      	ldr	r3, [r7, #28]
 8002d2a:	4413      	add	r3, r2
 8002d2c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002d30:	61bb      	str	r3, [r7, #24]
 8002d32:	69bb      	ldr	r3, [r7, #24]
 8002d34:	881b      	ldrh	r3, [r3, #0]
 8002d36:	b29b      	uxth	r3, r3
 8002d38:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002d3c:	b29a      	uxth	r2, r3
 8002d3e:	69bb      	ldr	r3, [r7, #24]
 8002d40:	801a      	strh	r2, [r3, #0]
 8002d42:	69bb      	ldr	r3, [r7, #24]
 8002d44:	881b      	ldrh	r3, [r3, #0]
 8002d46:	b29b      	uxth	r3, r3
 8002d48:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002d4c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002d50:	b29a      	uxth	r2, r3
 8002d52:	69bb      	ldr	r3, [r7, #24]
 8002d54:	801a      	strh	r2, [r3, #0]
 8002d56:	e017      	b.n	8002d88 <HAL_PCD_EP_DB_Transmit+0x18a>
 8002d58:	68bb      	ldr	r3, [r7, #8]
 8002d5a:	785b      	ldrb	r3, [r3, #1]
 8002d5c:	2b01      	cmp	r3, #1
 8002d5e:	d113      	bne.n	8002d88 <HAL_PCD_EP_DB_Transmit+0x18a>
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002d68:	b29b      	uxth	r3, r3
 8002d6a:	461a      	mov	r2, r3
 8002d6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d6e:	4413      	add	r3, r2
 8002d70:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d72:	68bb      	ldr	r3, [r7, #8]
 8002d74:	781b      	ldrb	r3, [r3, #0]
 8002d76:	011a      	lsls	r2, r3, #4
 8002d78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d7a:	4413      	add	r3, r2
 8002d7c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002d80:	623b      	str	r3, [r7, #32]
 8002d82:	6a3b      	ldr	r3, [r7, #32]
 8002d84:	2200      	movs	r2, #0
 8002d86:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002d88:	68bb      	ldr	r3, [r7, #8]
 8002d8a:	781b      	ldrb	r3, [r3, #0]
 8002d8c:	4619      	mov	r1, r3
 8002d8e:	68f8      	ldr	r0, [r7, #12]
 8002d90:	f005 fdaf 	bl	80088f2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002d94:	88fb      	ldrh	r3, [r7, #6]
 8002d96:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	f000 82fc 	beq.w	8003398 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	461a      	mov	r2, r3
 8002da6:	68bb      	ldr	r3, [r7, #8]
 8002da8:	781b      	ldrb	r3, [r3, #0]
 8002daa:	009b      	lsls	r3, r3, #2
 8002dac:	4413      	add	r3, r2
 8002dae:	881b      	ldrh	r3, [r3, #0]
 8002db0:	b29b      	uxth	r3, r3
 8002db2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002db6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002dba:	82fb      	strh	r3, [r7, #22]
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	461a      	mov	r2, r3
 8002dc2:	68bb      	ldr	r3, [r7, #8]
 8002dc4:	781b      	ldrb	r3, [r3, #0]
 8002dc6:	009b      	lsls	r3, r3, #2
 8002dc8:	441a      	add	r2, r3
 8002dca:	8afb      	ldrh	r3, [r7, #22]
 8002dcc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002dd0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002dd4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002dd8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002ddc:	b29b      	uxth	r3, r3
 8002dde:	8013      	strh	r3, [r2, #0]
 8002de0:	e2da      	b.n	8003398 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002de2:	88fb      	ldrh	r3, [r7, #6]
 8002de4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d021      	beq.n	8002e30 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	461a      	mov	r2, r3
 8002df2:	68bb      	ldr	r3, [r7, #8]
 8002df4:	781b      	ldrb	r3, [r3, #0]
 8002df6:	009b      	lsls	r3, r3, #2
 8002df8:	4413      	add	r3, r2
 8002dfa:	881b      	ldrh	r3, [r3, #0]
 8002dfc:	b29b      	uxth	r3, r3
 8002dfe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002e02:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002e06:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	461a      	mov	r2, r3
 8002e10:	68bb      	ldr	r3, [r7, #8]
 8002e12:	781b      	ldrb	r3, [r3, #0]
 8002e14:	009b      	lsls	r3, r3, #2
 8002e16:	441a      	add	r2, r3
 8002e18:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8002e1c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002e20:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002e24:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002e28:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002e2c:	b29b      	uxth	r3, r3
 8002e2e:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002e30:	68bb      	ldr	r3, [r7, #8]
 8002e32:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002e36:	2b01      	cmp	r3, #1
 8002e38:	f040 82ae 	bne.w	8003398 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8002e3c:	68bb      	ldr	r3, [r7, #8]
 8002e3e:	695a      	ldr	r2, [r3, #20]
 8002e40:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002e44:	441a      	add	r2, r3
 8002e46:	68bb      	ldr	r3, [r7, #8]
 8002e48:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8002e4a:	68bb      	ldr	r3, [r7, #8]
 8002e4c:	69da      	ldr	r2, [r3, #28]
 8002e4e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002e52:	441a      	add	r2, r3
 8002e54:	68bb      	ldr	r3, [r7, #8]
 8002e56:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002e58:	68bb      	ldr	r3, [r7, #8]
 8002e5a:	6a1a      	ldr	r2, [r3, #32]
 8002e5c:	68bb      	ldr	r3, [r7, #8]
 8002e5e:	691b      	ldr	r3, [r3, #16]
 8002e60:	429a      	cmp	r2, r3
 8002e62:	d30b      	bcc.n	8002e7c <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 8002e64:	68bb      	ldr	r3, [r7, #8]
 8002e66:	691b      	ldr	r3, [r3, #16]
 8002e68:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8002e6c:	68bb      	ldr	r3, [r7, #8]
 8002e6e:	6a1a      	ldr	r2, [r3, #32]
 8002e70:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002e74:	1ad2      	subs	r2, r2, r3
 8002e76:	68bb      	ldr	r3, [r7, #8]
 8002e78:	621a      	str	r2, [r3, #32]
 8002e7a:	e017      	b.n	8002eac <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 8002e7c:	68bb      	ldr	r3, [r7, #8]
 8002e7e:	6a1b      	ldr	r3, [r3, #32]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d108      	bne.n	8002e96 <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 8002e84:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002e88:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8002e8c:	68bb      	ldr	r3, [r7, #8]
 8002e8e:	2200      	movs	r2, #0
 8002e90:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8002e94:	e00a      	b.n	8002eac <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8002e96:	68bb      	ldr	r3, [r7, #8]
 8002e98:	2200      	movs	r2, #0
 8002e9a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 8002e9e:	68bb      	ldr	r3, [r7, #8]
 8002ea0:	6a1b      	ldr	r3, [r3, #32]
 8002ea2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8002ea6:	68bb      	ldr	r3, [r7, #8]
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002eac:	68bb      	ldr	r3, [r7, #8]
 8002eae:	785b      	ldrb	r3, [r3, #1]
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d165      	bne.n	8002f80 <HAL_PCD_EP_DB_Transmit+0x382>
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002ec2:	b29b      	uxth	r3, r3
 8002ec4:	461a      	mov	r2, r3
 8002ec6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002ec8:	4413      	add	r3, r2
 8002eca:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002ecc:	68bb      	ldr	r3, [r7, #8]
 8002ece:	781b      	ldrb	r3, [r3, #0]
 8002ed0:	011a      	lsls	r2, r3, #4
 8002ed2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002ed4:	4413      	add	r3, r2
 8002ed6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002eda:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002edc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ede:	881b      	ldrh	r3, [r3, #0]
 8002ee0:	b29b      	uxth	r3, r3
 8002ee2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002ee6:	b29a      	uxth	r2, r3
 8002ee8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002eea:	801a      	strh	r2, [r3, #0]
 8002eec:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002ef0:	2b3e      	cmp	r3, #62	@ 0x3e
 8002ef2:	d91d      	bls.n	8002f30 <HAL_PCD_EP_DB_Transmit+0x332>
 8002ef4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002ef8:	095b      	lsrs	r3, r3, #5
 8002efa:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002efc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002f00:	f003 031f 	and.w	r3, r3, #31
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d102      	bne.n	8002f0e <HAL_PCD_EP_DB_Transmit+0x310>
 8002f08:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002f0a:	3b01      	subs	r3, #1
 8002f0c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002f0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f10:	881b      	ldrh	r3, [r3, #0]
 8002f12:	b29a      	uxth	r2, r3
 8002f14:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002f16:	b29b      	uxth	r3, r3
 8002f18:	029b      	lsls	r3, r3, #10
 8002f1a:	b29b      	uxth	r3, r3
 8002f1c:	4313      	orrs	r3, r2
 8002f1e:	b29b      	uxth	r3, r3
 8002f20:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002f24:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002f28:	b29a      	uxth	r2, r3
 8002f2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f2c:	801a      	strh	r2, [r3, #0]
 8002f2e:	e044      	b.n	8002fba <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002f30:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d10a      	bne.n	8002f4e <HAL_PCD_EP_DB_Transmit+0x350>
 8002f38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f3a:	881b      	ldrh	r3, [r3, #0]
 8002f3c:	b29b      	uxth	r3, r3
 8002f3e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002f42:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002f46:	b29a      	uxth	r2, r3
 8002f48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f4a:	801a      	strh	r2, [r3, #0]
 8002f4c:	e035      	b.n	8002fba <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002f4e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002f52:	085b      	lsrs	r3, r3, #1
 8002f54:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002f56:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002f5a:	f003 0301 	and.w	r3, r3, #1
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d002      	beq.n	8002f68 <HAL_PCD_EP_DB_Transmit+0x36a>
 8002f62:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002f64:	3301      	adds	r3, #1
 8002f66:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002f68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f6a:	881b      	ldrh	r3, [r3, #0]
 8002f6c:	b29a      	uxth	r2, r3
 8002f6e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002f70:	b29b      	uxth	r3, r3
 8002f72:	029b      	lsls	r3, r3, #10
 8002f74:	b29b      	uxth	r3, r3
 8002f76:	4313      	orrs	r3, r2
 8002f78:	b29a      	uxth	r2, r3
 8002f7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f7c:	801a      	strh	r2, [r3, #0]
 8002f7e:	e01c      	b.n	8002fba <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002f80:	68bb      	ldr	r3, [r7, #8]
 8002f82:	785b      	ldrb	r3, [r3, #1]
 8002f84:	2b01      	cmp	r3, #1
 8002f86:	d118      	bne.n	8002fba <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	647b      	str	r3, [r7, #68]	@ 0x44
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002f96:	b29b      	uxth	r3, r3
 8002f98:	461a      	mov	r2, r3
 8002f9a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002f9c:	4413      	add	r3, r2
 8002f9e:	647b      	str	r3, [r7, #68]	@ 0x44
 8002fa0:	68bb      	ldr	r3, [r7, #8]
 8002fa2:	781b      	ldrb	r3, [r3, #0]
 8002fa4:	011a      	lsls	r2, r3, #4
 8002fa6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002fa8:	4413      	add	r3, r2
 8002faa:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002fae:	643b      	str	r3, [r7, #64]	@ 0x40
 8002fb0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002fb4:	b29a      	uxth	r2, r3
 8002fb6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002fb8:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	6818      	ldr	r0, [r3, #0]
 8002fbe:	68bb      	ldr	r3, [r7, #8]
 8002fc0:	6959      	ldr	r1, [r3, #20]
 8002fc2:	68bb      	ldr	r3, [r7, #8]
 8002fc4:	891a      	ldrh	r2, [r3, #8]
 8002fc6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002fca:	b29b      	uxth	r3, r3
 8002fcc:	f003 fe4b 	bl	8006c66 <USB_WritePMA>
 8002fd0:	e1e2      	b.n	8003398 <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002fda:	b29b      	uxth	r3, r3
 8002fdc:	461a      	mov	r2, r3
 8002fde:	68bb      	ldr	r3, [r7, #8]
 8002fe0:	781b      	ldrb	r3, [r3, #0]
 8002fe2:	00db      	lsls	r3, r3, #3
 8002fe4:	4413      	add	r3, r2
 8002fe6:	3306      	adds	r3, #6
 8002fe8:	005b      	lsls	r3, r3, #1
 8002fea:	68fa      	ldr	r2, [r7, #12]
 8002fec:	6812      	ldr	r2, [r2, #0]
 8002fee:	4413      	add	r3, r2
 8002ff0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002ff4:	881b      	ldrh	r3, [r3, #0]
 8002ff6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002ffa:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len >= TxPctSize)
 8002ffe:	68bb      	ldr	r3, [r7, #8]
 8003000:	699a      	ldr	r2, [r3, #24]
 8003002:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003006:	429a      	cmp	r2, r3
 8003008:	d307      	bcc.n	800301a <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 800300a:	68bb      	ldr	r3, [r7, #8]
 800300c:	699a      	ldr	r2, [r3, #24]
 800300e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003012:	1ad2      	subs	r2, r2, r3
 8003014:	68bb      	ldr	r3, [r7, #8]
 8003016:	619a      	str	r2, [r3, #24]
 8003018:	e002      	b.n	8003020 <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 800301a:	68bb      	ldr	r3, [r7, #8]
 800301c:	2200      	movs	r2, #0
 800301e:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003020:	68bb      	ldr	r3, [r7, #8]
 8003022:	699b      	ldr	r3, [r3, #24]
 8003024:	2b00      	cmp	r3, #0
 8003026:	f040 80c0 	bne.w	80031aa <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800302a:	68bb      	ldr	r3, [r7, #8]
 800302c:	785b      	ldrb	r3, [r3, #1]
 800302e:	2b00      	cmp	r3, #0
 8003030:	d126      	bne.n	8003080 <HAL_PCD_EP_DB_Transmit+0x482>
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003040:	b29b      	uxth	r3, r3
 8003042:	461a      	mov	r2, r3
 8003044:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003046:	4413      	add	r3, r2
 8003048:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800304a:	68bb      	ldr	r3, [r7, #8]
 800304c:	781b      	ldrb	r3, [r3, #0]
 800304e:	011a      	lsls	r2, r3, #4
 8003050:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003052:	4413      	add	r3, r2
 8003054:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003058:	67bb      	str	r3, [r7, #120]	@ 0x78
 800305a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800305c:	881b      	ldrh	r3, [r3, #0]
 800305e:	b29b      	uxth	r3, r3
 8003060:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003064:	b29a      	uxth	r2, r3
 8003066:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003068:	801a      	strh	r2, [r3, #0]
 800306a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800306c:	881b      	ldrh	r3, [r3, #0]
 800306e:	b29b      	uxth	r3, r3
 8003070:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003074:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003078:	b29a      	uxth	r2, r3
 800307a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800307c:	801a      	strh	r2, [r3, #0]
 800307e:	e01a      	b.n	80030b6 <HAL_PCD_EP_DB_Transmit+0x4b8>
 8003080:	68bb      	ldr	r3, [r7, #8]
 8003082:	785b      	ldrb	r3, [r3, #1]
 8003084:	2b01      	cmp	r3, #1
 8003086:	d116      	bne.n	80030b6 <HAL_PCD_EP_DB_Transmit+0x4b8>
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	667b      	str	r3, [r7, #100]	@ 0x64
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003096:	b29b      	uxth	r3, r3
 8003098:	461a      	mov	r2, r3
 800309a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800309c:	4413      	add	r3, r2
 800309e:	667b      	str	r3, [r7, #100]	@ 0x64
 80030a0:	68bb      	ldr	r3, [r7, #8]
 80030a2:	781b      	ldrb	r3, [r3, #0]
 80030a4:	011a      	lsls	r2, r3, #4
 80030a6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80030a8:	4413      	add	r3, r2
 80030aa:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80030ae:	663b      	str	r3, [r7, #96]	@ 0x60
 80030b0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80030b2:	2200      	movs	r2, #0
 80030b4:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	677b      	str	r3, [r7, #116]	@ 0x74
 80030bc:	68bb      	ldr	r3, [r7, #8]
 80030be:	785b      	ldrb	r3, [r3, #1]
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d12b      	bne.n	800311c <HAL_PCD_EP_DB_Transmit+0x51e>
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80030d2:	b29b      	uxth	r3, r3
 80030d4:	461a      	mov	r2, r3
 80030d6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80030d8:	4413      	add	r3, r2
 80030da:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80030dc:	68bb      	ldr	r3, [r7, #8]
 80030de:	781b      	ldrb	r3, [r3, #0]
 80030e0:	011a      	lsls	r2, r3, #4
 80030e2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80030e4:	4413      	add	r3, r2
 80030e6:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80030ea:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80030ee:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80030f2:	881b      	ldrh	r3, [r3, #0]
 80030f4:	b29b      	uxth	r3, r3
 80030f6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80030fa:	b29a      	uxth	r2, r3
 80030fc:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003100:	801a      	strh	r2, [r3, #0]
 8003102:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003106:	881b      	ldrh	r3, [r3, #0]
 8003108:	b29b      	uxth	r3, r3
 800310a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800310e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003112:	b29a      	uxth	r2, r3
 8003114:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003118:	801a      	strh	r2, [r3, #0]
 800311a:	e017      	b.n	800314c <HAL_PCD_EP_DB_Transmit+0x54e>
 800311c:	68bb      	ldr	r3, [r7, #8]
 800311e:	785b      	ldrb	r3, [r3, #1]
 8003120:	2b01      	cmp	r3, #1
 8003122:	d113      	bne.n	800314c <HAL_PCD_EP_DB_Transmit+0x54e>
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800312c:	b29b      	uxth	r3, r3
 800312e:	461a      	mov	r2, r3
 8003130:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003132:	4413      	add	r3, r2
 8003134:	677b      	str	r3, [r7, #116]	@ 0x74
 8003136:	68bb      	ldr	r3, [r7, #8]
 8003138:	781b      	ldrb	r3, [r3, #0]
 800313a:	011a      	lsls	r2, r3, #4
 800313c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800313e:	4413      	add	r3, r2
 8003140:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003144:	673b      	str	r3, [r7, #112]	@ 0x70
 8003146:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003148:	2200      	movs	r2, #0
 800314a:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800314c:	68bb      	ldr	r3, [r7, #8]
 800314e:	781b      	ldrb	r3, [r3, #0]
 8003150:	4619      	mov	r1, r3
 8003152:	68f8      	ldr	r0, [r7, #12]
 8003154:	f005 fbcd 	bl	80088f2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003158:	88fb      	ldrh	r3, [r7, #6]
 800315a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800315e:	2b00      	cmp	r3, #0
 8003160:	f040 811a 	bne.w	8003398 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	461a      	mov	r2, r3
 800316a:	68bb      	ldr	r3, [r7, #8]
 800316c:	781b      	ldrb	r3, [r3, #0]
 800316e:	009b      	lsls	r3, r3, #2
 8003170:	4413      	add	r3, r2
 8003172:	881b      	ldrh	r3, [r3, #0]
 8003174:	b29b      	uxth	r3, r3
 8003176:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800317a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800317e:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	461a      	mov	r2, r3
 8003188:	68bb      	ldr	r3, [r7, #8]
 800318a:	781b      	ldrb	r3, [r3, #0]
 800318c:	009b      	lsls	r3, r3, #2
 800318e:	441a      	add	r2, r3
 8003190:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8003194:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003198:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800319c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80031a0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80031a4:	b29b      	uxth	r3, r3
 80031a6:	8013      	strh	r3, [r2, #0]
 80031a8:	e0f6      	b.n	8003398 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80031aa:	88fb      	ldrh	r3, [r7, #6]
 80031ac:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d121      	bne.n	80031f8 <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	461a      	mov	r2, r3
 80031ba:	68bb      	ldr	r3, [r7, #8]
 80031bc:	781b      	ldrb	r3, [r3, #0]
 80031be:	009b      	lsls	r3, r3, #2
 80031c0:	4413      	add	r3, r2
 80031c2:	881b      	ldrh	r3, [r3, #0]
 80031c4:	b29b      	uxth	r3, r3
 80031c6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80031ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80031ce:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	461a      	mov	r2, r3
 80031d8:	68bb      	ldr	r3, [r7, #8]
 80031da:	781b      	ldrb	r3, [r3, #0]
 80031dc:	009b      	lsls	r3, r3, #2
 80031de:	441a      	add	r2, r3
 80031e0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80031e4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80031e8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80031ec:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80031f0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80031f4:	b29b      	uxth	r3, r3
 80031f6:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80031f8:	68bb      	ldr	r3, [r7, #8]
 80031fa:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80031fe:	2b01      	cmp	r3, #1
 8003200:	f040 80ca 	bne.w	8003398 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8003204:	68bb      	ldr	r3, [r7, #8]
 8003206:	695a      	ldr	r2, [r3, #20]
 8003208:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800320c:	441a      	add	r2, r3
 800320e:	68bb      	ldr	r3, [r7, #8]
 8003210:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8003212:	68bb      	ldr	r3, [r7, #8]
 8003214:	69da      	ldr	r2, [r3, #28]
 8003216:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800321a:	441a      	add	r2, r3
 800321c:	68bb      	ldr	r3, [r7, #8]
 800321e:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003220:	68bb      	ldr	r3, [r7, #8]
 8003222:	6a1a      	ldr	r2, [r3, #32]
 8003224:	68bb      	ldr	r3, [r7, #8]
 8003226:	691b      	ldr	r3, [r3, #16]
 8003228:	429a      	cmp	r2, r3
 800322a:	d30b      	bcc.n	8003244 <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 800322c:	68bb      	ldr	r3, [r7, #8]
 800322e:	691b      	ldr	r3, [r3, #16]
 8003230:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8003234:	68bb      	ldr	r3, [r7, #8]
 8003236:	6a1a      	ldr	r2, [r3, #32]
 8003238:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800323c:	1ad2      	subs	r2, r2, r3
 800323e:	68bb      	ldr	r3, [r7, #8]
 8003240:	621a      	str	r2, [r3, #32]
 8003242:	e017      	b.n	8003274 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 8003244:	68bb      	ldr	r3, [r7, #8]
 8003246:	6a1b      	ldr	r3, [r3, #32]
 8003248:	2b00      	cmp	r3, #0
 800324a:	d108      	bne.n	800325e <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 800324c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003250:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8003254:	68bb      	ldr	r3, [r7, #8]
 8003256:	2200      	movs	r2, #0
 8003258:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 800325c:	e00a      	b.n	8003274 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 800325e:	68bb      	ldr	r3, [r7, #8]
 8003260:	6a1b      	ldr	r3, [r3, #32]
 8003262:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8003266:	68bb      	ldr	r3, [r7, #8]
 8003268:	2200      	movs	r2, #0
 800326a:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800326c:	68bb      	ldr	r3, [r7, #8]
 800326e:	2200      	movs	r2, #0
 8003270:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	657b      	str	r3, [r7, #84]	@ 0x54
 800327a:	68bb      	ldr	r3, [r7, #8]
 800327c:	785b      	ldrb	r3, [r3, #1]
 800327e:	2b00      	cmp	r3, #0
 8003280:	d165      	bne.n	800334e <HAL_PCD_EP_DB_Transmit+0x750>
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003290:	b29b      	uxth	r3, r3
 8003292:	461a      	mov	r2, r3
 8003294:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003296:	4413      	add	r3, r2
 8003298:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800329a:	68bb      	ldr	r3, [r7, #8]
 800329c:	781b      	ldrb	r3, [r3, #0]
 800329e:	011a      	lsls	r2, r3, #4
 80032a0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80032a2:	4413      	add	r3, r2
 80032a4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80032a8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80032aa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80032ac:	881b      	ldrh	r3, [r3, #0]
 80032ae:	b29b      	uxth	r3, r3
 80032b0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80032b4:	b29a      	uxth	r2, r3
 80032b6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80032b8:	801a      	strh	r2, [r3, #0]
 80032ba:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80032be:	2b3e      	cmp	r3, #62	@ 0x3e
 80032c0:	d91d      	bls.n	80032fe <HAL_PCD_EP_DB_Transmit+0x700>
 80032c2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80032c6:	095b      	lsrs	r3, r3, #5
 80032c8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80032ca:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80032ce:	f003 031f 	and.w	r3, r3, #31
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d102      	bne.n	80032dc <HAL_PCD_EP_DB_Transmit+0x6de>
 80032d6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80032d8:	3b01      	subs	r3, #1
 80032da:	66bb      	str	r3, [r7, #104]	@ 0x68
 80032dc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80032de:	881b      	ldrh	r3, [r3, #0]
 80032e0:	b29a      	uxth	r2, r3
 80032e2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80032e4:	b29b      	uxth	r3, r3
 80032e6:	029b      	lsls	r3, r3, #10
 80032e8:	b29b      	uxth	r3, r3
 80032ea:	4313      	orrs	r3, r2
 80032ec:	b29b      	uxth	r3, r3
 80032ee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80032f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80032f6:	b29a      	uxth	r2, r3
 80032f8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80032fa:	801a      	strh	r2, [r3, #0]
 80032fc:	e041      	b.n	8003382 <HAL_PCD_EP_DB_Transmit+0x784>
 80032fe:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003302:	2b00      	cmp	r3, #0
 8003304:	d10a      	bne.n	800331c <HAL_PCD_EP_DB_Transmit+0x71e>
 8003306:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003308:	881b      	ldrh	r3, [r3, #0]
 800330a:	b29b      	uxth	r3, r3
 800330c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003310:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003314:	b29a      	uxth	r2, r3
 8003316:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003318:	801a      	strh	r2, [r3, #0]
 800331a:	e032      	b.n	8003382 <HAL_PCD_EP_DB_Transmit+0x784>
 800331c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003320:	085b      	lsrs	r3, r3, #1
 8003322:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003324:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003328:	f003 0301 	and.w	r3, r3, #1
 800332c:	2b00      	cmp	r3, #0
 800332e:	d002      	beq.n	8003336 <HAL_PCD_EP_DB_Transmit+0x738>
 8003330:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003332:	3301      	adds	r3, #1
 8003334:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003336:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003338:	881b      	ldrh	r3, [r3, #0]
 800333a:	b29a      	uxth	r2, r3
 800333c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800333e:	b29b      	uxth	r3, r3
 8003340:	029b      	lsls	r3, r3, #10
 8003342:	b29b      	uxth	r3, r3
 8003344:	4313      	orrs	r3, r2
 8003346:	b29a      	uxth	r2, r3
 8003348:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800334a:	801a      	strh	r2, [r3, #0]
 800334c:	e019      	b.n	8003382 <HAL_PCD_EP_DB_Transmit+0x784>
 800334e:	68bb      	ldr	r3, [r7, #8]
 8003350:	785b      	ldrb	r3, [r3, #1]
 8003352:	2b01      	cmp	r3, #1
 8003354:	d115      	bne.n	8003382 <HAL_PCD_EP_DB_Transmit+0x784>
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800335e:	b29b      	uxth	r3, r3
 8003360:	461a      	mov	r2, r3
 8003362:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003364:	4413      	add	r3, r2
 8003366:	657b      	str	r3, [r7, #84]	@ 0x54
 8003368:	68bb      	ldr	r3, [r7, #8]
 800336a:	781b      	ldrb	r3, [r3, #0]
 800336c:	011a      	lsls	r2, r3, #4
 800336e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003370:	4413      	add	r3, r2
 8003372:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003376:	653b      	str	r3, [r7, #80]	@ 0x50
 8003378:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800337c:	b29a      	uxth	r2, r3
 800337e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003380:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	6818      	ldr	r0, [r3, #0]
 8003386:	68bb      	ldr	r3, [r7, #8]
 8003388:	6959      	ldr	r1, [r3, #20]
 800338a:	68bb      	ldr	r3, [r7, #8]
 800338c:	895a      	ldrh	r2, [r3, #10]
 800338e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003392:	b29b      	uxth	r3, r3
 8003394:	f003 fc67 	bl	8006c66 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	461a      	mov	r2, r3
 800339e:	68bb      	ldr	r3, [r7, #8]
 80033a0:	781b      	ldrb	r3, [r3, #0]
 80033a2:	009b      	lsls	r3, r3, #2
 80033a4:	4413      	add	r3, r2
 80033a6:	881b      	ldrh	r3, [r3, #0]
 80033a8:	b29b      	uxth	r3, r3
 80033aa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80033ae:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80033b2:	82bb      	strh	r3, [r7, #20]
 80033b4:	8abb      	ldrh	r3, [r7, #20]
 80033b6:	f083 0310 	eor.w	r3, r3, #16
 80033ba:	82bb      	strh	r3, [r7, #20]
 80033bc:	8abb      	ldrh	r3, [r7, #20]
 80033be:	f083 0320 	eor.w	r3, r3, #32
 80033c2:	82bb      	strh	r3, [r7, #20]
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	461a      	mov	r2, r3
 80033ca:	68bb      	ldr	r3, [r7, #8]
 80033cc:	781b      	ldrb	r3, [r3, #0]
 80033ce:	009b      	lsls	r3, r3, #2
 80033d0:	441a      	add	r2, r3
 80033d2:	8abb      	ldrh	r3, [r7, #20]
 80033d4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80033d8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80033dc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80033e0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80033e4:	b29b      	uxth	r3, r3
 80033e6:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80033e8:	2300      	movs	r3, #0
}
 80033ea:	4618      	mov	r0, r3
 80033ec:	3790      	adds	r7, #144	@ 0x90
 80033ee:	46bd      	mov	sp, r7
 80033f0:	bd80      	pop	{r7, pc}

080033f2 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80033f2:	b480      	push	{r7}
 80033f4:	b087      	sub	sp, #28
 80033f6:	af00      	add	r7, sp, #0
 80033f8:	60f8      	str	r0, [r7, #12]
 80033fa:	607b      	str	r3, [r7, #4]
 80033fc:	460b      	mov	r3, r1
 80033fe:	817b      	strh	r3, [r7, #10]
 8003400:	4613      	mov	r3, r2
 8003402:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8003404:	897b      	ldrh	r3, [r7, #10]
 8003406:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800340a:	b29b      	uxth	r3, r3
 800340c:	2b00      	cmp	r3, #0
 800340e:	d00b      	beq.n	8003428 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003410:	897b      	ldrh	r3, [r7, #10]
 8003412:	f003 0207 	and.w	r2, r3, #7
 8003416:	4613      	mov	r3, r2
 8003418:	009b      	lsls	r3, r3, #2
 800341a:	4413      	add	r3, r2
 800341c:	00db      	lsls	r3, r3, #3
 800341e:	3310      	adds	r3, #16
 8003420:	68fa      	ldr	r2, [r7, #12]
 8003422:	4413      	add	r3, r2
 8003424:	617b      	str	r3, [r7, #20]
 8003426:	e009      	b.n	800343c <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003428:	897a      	ldrh	r2, [r7, #10]
 800342a:	4613      	mov	r3, r2
 800342c:	009b      	lsls	r3, r3, #2
 800342e:	4413      	add	r3, r2
 8003430:	00db      	lsls	r3, r3, #3
 8003432:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003436:	68fa      	ldr	r2, [r7, #12]
 8003438:	4413      	add	r3, r2
 800343a:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800343c:	893b      	ldrh	r3, [r7, #8]
 800343e:	2b00      	cmp	r3, #0
 8003440:	d107      	bne.n	8003452 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8003442:	697b      	ldr	r3, [r7, #20]
 8003444:	2200      	movs	r2, #0
 8003446:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	b29a      	uxth	r2, r3
 800344c:	697b      	ldr	r3, [r7, #20]
 800344e:	80da      	strh	r2, [r3, #6]
 8003450:	e00b      	b.n	800346a <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8003452:	697b      	ldr	r3, [r7, #20]
 8003454:	2201      	movs	r2, #1
 8003456:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	b29a      	uxth	r2, r3
 800345c:	697b      	ldr	r3, [r7, #20]
 800345e:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	0c1b      	lsrs	r3, r3, #16
 8003464:	b29a      	uxth	r2, r3
 8003466:	697b      	ldr	r3, [r7, #20]
 8003468:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800346a:	2300      	movs	r3, #0
}
 800346c:	4618      	mov	r0, r3
 800346e:	371c      	adds	r7, #28
 8003470:	46bd      	mov	sp, r7
 8003472:	bc80      	pop	{r7}
 8003474:	4770      	bx	lr
	...

08003478 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	b086      	sub	sp, #24
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2b00      	cmp	r3, #0
 8003484:	d101      	bne.n	800348a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003486:	2301      	movs	r3, #1
 8003488:	e272      	b.n	8003970 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f003 0301 	and.w	r3, r3, #1
 8003492:	2b00      	cmp	r3, #0
 8003494:	f000 8087 	beq.w	80035a6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003498:	4b92      	ldr	r3, [pc, #584]	@ (80036e4 <HAL_RCC_OscConfig+0x26c>)
 800349a:	685b      	ldr	r3, [r3, #4]
 800349c:	f003 030c 	and.w	r3, r3, #12
 80034a0:	2b04      	cmp	r3, #4
 80034a2:	d00c      	beq.n	80034be <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80034a4:	4b8f      	ldr	r3, [pc, #572]	@ (80036e4 <HAL_RCC_OscConfig+0x26c>)
 80034a6:	685b      	ldr	r3, [r3, #4]
 80034a8:	f003 030c 	and.w	r3, r3, #12
 80034ac:	2b08      	cmp	r3, #8
 80034ae:	d112      	bne.n	80034d6 <HAL_RCC_OscConfig+0x5e>
 80034b0:	4b8c      	ldr	r3, [pc, #560]	@ (80036e4 <HAL_RCC_OscConfig+0x26c>)
 80034b2:	685b      	ldr	r3, [r3, #4]
 80034b4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80034b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80034bc:	d10b      	bne.n	80034d6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034be:	4b89      	ldr	r3, [pc, #548]	@ (80036e4 <HAL_RCC_OscConfig+0x26c>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d06c      	beq.n	80035a4 <HAL_RCC_OscConfig+0x12c>
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	685b      	ldr	r3, [r3, #4]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d168      	bne.n	80035a4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80034d2:	2301      	movs	r3, #1
 80034d4:	e24c      	b.n	8003970 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	685b      	ldr	r3, [r3, #4]
 80034da:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80034de:	d106      	bne.n	80034ee <HAL_RCC_OscConfig+0x76>
 80034e0:	4b80      	ldr	r3, [pc, #512]	@ (80036e4 <HAL_RCC_OscConfig+0x26c>)
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	4a7f      	ldr	r2, [pc, #508]	@ (80036e4 <HAL_RCC_OscConfig+0x26c>)
 80034e6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80034ea:	6013      	str	r3, [r2, #0]
 80034ec:	e02e      	b.n	800354c <HAL_RCC_OscConfig+0xd4>
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	685b      	ldr	r3, [r3, #4]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d10c      	bne.n	8003510 <HAL_RCC_OscConfig+0x98>
 80034f6:	4b7b      	ldr	r3, [pc, #492]	@ (80036e4 <HAL_RCC_OscConfig+0x26c>)
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	4a7a      	ldr	r2, [pc, #488]	@ (80036e4 <HAL_RCC_OscConfig+0x26c>)
 80034fc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003500:	6013      	str	r3, [r2, #0]
 8003502:	4b78      	ldr	r3, [pc, #480]	@ (80036e4 <HAL_RCC_OscConfig+0x26c>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	4a77      	ldr	r2, [pc, #476]	@ (80036e4 <HAL_RCC_OscConfig+0x26c>)
 8003508:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800350c:	6013      	str	r3, [r2, #0]
 800350e:	e01d      	b.n	800354c <HAL_RCC_OscConfig+0xd4>
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	685b      	ldr	r3, [r3, #4]
 8003514:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003518:	d10c      	bne.n	8003534 <HAL_RCC_OscConfig+0xbc>
 800351a:	4b72      	ldr	r3, [pc, #456]	@ (80036e4 <HAL_RCC_OscConfig+0x26c>)
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	4a71      	ldr	r2, [pc, #452]	@ (80036e4 <HAL_RCC_OscConfig+0x26c>)
 8003520:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003524:	6013      	str	r3, [r2, #0]
 8003526:	4b6f      	ldr	r3, [pc, #444]	@ (80036e4 <HAL_RCC_OscConfig+0x26c>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	4a6e      	ldr	r2, [pc, #440]	@ (80036e4 <HAL_RCC_OscConfig+0x26c>)
 800352c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003530:	6013      	str	r3, [r2, #0]
 8003532:	e00b      	b.n	800354c <HAL_RCC_OscConfig+0xd4>
 8003534:	4b6b      	ldr	r3, [pc, #428]	@ (80036e4 <HAL_RCC_OscConfig+0x26c>)
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	4a6a      	ldr	r2, [pc, #424]	@ (80036e4 <HAL_RCC_OscConfig+0x26c>)
 800353a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800353e:	6013      	str	r3, [r2, #0]
 8003540:	4b68      	ldr	r3, [pc, #416]	@ (80036e4 <HAL_RCC_OscConfig+0x26c>)
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	4a67      	ldr	r2, [pc, #412]	@ (80036e4 <HAL_RCC_OscConfig+0x26c>)
 8003546:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800354a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	685b      	ldr	r3, [r3, #4]
 8003550:	2b00      	cmp	r3, #0
 8003552:	d013      	beq.n	800357c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003554:	f7fd ff40 	bl	80013d8 <HAL_GetTick>
 8003558:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800355a:	e008      	b.n	800356e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800355c:	f7fd ff3c 	bl	80013d8 <HAL_GetTick>
 8003560:	4602      	mov	r2, r0
 8003562:	693b      	ldr	r3, [r7, #16]
 8003564:	1ad3      	subs	r3, r2, r3
 8003566:	2b64      	cmp	r3, #100	@ 0x64
 8003568:	d901      	bls.n	800356e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800356a:	2303      	movs	r3, #3
 800356c:	e200      	b.n	8003970 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800356e:	4b5d      	ldr	r3, [pc, #372]	@ (80036e4 <HAL_RCC_OscConfig+0x26c>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003576:	2b00      	cmp	r3, #0
 8003578:	d0f0      	beq.n	800355c <HAL_RCC_OscConfig+0xe4>
 800357a:	e014      	b.n	80035a6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800357c:	f7fd ff2c 	bl	80013d8 <HAL_GetTick>
 8003580:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003582:	e008      	b.n	8003596 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003584:	f7fd ff28 	bl	80013d8 <HAL_GetTick>
 8003588:	4602      	mov	r2, r0
 800358a:	693b      	ldr	r3, [r7, #16]
 800358c:	1ad3      	subs	r3, r2, r3
 800358e:	2b64      	cmp	r3, #100	@ 0x64
 8003590:	d901      	bls.n	8003596 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003592:	2303      	movs	r3, #3
 8003594:	e1ec      	b.n	8003970 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003596:	4b53      	ldr	r3, [pc, #332]	@ (80036e4 <HAL_RCC_OscConfig+0x26c>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d1f0      	bne.n	8003584 <HAL_RCC_OscConfig+0x10c>
 80035a2:	e000      	b.n	80035a6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f003 0302 	and.w	r3, r3, #2
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d063      	beq.n	800367a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80035b2:	4b4c      	ldr	r3, [pc, #304]	@ (80036e4 <HAL_RCC_OscConfig+0x26c>)
 80035b4:	685b      	ldr	r3, [r3, #4]
 80035b6:	f003 030c 	and.w	r3, r3, #12
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d00b      	beq.n	80035d6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80035be:	4b49      	ldr	r3, [pc, #292]	@ (80036e4 <HAL_RCC_OscConfig+0x26c>)
 80035c0:	685b      	ldr	r3, [r3, #4]
 80035c2:	f003 030c 	and.w	r3, r3, #12
 80035c6:	2b08      	cmp	r3, #8
 80035c8:	d11c      	bne.n	8003604 <HAL_RCC_OscConfig+0x18c>
 80035ca:	4b46      	ldr	r3, [pc, #280]	@ (80036e4 <HAL_RCC_OscConfig+0x26c>)
 80035cc:	685b      	ldr	r3, [r3, #4]
 80035ce:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d116      	bne.n	8003604 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80035d6:	4b43      	ldr	r3, [pc, #268]	@ (80036e4 <HAL_RCC_OscConfig+0x26c>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f003 0302 	and.w	r3, r3, #2
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d005      	beq.n	80035ee <HAL_RCC_OscConfig+0x176>
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	691b      	ldr	r3, [r3, #16]
 80035e6:	2b01      	cmp	r3, #1
 80035e8:	d001      	beq.n	80035ee <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80035ea:	2301      	movs	r3, #1
 80035ec:	e1c0      	b.n	8003970 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035ee:	4b3d      	ldr	r3, [pc, #244]	@ (80036e4 <HAL_RCC_OscConfig+0x26c>)
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	695b      	ldr	r3, [r3, #20]
 80035fa:	00db      	lsls	r3, r3, #3
 80035fc:	4939      	ldr	r1, [pc, #228]	@ (80036e4 <HAL_RCC_OscConfig+0x26c>)
 80035fe:	4313      	orrs	r3, r2
 8003600:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003602:	e03a      	b.n	800367a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	691b      	ldr	r3, [r3, #16]
 8003608:	2b00      	cmp	r3, #0
 800360a:	d020      	beq.n	800364e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800360c:	4b36      	ldr	r3, [pc, #216]	@ (80036e8 <HAL_RCC_OscConfig+0x270>)
 800360e:	2201      	movs	r2, #1
 8003610:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003612:	f7fd fee1 	bl	80013d8 <HAL_GetTick>
 8003616:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003618:	e008      	b.n	800362c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800361a:	f7fd fedd 	bl	80013d8 <HAL_GetTick>
 800361e:	4602      	mov	r2, r0
 8003620:	693b      	ldr	r3, [r7, #16]
 8003622:	1ad3      	subs	r3, r2, r3
 8003624:	2b02      	cmp	r3, #2
 8003626:	d901      	bls.n	800362c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003628:	2303      	movs	r3, #3
 800362a:	e1a1      	b.n	8003970 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800362c:	4b2d      	ldr	r3, [pc, #180]	@ (80036e4 <HAL_RCC_OscConfig+0x26c>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f003 0302 	and.w	r3, r3, #2
 8003634:	2b00      	cmp	r3, #0
 8003636:	d0f0      	beq.n	800361a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003638:	4b2a      	ldr	r3, [pc, #168]	@ (80036e4 <HAL_RCC_OscConfig+0x26c>)
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	695b      	ldr	r3, [r3, #20]
 8003644:	00db      	lsls	r3, r3, #3
 8003646:	4927      	ldr	r1, [pc, #156]	@ (80036e4 <HAL_RCC_OscConfig+0x26c>)
 8003648:	4313      	orrs	r3, r2
 800364a:	600b      	str	r3, [r1, #0]
 800364c:	e015      	b.n	800367a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800364e:	4b26      	ldr	r3, [pc, #152]	@ (80036e8 <HAL_RCC_OscConfig+0x270>)
 8003650:	2200      	movs	r2, #0
 8003652:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003654:	f7fd fec0 	bl	80013d8 <HAL_GetTick>
 8003658:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800365a:	e008      	b.n	800366e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800365c:	f7fd febc 	bl	80013d8 <HAL_GetTick>
 8003660:	4602      	mov	r2, r0
 8003662:	693b      	ldr	r3, [r7, #16]
 8003664:	1ad3      	subs	r3, r2, r3
 8003666:	2b02      	cmp	r3, #2
 8003668:	d901      	bls.n	800366e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800366a:	2303      	movs	r3, #3
 800366c:	e180      	b.n	8003970 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800366e:	4b1d      	ldr	r3, [pc, #116]	@ (80036e4 <HAL_RCC_OscConfig+0x26c>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f003 0302 	and.w	r3, r3, #2
 8003676:	2b00      	cmp	r3, #0
 8003678:	d1f0      	bne.n	800365c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f003 0308 	and.w	r3, r3, #8
 8003682:	2b00      	cmp	r3, #0
 8003684:	d03a      	beq.n	80036fc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	699b      	ldr	r3, [r3, #24]
 800368a:	2b00      	cmp	r3, #0
 800368c:	d019      	beq.n	80036c2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800368e:	4b17      	ldr	r3, [pc, #92]	@ (80036ec <HAL_RCC_OscConfig+0x274>)
 8003690:	2201      	movs	r2, #1
 8003692:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003694:	f7fd fea0 	bl	80013d8 <HAL_GetTick>
 8003698:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800369a:	e008      	b.n	80036ae <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800369c:	f7fd fe9c 	bl	80013d8 <HAL_GetTick>
 80036a0:	4602      	mov	r2, r0
 80036a2:	693b      	ldr	r3, [r7, #16]
 80036a4:	1ad3      	subs	r3, r2, r3
 80036a6:	2b02      	cmp	r3, #2
 80036a8:	d901      	bls.n	80036ae <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80036aa:	2303      	movs	r3, #3
 80036ac:	e160      	b.n	8003970 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036ae:	4b0d      	ldr	r3, [pc, #52]	@ (80036e4 <HAL_RCC_OscConfig+0x26c>)
 80036b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036b2:	f003 0302 	and.w	r3, r3, #2
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d0f0      	beq.n	800369c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80036ba:	2001      	movs	r0, #1
 80036bc:	f000 fa9c 	bl	8003bf8 <RCC_Delay>
 80036c0:	e01c      	b.n	80036fc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80036c2:	4b0a      	ldr	r3, [pc, #40]	@ (80036ec <HAL_RCC_OscConfig+0x274>)
 80036c4:	2200      	movs	r2, #0
 80036c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036c8:	f7fd fe86 	bl	80013d8 <HAL_GetTick>
 80036cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80036ce:	e00f      	b.n	80036f0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80036d0:	f7fd fe82 	bl	80013d8 <HAL_GetTick>
 80036d4:	4602      	mov	r2, r0
 80036d6:	693b      	ldr	r3, [r7, #16]
 80036d8:	1ad3      	subs	r3, r2, r3
 80036da:	2b02      	cmp	r3, #2
 80036dc:	d908      	bls.n	80036f0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80036de:	2303      	movs	r3, #3
 80036e0:	e146      	b.n	8003970 <HAL_RCC_OscConfig+0x4f8>
 80036e2:	bf00      	nop
 80036e4:	40021000 	.word	0x40021000
 80036e8:	42420000 	.word	0x42420000
 80036ec:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80036f0:	4b92      	ldr	r3, [pc, #584]	@ (800393c <HAL_RCC_OscConfig+0x4c4>)
 80036f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036f4:	f003 0302 	and.w	r3, r3, #2
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d1e9      	bne.n	80036d0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f003 0304 	and.w	r3, r3, #4
 8003704:	2b00      	cmp	r3, #0
 8003706:	f000 80a6 	beq.w	8003856 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800370a:	2300      	movs	r3, #0
 800370c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800370e:	4b8b      	ldr	r3, [pc, #556]	@ (800393c <HAL_RCC_OscConfig+0x4c4>)
 8003710:	69db      	ldr	r3, [r3, #28]
 8003712:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003716:	2b00      	cmp	r3, #0
 8003718:	d10d      	bne.n	8003736 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800371a:	4b88      	ldr	r3, [pc, #544]	@ (800393c <HAL_RCC_OscConfig+0x4c4>)
 800371c:	69db      	ldr	r3, [r3, #28]
 800371e:	4a87      	ldr	r2, [pc, #540]	@ (800393c <HAL_RCC_OscConfig+0x4c4>)
 8003720:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003724:	61d3      	str	r3, [r2, #28]
 8003726:	4b85      	ldr	r3, [pc, #532]	@ (800393c <HAL_RCC_OscConfig+0x4c4>)
 8003728:	69db      	ldr	r3, [r3, #28]
 800372a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800372e:	60bb      	str	r3, [r7, #8]
 8003730:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003732:	2301      	movs	r3, #1
 8003734:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003736:	4b82      	ldr	r3, [pc, #520]	@ (8003940 <HAL_RCC_OscConfig+0x4c8>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800373e:	2b00      	cmp	r3, #0
 8003740:	d118      	bne.n	8003774 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003742:	4b7f      	ldr	r3, [pc, #508]	@ (8003940 <HAL_RCC_OscConfig+0x4c8>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	4a7e      	ldr	r2, [pc, #504]	@ (8003940 <HAL_RCC_OscConfig+0x4c8>)
 8003748:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800374c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800374e:	f7fd fe43 	bl	80013d8 <HAL_GetTick>
 8003752:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003754:	e008      	b.n	8003768 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003756:	f7fd fe3f 	bl	80013d8 <HAL_GetTick>
 800375a:	4602      	mov	r2, r0
 800375c:	693b      	ldr	r3, [r7, #16]
 800375e:	1ad3      	subs	r3, r2, r3
 8003760:	2b64      	cmp	r3, #100	@ 0x64
 8003762:	d901      	bls.n	8003768 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003764:	2303      	movs	r3, #3
 8003766:	e103      	b.n	8003970 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003768:	4b75      	ldr	r3, [pc, #468]	@ (8003940 <HAL_RCC_OscConfig+0x4c8>)
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003770:	2b00      	cmp	r3, #0
 8003772:	d0f0      	beq.n	8003756 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	68db      	ldr	r3, [r3, #12]
 8003778:	2b01      	cmp	r3, #1
 800377a:	d106      	bne.n	800378a <HAL_RCC_OscConfig+0x312>
 800377c:	4b6f      	ldr	r3, [pc, #444]	@ (800393c <HAL_RCC_OscConfig+0x4c4>)
 800377e:	6a1b      	ldr	r3, [r3, #32]
 8003780:	4a6e      	ldr	r2, [pc, #440]	@ (800393c <HAL_RCC_OscConfig+0x4c4>)
 8003782:	f043 0301 	orr.w	r3, r3, #1
 8003786:	6213      	str	r3, [r2, #32]
 8003788:	e02d      	b.n	80037e6 <HAL_RCC_OscConfig+0x36e>
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	68db      	ldr	r3, [r3, #12]
 800378e:	2b00      	cmp	r3, #0
 8003790:	d10c      	bne.n	80037ac <HAL_RCC_OscConfig+0x334>
 8003792:	4b6a      	ldr	r3, [pc, #424]	@ (800393c <HAL_RCC_OscConfig+0x4c4>)
 8003794:	6a1b      	ldr	r3, [r3, #32]
 8003796:	4a69      	ldr	r2, [pc, #420]	@ (800393c <HAL_RCC_OscConfig+0x4c4>)
 8003798:	f023 0301 	bic.w	r3, r3, #1
 800379c:	6213      	str	r3, [r2, #32]
 800379e:	4b67      	ldr	r3, [pc, #412]	@ (800393c <HAL_RCC_OscConfig+0x4c4>)
 80037a0:	6a1b      	ldr	r3, [r3, #32]
 80037a2:	4a66      	ldr	r2, [pc, #408]	@ (800393c <HAL_RCC_OscConfig+0x4c4>)
 80037a4:	f023 0304 	bic.w	r3, r3, #4
 80037a8:	6213      	str	r3, [r2, #32]
 80037aa:	e01c      	b.n	80037e6 <HAL_RCC_OscConfig+0x36e>
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	68db      	ldr	r3, [r3, #12]
 80037b0:	2b05      	cmp	r3, #5
 80037b2:	d10c      	bne.n	80037ce <HAL_RCC_OscConfig+0x356>
 80037b4:	4b61      	ldr	r3, [pc, #388]	@ (800393c <HAL_RCC_OscConfig+0x4c4>)
 80037b6:	6a1b      	ldr	r3, [r3, #32]
 80037b8:	4a60      	ldr	r2, [pc, #384]	@ (800393c <HAL_RCC_OscConfig+0x4c4>)
 80037ba:	f043 0304 	orr.w	r3, r3, #4
 80037be:	6213      	str	r3, [r2, #32]
 80037c0:	4b5e      	ldr	r3, [pc, #376]	@ (800393c <HAL_RCC_OscConfig+0x4c4>)
 80037c2:	6a1b      	ldr	r3, [r3, #32]
 80037c4:	4a5d      	ldr	r2, [pc, #372]	@ (800393c <HAL_RCC_OscConfig+0x4c4>)
 80037c6:	f043 0301 	orr.w	r3, r3, #1
 80037ca:	6213      	str	r3, [r2, #32]
 80037cc:	e00b      	b.n	80037e6 <HAL_RCC_OscConfig+0x36e>
 80037ce:	4b5b      	ldr	r3, [pc, #364]	@ (800393c <HAL_RCC_OscConfig+0x4c4>)
 80037d0:	6a1b      	ldr	r3, [r3, #32]
 80037d2:	4a5a      	ldr	r2, [pc, #360]	@ (800393c <HAL_RCC_OscConfig+0x4c4>)
 80037d4:	f023 0301 	bic.w	r3, r3, #1
 80037d8:	6213      	str	r3, [r2, #32]
 80037da:	4b58      	ldr	r3, [pc, #352]	@ (800393c <HAL_RCC_OscConfig+0x4c4>)
 80037dc:	6a1b      	ldr	r3, [r3, #32]
 80037de:	4a57      	ldr	r2, [pc, #348]	@ (800393c <HAL_RCC_OscConfig+0x4c4>)
 80037e0:	f023 0304 	bic.w	r3, r3, #4
 80037e4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	68db      	ldr	r3, [r3, #12]
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d015      	beq.n	800381a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037ee:	f7fd fdf3 	bl	80013d8 <HAL_GetTick>
 80037f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037f4:	e00a      	b.n	800380c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037f6:	f7fd fdef 	bl	80013d8 <HAL_GetTick>
 80037fa:	4602      	mov	r2, r0
 80037fc:	693b      	ldr	r3, [r7, #16]
 80037fe:	1ad3      	subs	r3, r2, r3
 8003800:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003804:	4293      	cmp	r3, r2
 8003806:	d901      	bls.n	800380c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003808:	2303      	movs	r3, #3
 800380a:	e0b1      	b.n	8003970 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800380c:	4b4b      	ldr	r3, [pc, #300]	@ (800393c <HAL_RCC_OscConfig+0x4c4>)
 800380e:	6a1b      	ldr	r3, [r3, #32]
 8003810:	f003 0302 	and.w	r3, r3, #2
 8003814:	2b00      	cmp	r3, #0
 8003816:	d0ee      	beq.n	80037f6 <HAL_RCC_OscConfig+0x37e>
 8003818:	e014      	b.n	8003844 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800381a:	f7fd fddd 	bl	80013d8 <HAL_GetTick>
 800381e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003820:	e00a      	b.n	8003838 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003822:	f7fd fdd9 	bl	80013d8 <HAL_GetTick>
 8003826:	4602      	mov	r2, r0
 8003828:	693b      	ldr	r3, [r7, #16]
 800382a:	1ad3      	subs	r3, r2, r3
 800382c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003830:	4293      	cmp	r3, r2
 8003832:	d901      	bls.n	8003838 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003834:	2303      	movs	r3, #3
 8003836:	e09b      	b.n	8003970 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003838:	4b40      	ldr	r3, [pc, #256]	@ (800393c <HAL_RCC_OscConfig+0x4c4>)
 800383a:	6a1b      	ldr	r3, [r3, #32]
 800383c:	f003 0302 	and.w	r3, r3, #2
 8003840:	2b00      	cmp	r3, #0
 8003842:	d1ee      	bne.n	8003822 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003844:	7dfb      	ldrb	r3, [r7, #23]
 8003846:	2b01      	cmp	r3, #1
 8003848:	d105      	bne.n	8003856 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800384a:	4b3c      	ldr	r3, [pc, #240]	@ (800393c <HAL_RCC_OscConfig+0x4c4>)
 800384c:	69db      	ldr	r3, [r3, #28]
 800384e:	4a3b      	ldr	r2, [pc, #236]	@ (800393c <HAL_RCC_OscConfig+0x4c4>)
 8003850:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003854:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	69db      	ldr	r3, [r3, #28]
 800385a:	2b00      	cmp	r3, #0
 800385c:	f000 8087 	beq.w	800396e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003860:	4b36      	ldr	r3, [pc, #216]	@ (800393c <HAL_RCC_OscConfig+0x4c4>)
 8003862:	685b      	ldr	r3, [r3, #4]
 8003864:	f003 030c 	and.w	r3, r3, #12
 8003868:	2b08      	cmp	r3, #8
 800386a:	d061      	beq.n	8003930 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	69db      	ldr	r3, [r3, #28]
 8003870:	2b02      	cmp	r3, #2
 8003872:	d146      	bne.n	8003902 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003874:	4b33      	ldr	r3, [pc, #204]	@ (8003944 <HAL_RCC_OscConfig+0x4cc>)
 8003876:	2200      	movs	r2, #0
 8003878:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800387a:	f7fd fdad 	bl	80013d8 <HAL_GetTick>
 800387e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003880:	e008      	b.n	8003894 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003882:	f7fd fda9 	bl	80013d8 <HAL_GetTick>
 8003886:	4602      	mov	r2, r0
 8003888:	693b      	ldr	r3, [r7, #16]
 800388a:	1ad3      	subs	r3, r2, r3
 800388c:	2b02      	cmp	r3, #2
 800388e:	d901      	bls.n	8003894 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003890:	2303      	movs	r3, #3
 8003892:	e06d      	b.n	8003970 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003894:	4b29      	ldr	r3, [pc, #164]	@ (800393c <HAL_RCC_OscConfig+0x4c4>)
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800389c:	2b00      	cmp	r3, #0
 800389e:	d1f0      	bne.n	8003882 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6a1b      	ldr	r3, [r3, #32]
 80038a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80038a8:	d108      	bne.n	80038bc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80038aa:	4b24      	ldr	r3, [pc, #144]	@ (800393c <HAL_RCC_OscConfig+0x4c4>)
 80038ac:	685b      	ldr	r3, [r3, #4]
 80038ae:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	689b      	ldr	r3, [r3, #8]
 80038b6:	4921      	ldr	r1, [pc, #132]	@ (800393c <HAL_RCC_OscConfig+0x4c4>)
 80038b8:	4313      	orrs	r3, r2
 80038ba:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80038bc:	4b1f      	ldr	r3, [pc, #124]	@ (800393c <HAL_RCC_OscConfig+0x4c4>)
 80038be:	685b      	ldr	r3, [r3, #4]
 80038c0:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6a19      	ldr	r1, [r3, #32]
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038cc:	430b      	orrs	r3, r1
 80038ce:	491b      	ldr	r1, [pc, #108]	@ (800393c <HAL_RCC_OscConfig+0x4c4>)
 80038d0:	4313      	orrs	r3, r2
 80038d2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80038d4:	4b1b      	ldr	r3, [pc, #108]	@ (8003944 <HAL_RCC_OscConfig+0x4cc>)
 80038d6:	2201      	movs	r2, #1
 80038d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038da:	f7fd fd7d 	bl	80013d8 <HAL_GetTick>
 80038de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80038e0:	e008      	b.n	80038f4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038e2:	f7fd fd79 	bl	80013d8 <HAL_GetTick>
 80038e6:	4602      	mov	r2, r0
 80038e8:	693b      	ldr	r3, [r7, #16]
 80038ea:	1ad3      	subs	r3, r2, r3
 80038ec:	2b02      	cmp	r3, #2
 80038ee:	d901      	bls.n	80038f4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80038f0:	2303      	movs	r3, #3
 80038f2:	e03d      	b.n	8003970 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80038f4:	4b11      	ldr	r3, [pc, #68]	@ (800393c <HAL_RCC_OscConfig+0x4c4>)
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d0f0      	beq.n	80038e2 <HAL_RCC_OscConfig+0x46a>
 8003900:	e035      	b.n	800396e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003902:	4b10      	ldr	r3, [pc, #64]	@ (8003944 <HAL_RCC_OscConfig+0x4cc>)
 8003904:	2200      	movs	r2, #0
 8003906:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003908:	f7fd fd66 	bl	80013d8 <HAL_GetTick>
 800390c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800390e:	e008      	b.n	8003922 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003910:	f7fd fd62 	bl	80013d8 <HAL_GetTick>
 8003914:	4602      	mov	r2, r0
 8003916:	693b      	ldr	r3, [r7, #16]
 8003918:	1ad3      	subs	r3, r2, r3
 800391a:	2b02      	cmp	r3, #2
 800391c:	d901      	bls.n	8003922 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800391e:	2303      	movs	r3, #3
 8003920:	e026      	b.n	8003970 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003922:	4b06      	ldr	r3, [pc, #24]	@ (800393c <HAL_RCC_OscConfig+0x4c4>)
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800392a:	2b00      	cmp	r3, #0
 800392c:	d1f0      	bne.n	8003910 <HAL_RCC_OscConfig+0x498>
 800392e:	e01e      	b.n	800396e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	69db      	ldr	r3, [r3, #28]
 8003934:	2b01      	cmp	r3, #1
 8003936:	d107      	bne.n	8003948 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003938:	2301      	movs	r3, #1
 800393a:	e019      	b.n	8003970 <HAL_RCC_OscConfig+0x4f8>
 800393c:	40021000 	.word	0x40021000
 8003940:	40007000 	.word	0x40007000
 8003944:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003948:	4b0b      	ldr	r3, [pc, #44]	@ (8003978 <HAL_RCC_OscConfig+0x500>)
 800394a:	685b      	ldr	r3, [r3, #4]
 800394c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6a1b      	ldr	r3, [r3, #32]
 8003958:	429a      	cmp	r2, r3
 800395a:	d106      	bne.n	800396a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003966:	429a      	cmp	r2, r3
 8003968:	d001      	beq.n	800396e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800396a:	2301      	movs	r3, #1
 800396c:	e000      	b.n	8003970 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800396e:	2300      	movs	r3, #0
}
 8003970:	4618      	mov	r0, r3
 8003972:	3718      	adds	r7, #24
 8003974:	46bd      	mov	sp, r7
 8003976:	bd80      	pop	{r7, pc}
 8003978:	40021000 	.word	0x40021000

0800397c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	b084      	sub	sp, #16
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
 8003984:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	2b00      	cmp	r3, #0
 800398a:	d101      	bne.n	8003990 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800398c:	2301      	movs	r3, #1
 800398e:	e0d0      	b.n	8003b32 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003990:	4b6a      	ldr	r3, [pc, #424]	@ (8003b3c <HAL_RCC_ClockConfig+0x1c0>)
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f003 0307 	and.w	r3, r3, #7
 8003998:	683a      	ldr	r2, [r7, #0]
 800399a:	429a      	cmp	r2, r3
 800399c:	d910      	bls.n	80039c0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800399e:	4b67      	ldr	r3, [pc, #412]	@ (8003b3c <HAL_RCC_ClockConfig+0x1c0>)
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f023 0207 	bic.w	r2, r3, #7
 80039a6:	4965      	ldr	r1, [pc, #404]	@ (8003b3c <HAL_RCC_ClockConfig+0x1c0>)
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	4313      	orrs	r3, r2
 80039ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80039ae:	4b63      	ldr	r3, [pc, #396]	@ (8003b3c <HAL_RCC_ClockConfig+0x1c0>)
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f003 0307 	and.w	r3, r3, #7
 80039b6:	683a      	ldr	r2, [r7, #0]
 80039b8:	429a      	cmp	r2, r3
 80039ba:	d001      	beq.n	80039c0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80039bc:	2301      	movs	r3, #1
 80039be:	e0b8      	b.n	8003b32 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f003 0302 	and.w	r3, r3, #2
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d020      	beq.n	8003a0e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f003 0304 	and.w	r3, r3, #4
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d005      	beq.n	80039e4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80039d8:	4b59      	ldr	r3, [pc, #356]	@ (8003b40 <HAL_RCC_ClockConfig+0x1c4>)
 80039da:	685b      	ldr	r3, [r3, #4]
 80039dc:	4a58      	ldr	r2, [pc, #352]	@ (8003b40 <HAL_RCC_ClockConfig+0x1c4>)
 80039de:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80039e2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f003 0308 	and.w	r3, r3, #8
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d005      	beq.n	80039fc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80039f0:	4b53      	ldr	r3, [pc, #332]	@ (8003b40 <HAL_RCC_ClockConfig+0x1c4>)
 80039f2:	685b      	ldr	r3, [r3, #4]
 80039f4:	4a52      	ldr	r2, [pc, #328]	@ (8003b40 <HAL_RCC_ClockConfig+0x1c4>)
 80039f6:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80039fa:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80039fc:	4b50      	ldr	r3, [pc, #320]	@ (8003b40 <HAL_RCC_ClockConfig+0x1c4>)
 80039fe:	685b      	ldr	r3, [r3, #4]
 8003a00:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	689b      	ldr	r3, [r3, #8]
 8003a08:	494d      	ldr	r1, [pc, #308]	@ (8003b40 <HAL_RCC_ClockConfig+0x1c4>)
 8003a0a:	4313      	orrs	r3, r2
 8003a0c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f003 0301 	and.w	r3, r3, #1
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d040      	beq.n	8003a9c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	685b      	ldr	r3, [r3, #4]
 8003a1e:	2b01      	cmp	r3, #1
 8003a20:	d107      	bne.n	8003a32 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a22:	4b47      	ldr	r3, [pc, #284]	@ (8003b40 <HAL_RCC_ClockConfig+0x1c4>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d115      	bne.n	8003a5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a2e:	2301      	movs	r3, #1
 8003a30:	e07f      	b.n	8003b32 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	685b      	ldr	r3, [r3, #4]
 8003a36:	2b02      	cmp	r3, #2
 8003a38:	d107      	bne.n	8003a4a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a3a:	4b41      	ldr	r3, [pc, #260]	@ (8003b40 <HAL_RCC_ClockConfig+0x1c4>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d109      	bne.n	8003a5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a46:	2301      	movs	r3, #1
 8003a48:	e073      	b.n	8003b32 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a4a:	4b3d      	ldr	r3, [pc, #244]	@ (8003b40 <HAL_RCC_ClockConfig+0x1c4>)
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f003 0302 	and.w	r3, r3, #2
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d101      	bne.n	8003a5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a56:	2301      	movs	r3, #1
 8003a58:	e06b      	b.n	8003b32 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003a5a:	4b39      	ldr	r3, [pc, #228]	@ (8003b40 <HAL_RCC_ClockConfig+0x1c4>)
 8003a5c:	685b      	ldr	r3, [r3, #4]
 8003a5e:	f023 0203 	bic.w	r2, r3, #3
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	685b      	ldr	r3, [r3, #4]
 8003a66:	4936      	ldr	r1, [pc, #216]	@ (8003b40 <HAL_RCC_ClockConfig+0x1c4>)
 8003a68:	4313      	orrs	r3, r2
 8003a6a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003a6c:	f7fd fcb4 	bl	80013d8 <HAL_GetTick>
 8003a70:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a72:	e00a      	b.n	8003a8a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a74:	f7fd fcb0 	bl	80013d8 <HAL_GetTick>
 8003a78:	4602      	mov	r2, r0
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	1ad3      	subs	r3, r2, r3
 8003a7e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d901      	bls.n	8003a8a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003a86:	2303      	movs	r3, #3
 8003a88:	e053      	b.n	8003b32 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a8a:	4b2d      	ldr	r3, [pc, #180]	@ (8003b40 <HAL_RCC_ClockConfig+0x1c4>)
 8003a8c:	685b      	ldr	r3, [r3, #4]
 8003a8e:	f003 020c 	and.w	r2, r3, #12
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	685b      	ldr	r3, [r3, #4]
 8003a96:	009b      	lsls	r3, r3, #2
 8003a98:	429a      	cmp	r2, r3
 8003a9a:	d1eb      	bne.n	8003a74 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003a9c:	4b27      	ldr	r3, [pc, #156]	@ (8003b3c <HAL_RCC_ClockConfig+0x1c0>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f003 0307 	and.w	r3, r3, #7
 8003aa4:	683a      	ldr	r2, [r7, #0]
 8003aa6:	429a      	cmp	r2, r3
 8003aa8:	d210      	bcs.n	8003acc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003aaa:	4b24      	ldr	r3, [pc, #144]	@ (8003b3c <HAL_RCC_ClockConfig+0x1c0>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f023 0207 	bic.w	r2, r3, #7
 8003ab2:	4922      	ldr	r1, [pc, #136]	@ (8003b3c <HAL_RCC_ClockConfig+0x1c0>)
 8003ab4:	683b      	ldr	r3, [r7, #0]
 8003ab6:	4313      	orrs	r3, r2
 8003ab8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003aba:	4b20      	ldr	r3, [pc, #128]	@ (8003b3c <HAL_RCC_ClockConfig+0x1c0>)
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f003 0307 	and.w	r3, r3, #7
 8003ac2:	683a      	ldr	r2, [r7, #0]
 8003ac4:	429a      	cmp	r2, r3
 8003ac6:	d001      	beq.n	8003acc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003ac8:	2301      	movs	r3, #1
 8003aca:	e032      	b.n	8003b32 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f003 0304 	and.w	r3, r3, #4
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d008      	beq.n	8003aea <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ad8:	4b19      	ldr	r3, [pc, #100]	@ (8003b40 <HAL_RCC_ClockConfig+0x1c4>)
 8003ada:	685b      	ldr	r3, [r3, #4]
 8003adc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	68db      	ldr	r3, [r3, #12]
 8003ae4:	4916      	ldr	r1, [pc, #88]	@ (8003b40 <HAL_RCC_ClockConfig+0x1c4>)
 8003ae6:	4313      	orrs	r3, r2
 8003ae8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f003 0308 	and.w	r3, r3, #8
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d009      	beq.n	8003b0a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003af6:	4b12      	ldr	r3, [pc, #72]	@ (8003b40 <HAL_RCC_ClockConfig+0x1c4>)
 8003af8:	685b      	ldr	r3, [r3, #4]
 8003afa:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	691b      	ldr	r3, [r3, #16]
 8003b02:	00db      	lsls	r3, r3, #3
 8003b04:	490e      	ldr	r1, [pc, #56]	@ (8003b40 <HAL_RCC_ClockConfig+0x1c4>)
 8003b06:	4313      	orrs	r3, r2
 8003b08:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003b0a:	f000 f821 	bl	8003b50 <HAL_RCC_GetSysClockFreq>
 8003b0e:	4602      	mov	r2, r0
 8003b10:	4b0b      	ldr	r3, [pc, #44]	@ (8003b40 <HAL_RCC_ClockConfig+0x1c4>)
 8003b12:	685b      	ldr	r3, [r3, #4]
 8003b14:	091b      	lsrs	r3, r3, #4
 8003b16:	f003 030f 	and.w	r3, r3, #15
 8003b1a:	490a      	ldr	r1, [pc, #40]	@ (8003b44 <HAL_RCC_ClockConfig+0x1c8>)
 8003b1c:	5ccb      	ldrb	r3, [r1, r3]
 8003b1e:	fa22 f303 	lsr.w	r3, r2, r3
 8003b22:	4a09      	ldr	r2, [pc, #36]	@ (8003b48 <HAL_RCC_ClockConfig+0x1cc>)
 8003b24:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003b26:	4b09      	ldr	r3, [pc, #36]	@ (8003b4c <HAL_RCC_ClockConfig+0x1d0>)
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	f7fd fc12 	bl	8001354 <HAL_InitTick>

  return HAL_OK;
 8003b30:	2300      	movs	r3, #0
}
 8003b32:	4618      	mov	r0, r3
 8003b34:	3710      	adds	r7, #16
 8003b36:	46bd      	mov	sp, r7
 8003b38:	bd80      	pop	{r7, pc}
 8003b3a:	bf00      	nop
 8003b3c:	40022000 	.word	0x40022000
 8003b40:	40021000 	.word	0x40021000
 8003b44:	08008e58 	.word	0x08008e58
 8003b48:	20000000 	.word	0x20000000
 8003b4c:	20000004 	.word	0x20000004

08003b50 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b50:	b480      	push	{r7}
 8003b52:	b087      	sub	sp, #28
 8003b54:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003b56:	2300      	movs	r3, #0
 8003b58:	60fb      	str	r3, [r7, #12]
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	60bb      	str	r3, [r7, #8]
 8003b5e:	2300      	movs	r3, #0
 8003b60:	617b      	str	r3, [r7, #20]
 8003b62:	2300      	movs	r3, #0
 8003b64:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003b66:	2300      	movs	r3, #0
 8003b68:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003b6a:	4b1e      	ldr	r3, [pc, #120]	@ (8003be4 <HAL_RCC_GetSysClockFreq+0x94>)
 8003b6c:	685b      	ldr	r3, [r3, #4]
 8003b6e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	f003 030c 	and.w	r3, r3, #12
 8003b76:	2b04      	cmp	r3, #4
 8003b78:	d002      	beq.n	8003b80 <HAL_RCC_GetSysClockFreq+0x30>
 8003b7a:	2b08      	cmp	r3, #8
 8003b7c:	d003      	beq.n	8003b86 <HAL_RCC_GetSysClockFreq+0x36>
 8003b7e:	e027      	b.n	8003bd0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003b80:	4b19      	ldr	r3, [pc, #100]	@ (8003be8 <HAL_RCC_GetSysClockFreq+0x98>)
 8003b82:	613b      	str	r3, [r7, #16]
      break;
 8003b84:	e027      	b.n	8003bd6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	0c9b      	lsrs	r3, r3, #18
 8003b8a:	f003 030f 	and.w	r3, r3, #15
 8003b8e:	4a17      	ldr	r2, [pc, #92]	@ (8003bec <HAL_RCC_GetSysClockFreq+0x9c>)
 8003b90:	5cd3      	ldrb	r3, [r2, r3]
 8003b92:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d010      	beq.n	8003bc0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003b9e:	4b11      	ldr	r3, [pc, #68]	@ (8003be4 <HAL_RCC_GetSysClockFreq+0x94>)
 8003ba0:	685b      	ldr	r3, [r3, #4]
 8003ba2:	0c5b      	lsrs	r3, r3, #17
 8003ba4:	f003 0301 	and.w	r3, r3, #1
 8003ba8:	4a11      	ldr	r2, [pc, #68]	@ (8003bf0 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003baa:	5cd3      	ldrb	r3, [r2, r3]
 8003bac:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	4a0d      	ldr	r2, [pc, #52]	@ (8003be8 <HAL_RCC_GetSysClockFreq+0x98>)
 8003bb2:	fb03 f202 	mul.w	r2, r3, r2
 8003bb6:	68bb      	ldr	r3, [r7, #8]
 8003bb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bbc:	617b      	str	r3, [r7, #20]
 8003bbe:	e004      	b.n	8003bca <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	4a0c      	ldr	r2, [pc, #48]	@ (8003bf4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003bc4:	fb02 f303 	mul.w	r3, r2, r3
 8003bc8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003bca:	697b      	ldr	r3, [r7, #20]
 8003bcc:	613b      	str	r3, [r7, #16]
      break;
 8003bce:	e002      	b.n	8003bd6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003bd0:	4b05      	ldr	r3, [pc, #20]	@ (8003be8 <HAL_RCC_GetSysClockFreq+0x98>)
 8003bd2:	613b      	str	r3, [r7, #16]
      break;
 8003bd4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003bd6:	693b      	ldr	r3, [r7, #16]
}
 8003bd8:	4618      	mov	r0, r3
 8003bda:	371c      	adds	r7, #28
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	bc80      	pop	{r7}
 8003be0:	4770      	bx	lr
 8003be2:	bf00      	nop
 8003be4:	40021000 	.word	0x40021000
 8003be8:	007a1200 	.word	0x007a1200
 8003bec:	08008e68 	.word	0x08008e68
 8003bf0:	08008e78 	.word	0x08008e78
 8003bf4:	003d0900 	.word	0x003d0900

08003bf8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003bf8:	b480      	push	{r7}
 8003bfa:	b085      	sub	sp, #20
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003c00:	4b0a      	ldr	r3, [pc, #40]	@ (8003c2c <RCC_Delay+0x34>)
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	4a0a      	ldr	r2, [pc, #40]	@ (8003c30 <RCC_Delay+0x38>)
 8003c06:	fba2 2303 	umull	r2, r3, r2, r3
 8003c0a:	0a5b      	lsrs	r3, r3, #9
 8003c0c:	687a      	ldr	r2, [r7, #4]
 8003c0e:	fb02 f303 	mul.w	r3, r2, r3
 8003c12:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003c14:	bf00      	nop
  }
  while (Delay --);
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	1e5a      	subs	r2, r3, #1
 8003c1a:	60fa      	str	r2, [r7, #12]
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d1f9      	bne.n	8003c14 <RCC_Delay+0x1c>
}
 8003c20:	bf00      	nop
 8003c22:	bf00      	nop
 8003c24:	3714      	adds	r7, #20
 8003c26:	46bd      	mov	sp, r7
 8003c28:	bc80      	pop	{r7}
 8003c2a:	4770      	bx	lr
 8003c2c:	20000000 	.word	0x20000000
 8003c30:	10624dd3 	.word	0x10624dd3

08003c34 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b086      	sub	sp, #24
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	613b      	str	r3, [r7, #16]
 8003c40:	2300      	movs	r3, #0
 8003c42:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f003 0301 	and.w	r3, r3, #1
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d07d      	beq.n	8003d4c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003c50:	2300      	movs	r3, #0
 8003c52:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c54:	4b4f      	ldr	r3, [pc, #316]	@ (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c56:	69db      	ldr	r3, [r3, #28]
 8003c58:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d10d      	bne.n	8003c7c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c60:	4b4c      	ldr	r3, [pc, #304]	@ (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c62:	69db      	ldr	r3, [r3, #28]
 8003c64:	4a4b      	ldr	r2, [pc, #300]	@ (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c66:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003c6a:	61d3      	str	r3, [r2, #28]
 8003c6c:	4b49      	ldr	r3, [pc, #292]	@ (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c6e:	69db      	ldr	r3, [r3, #28]
 8003c70:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c74:	60bb      	str	r3, [r7, #8]
 8003c76:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c78:	2301      	movs	r3, #1
 8003c7a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c7c:	4b46      	ldr	r3, [pc, #280]	@ (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d118      	bne.n	8003cba <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003c88:	4b43      	ldr	r3, [pc, #268]	@ (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	4a42      	ldr	r2, [pc, #264]	@ (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003c8e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003c92:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c94:	f7fd fba0 	bl	80013d8 <HAL_GetTick>
 8003c98:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c9a:	e008      	b.n	8003cae <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c9c:	f7fd fb9c 	bl	80013d8 <HAL_GetTick>
 8003ca0:	4602      	mov	r2, r0
 8003ca2:	693b      	ldr	r3, [r7, #16]
 8003ca4:	1ad3      	subs	r3, r2, r3
 8003ca6:	2b64      	cmp	r3, #100	@ 0x64
 8003ca8:	d901      	bls.n	8003cae <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003caa:	2303      	movs	r3, #3
 8003cac:	e06d      	b.n	8003d8a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cae:	4b3a      	ldr	r3, [pc, #232]	@ (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d0f0      	beq.n	8003c9c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003cba:	4b36      	ldr	r3, [pc, #216]	@ (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003cbc:	6a1b      	ldr	r3, [r3, #32]
 8003cbe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003cc2:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d02e      	beq.n	8003d28 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	685b      	ldr	r3, [r3, #4]
 8003cce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003cd2:	68fa      	ldr	r2, [r7, #12]
 8003cd4:	429a      	cmp	r2, r3
 8003cd6:	d027      	beq.n	8003d28 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003cd8:	4b2e      	ldr	r3, [pc, #184]	@ (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003cda:	6a1b      	ldr	r3, [r3, #32]
 8003cdc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003ce0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003ce2:	4b2e      	ldr	r3, [pc, #184]	@ (8003d9c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003ce4:	2201      	movs	r2, #1
 8003ce6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003ce8:	4b2c      	ldr	r3, [pc, #176]	@ (8003d9c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003cea:	2200      	movs	r2, #0
 8003cec:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003cee:	4a29      	ldr	r2, [pc, #164]	@ (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	f003 0301 	and.w	r3, r3, #1
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d014      	beq.n	8003d28 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cfe:	f7fd fb6b 	bl	80013d8 <HAL_GetTick>
 8003d02:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d04:	e00a      	b.n	8003d1c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d06:	f7fd fb67 	bl	80013d8 <HAL_GetTick>
 8003d0a:	4602      	mov	r2, r0
 8003d0c:	693b      	ldr	r3, [r7, #16]
 8003d0e:	1ad3      	subs	r3, r2, r3
 8003d10:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d14:	4293      	cmp	r3, r2
 8003d16:	d901      	bls.n	8003d1c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003d18:	2303      	movs	r3, #3
 8003d1a:	e036      	b.n	8003d8a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d1c:	4b1d      	ldr	r3, [pc, #116]	@ (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d1e:	6a1b      	ldr	r3, [r3, #32]
 8003d20:	f003 0302 	and.w	r3, r3, #2
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d0ee      	beq.n	8003d06 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003d28:	4b1a      	ldr	r3, [pc, #104]	@ (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d2a:	6a1b      	ldr	r3, [r3, #32]
 8003d2c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	685b      	ldr	r3, [r3, #4]
 8003d34:	4917      	ldr	r1, [pc, #92]	@ (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d36:	4313      	orrs	r3, r2
 8003d38:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003d3a:	7dfb      	ldrb	r3, [r7, #23]
 8003d3c:	2b01      	cmp	r3, #1
 8003d3e:	d105      	bne.n	8003d4c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d40:	4b14      	ldr	r3, [pc, #80]	@ (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d42:	69db      	ldr	r3, [r3, #28]
 8003d44:	4a13      	ldr	r2, [pc, #76]	@ (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d46:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003d4a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f003 0302 	and.w	r3, r3, #2
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d008      	beq.n	8003d6a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003d58:	4b0e      	ldr	r3, [pc, #56]	@ (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d5a:	685b      	ldr	r3, [r3, #4]
 8003d5c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	689b      	ldr	r3, [r3, #8]
 8003d64:	490b      	ldr	r1, [pc, #44]	@ (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d66:	4313      	orrs	r3, r2
 8003d68:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f003 0310 	and.w	r3, r3, #16
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d008      	beq.n	8003d88 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003d76:	4b07      	ldr	r3, [pc, #28]	@ (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d78:	685b      	ldr	r3, [r3, #4]
 8003d7a:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	68db      	ldr	r3, [r3, #12]
 8003d82:	4904      	ldr	r1, [pc, #16]	@ (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d84:	4313      	orrs	r3, r2
 8003d86:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003d88:	2300      	movs	r3, #0
}
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	3718      	adds	r7, #24
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	bd80      	pop	{r7, pc}
 8003d92:	bf00      	nop
 8003d94:	40021000 	.word	0x40021000
 8003d98:	40007000 	.word	0x40007000
 8003d9c:	42420440 	.word	0x42420440

08003da0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003da0:	b580      	push	{r7, lr}
 8003da2:	b082      	sub	sp, #8
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d101      	bne.n	8003db2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003dae:	2301      	movs	r3, #1
 8003db0:	e041      	b.n	8003e36 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003db8:	b2db      	uxtb	r3, r3
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d106      	bne.n	8003dcc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003dc6:	6878      	ldr	r0, [r7, #4]
 8003dc8:	f7fd fa0a 	bl	80011e0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2202      	movs	r2, #2
 8003dd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681a      	ldr	r2, [r3, #0]
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	3304      	adds	r3, #4
 8003ddc:	4619      	mov	r1, r3
 8003dde:	4610      	mov	r0, r2
 8003de0:	f000 facc 	bl	800437c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2201      	movs	r2, #1
 8003de8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2201      	movs	r2, #1
 8003df0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2201      	movs	r2, #1
 8003df8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2201      	movs	r2, #1
 8003e00:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2201      	movs	r2, #1
 8003e08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2201      	movs	r2, #1
 8003e10:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2201      	movs	r2, #1
 8003e18:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2201      	movs	r2, #1
 8003e20:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2201      	movs	r2, #1
 8003e28:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2201      	movs	r2, #1
 8003e30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003e34:	2300      	movs	r3, #0
}
 8003e36:	4618      	mov	r0, r3
 8003e38:	3708      	adds	r7, #8
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	bd80      	pop	{r7, pc}
	...

08003e40 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003e40:	b480      	push	{r7}
 8003e42:	b085      	sub	sp, #20
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003e4e:	b2db      	uxtb	r3, r3
 8003e50:	2b01      	cmp	r3, #1
 8003e52:	d001      	beq.n	8003e58 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003e54:	2301      	movs	r3, #1
 8003e56:	e032      	b.n	8003ebe <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2202      	movs	r2, #2
 8003e5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	4a18      	ldr	r2, [pc, #96]	@ (8003ec8 <HAL_TIM_Base_Start+0x88>)
 8003e66:	4293      	cmp	r3, r2
 8003e68:	d00e      	beq.n	8003e88 <HAL_TIM_Base_Start+0x48>
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e72:	d009      	beq.n	8003e88 <HAL_TIM_Base_Start+0x48>
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	4a14      	ldr	r2, [pc, #80]	@ (8003ecc <HAL_TIM_Base_Start+0x8c>)
 8003e7a:	4293      	cmp	r3, r2
 8003e7c:	d004      	beq.n	8003e88 <HAL_TIM_Base_Start+0x48>
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	4a13      	ldr	r2, [pc, #76]	@ (8003ed0 <HAL_TIM_Base_Start+0x90>)
 8003e84:	4293      	cmp	r3, r2
 8003e86:	d111      	bne.n	8003eac <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	689b      	ldr	r3, [r3, #8]
 8003e8e:	f003 0307 	and.w	r3, r3, #7
 8003e92:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	2b06      	cmp	r3, #6
 8003e98:	d010      	beq.n	8003ebc <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	681a      	ldr	r2, [r3, #0]
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f042 0201 	orr.w	r2, r2, #1
 8003ea8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003eaa:	e007      	b.n	8003ebc <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	681a      	ldr	r2, [r3, #0]
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f042 0201 	orr.w	r2, r2, #1
 8003eba:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003ebc:	2300      	movs	r3, #0
}
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	3714      	adds	r7, #20
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	bc80      	pop	{r7}
 8003ec6:	4770      	bx	lr
 8003ec8:	40012c00 	.word	0x40012c00
 8003ecc:	40000400 	.word	0x40000400
 8003ed0:	40000800 	.word	0x40000800

08003ed4 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8003ed4:	b480      	push	{r7}
 8003ed6:	b083      	sub	sp, #12
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	6a1a      	ldr	r2, [r3, #32]
 8003ee2:	f241 1311 	movw	r3, #4369	@ 0x1111
 8003ee6:	4013      	ands	r3, r2
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d10f      	bne.n	8003f0c <HAL_TIM_Base_Stop+0x38>
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	6a1a      	ldr	r2, [r3, #32]
 8003ef2:	f240 4344 	movw	r3, #1092	@ 0x444
 8003ef6:	4013      	ands	r3, r2
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d107      	bne.n	8003f0c <HAL_TIM_Base_Stop+0x38>
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	681a      	ldr	r2, [r3, #0]
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f022 0201 	bic.w	r2, r2, #1
 8003f0a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2201      	movs	r2, #1
 8003f10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8003f14:	2300      	movs	r3, #0
}
 8003f16:	4618      	mov	r0, r3
 8003f18:	370c      	adds	r7, #12
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	bc80      	pop	{r7}
 8003f1e:	4770      	bx	lr

08003f20 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003f20:	b480      	push	{r7}
 8003f22:	b085      	sub	sp, #20
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003f2e:	b2db      	uxtb	r3, r3
 8003f30:	2b01      	cmp	r3, #1
 8003f32:	d001      	beq.n	8003f38 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003f34:	2301      	movs	r3, #1
 8003f36:	e03a      	b.n	8003fae <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2202      	movs	r2, #2
 8003f3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	68da      	ldr	r2, [r3, #12]
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f042 0201 	orr.w	r2, r2, #1
 8003f4e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	4a18      	ldr	r2, [pc, #96]	@ (8003fb8 <HAL_TIM_Base_Start_IT+0x98>)
 8003f56:	4293      	cmp	r3, r2
 8003f58:	d00e      	beq.n	8003f78 <HAL_TIM_Base_Start_IT+0x58>
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003f62:	d009      	beq.n	8003f78 <HAL_TIM_Base_Start_IT+0x58>
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	4a14      	ldr	r2, [pc, #80]	@ (8003fbc <HAL_TIM_Base_Start_IT+0x9c>)
 8003f6a:	4293      	cmp	r3, r2
 8003f6c:	d004      	beq.n	8003f78 <HAL_TIM_Base_Start_IT+0x58>
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	4a13      	ldr	r2, [pc, #76]	@ (8003fc0 <HAL_TIM_Base_Start_IT+0xa0>)
 8003f74:	4293      	cmp	r3, r2
 8003f76:	d111      	bne.n	8003f9c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	689b      	ldr	r3, [r3, #8]
 8003f7e:	f003 0307 	and.w	r3, r3, #7
 8003f82:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	2b06      	cmp	r3, #6
 8003f88:	d010      	beq.n	8003fac <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	681a      	ldr	r2, [r3, #0]
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f042 0201 	orr.w	r2, r2, #1
 8003f98:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f9a:	e007      	b.n	8003fac <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	681a      	ldr	r2, [r3, #0]
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f042 0201 	orr.w	r2, r2, #1
 8003faa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003fac:	2300      	movs	r3, #0
}
 8003fae:	4618      	mov	r0, r3
 8003fb0:	3714      	adds	r7, #20
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	bc80      	pop	{r7}
 8003fb6:	4770      	bx	lr
 8003fb8:	40012c00 	.word	0x40012c00
 8003fbc:	40000400 	.word	0x40000400
 8003fc0:	40000800 	.word	0x40000800

08003fc4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	b084      	sub	sp, #16
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	68db      	ldr	r3, [r3, #12]
 8003fd2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	691b      	ldr	r3, [r3, #16]
 8003fda:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003fdc:	68bb      	ldr	r3, [r7, #8]
 8003fde:	f003 0302 	and.w	r3, r3, #2
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d020      	beq.n	8004028 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	f003 0302 	and.w	r3, r3, #2
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d01b      	beq.n	8004028 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f06f 0202 	mvn.w	r2, #2
 8003ff8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	2201      	movs	r2, #1
 8003ffe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	699b      	ldr	r3, [r3, #24]
 8004006:	f003 0303 	and.w	r3, r3, #3
 800400a:	2b00      	cmp	r3, #0
 800400c:	d003      	beq.n	8004016 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800400e:	6878      	ldr	r0, [r7, #4]
 8004010:	f000 f998 	bl	8004344 <HAL_TIM_IC_CaptureCallback>
 8004014:	e005      	b.n	8004022 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004016:	6878      	ldr	r0, [r7, #4]
 8004018:	f000 f98b 	bl	8004332 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800401c:	6878      	ldr	r0, [r7, #4]
 800401e:	f000 f99a 	bl	8004356 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	2200      	movs	r2, #0
 8004026:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004028:	68bb      	ldr	r3, [r7, #8]
 800402a:	f003 0304 	and.w	r3, r3, #4
 800402e:	2b00      	cmp	r3, #0
 8004030:	d020      	beq.n	8004074 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	f003 0304 	and.w	r3, r3, #4
 8004038:	2b00      	cmp	r3, #0
 800403a:	d01b      	beq.n	8004074 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f06f 0204 	mvn.w	r2, #4
 8004044:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	2202      	movs	r2, #2
 800404a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	699b      	ldr	r3, [r3, #24]
 8004052:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004056:	2b00      	cmp	r3, #0
 8004058:	d003      	beq.n	8004062 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800405a:	6878      	ldr	r0, [r7, #4]
 800405c:	f000 f972 	bl	8004344 <HAL_TIM_IC_CaptureCallback>
 8004060:	e005      	b.n	800406e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004062:	6878      	ldr	r0, [r7, #4]
 8004064:	f000 f965 	bl	8004332 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004068:	6878      	ldr	r0, [r7, #4]
 800406a:	f000 f974 	bl	8004356 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	2200      	movs	r2, #0
 8004072:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004074:	68bb      	ldr	r3, [r7, #8]
 8004076:	f003 0308 	and.w	r3, r3, #8
 800407a:	2b00      	cmp	r3, #0
 800407c:	d020      	beq.n	80040c0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	f003 0308 	and.w	r3, r3, #8
 8004084:	2b00      	cmp	r3, #0
 8004086:	d01b      	beq.n	80040c0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f06f 0208 	mvn.w	r2, #8
 8004090:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	2204      	movs	r2, #4
 8004096:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	69db      	ldr	r3, [r3, #28]
 800409e:	f003 0303 	and.w	r3, r3, #3
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d003      	beq.n	80040ae <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80040a6:	6878      	ldr	r0, [r7, #4]
 80040a8:	f000 f94c 	bl	8004344 <HAL_TIM_IC_CaptureCallback>
 80040ac:	e005      	b.n	80040ba <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80040ae:	6878      	ldr	r0, [r7, #4]
 80040b0:	f000 f93f 	bl	8004332 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040b4:	6878      	ldr	r0, [r7, #4]
 80040b6:	f000 f94e 	bl	8004356 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	2200      	movs	r2, #0
 80040be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80040c0:	68bb      	ldr	r3, [r7, #8]
 80040c2:	f003 0310 	and.w	r3, r3, #16
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d020      	beq.n	800410c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	f003 0310 	and.w	r3, r3, #16
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d01b      	beq.n	800410c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f06f 0210 	mvn.w	r2, #16
 80040dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	2208      	movs	r2, #8
 80040e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	69db      	ldr	r3, [r3, #28]
 80040ea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d003      	beq.n	80040fa <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80040f2:	6878      	ldr	r0, [r7, #4]
 80040f4:	f000 f926 	bl	8004344 <HAL_TIM_IC_CaptureCallback>
 80040f8:	e005      	b.n	8004106 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80040fa:	6878      	ldr	r0, [r7, #4]
 80040fc:	f000 f919 	bl	8004332 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004100:	6878      	ldr	r0, [r7, #4]
 8004102:	f000 f928 	bl	8004356 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	2200      	movs	r2, #0
 800410a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800410c:	68bb      	ldr	r3, [r7, #8]
 800410e:	f003 0301 	and.w	r3, r3, #1
 8004112:	2b00      	cmp	r3, #0
 8004114:	d00c      	beq.n	8004130 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	f003 0301 	and.w	r3, r3, #1
 800411c:	2b00      	cmp	r3, #0
 800411e:	d007      	beq.n	8004130 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f06f 0201 	mvn.w	r2, #1
 8004128:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800412a:	6878      	ldr	r0, [r7, #4]
 800412c:	f7fc fdf8 	bl	8000d20 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004130:	68bb      	ldr	r3, [r7, #8]
 8004132:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004136:	2b00      	cmp	r3, #0
 8004138:	d00c      	beq.n	8004154 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004140:	2b00      	cmp	r3, #0
 8004142:	d007      	beq.n	8004154 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800414c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800414e:	6878      	ldr	r0, [r7, #4]
 8004150:	f000 fa7f 	bl	8004652 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004154:	68bb      	ldr	r3, [r7, #8]
 8004156:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800415a:	2b00      	cmp	r3, #0
 800415c:	d00c      	beq.n	8004178 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004164:	2b00      	cmp	r3, #0
 8004166:	d007      	beq.n	8004178 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004170:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004172:	6878      	ldr	r0, [r7, #4]
 8004174:	f000 f8f8 	bl	8004368 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004178:	68bb      	ldr	r3, [r7, #8]
 800417a:	f003 0320 	and.w	r3, r3, #32
 800417e:	2b00      	cmp	r3, #0
 8004180:	d00c      	beq.n	800419c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	f003 0320 	and.w	r3, r3, #32
 8004188:	2b00      	cmp	r3, #0
 800418a:	d007      	beq.n	800419c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f06f 0220 	mvn.w	r2, #32
 8004194:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004196:	6878      	ldr	r0, [r7, #4]
 8004198:	f000 fa52 	bl	8004640 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800419c:	bf00      	nop
 800419e:	3710      	adds	r7, #16
 80041a0:	46bd      	mov	sp, r7
 80041a2:	bd80      	pop	{r7, pc}

080041a4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80041a4:	b580      	push	{r7, lr}
 80041a6:	b084      	sub	sp, #16
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
 80041ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80041ae:	2300      	movs	r3, #0
 80041b0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80041b8:	2b01      	cmp	r3, #1
 80041ba:	d101      	bne.n	80041c0 <HAL_TIM_ConfigClockSource+0x1c>
 80041bc:	2302      	movs	r3, #2
 80041be:	e0b4      	b.n	800432a <HAL_TIM_ConfigClockSource+0x186>
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2201      	movs	r2, #1
 80041c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2202      	movs	r2, #2
 80041cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	689b      	ldr	r3, [r3, #8]
 80041d6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80041d8:	68bb      	ldr	r3, [r7, #8]
 80041da:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80041de:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80041e0:	68bb      	ldr	r3, [r7, #8]
 80041e2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80041e6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	68ba      	ldr	r2, [r7, #8]
 80041ee:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80041f0:	683b      	ldr	r3, [r7, #0]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80041f8:	d03e      	beq.n	8004278 <HAL_TIM_ConfigClockSource+0xd4>
 80041fa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80041fe:	f200 8087 	bhi.w	8004310 <HAL_TIM_ConfigClockSource+0x16c>
 8004202:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004206:	f000 8086 	beq.w	8004316 <HAL_TIM_ConfigClockSource+0x172>
 800420a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800420e:	d87f      	bhi.n	8004310 <HAL_TIM_ConfigClockSource+0x16c>
 8004210:	2b70      	cmp	r3, #112	@ 0x70
 8004212:	d01a      	beq.n	800424a <HAL_TIM_ConfigClockSource+0xa6>
 8004214:	2b70      	cmp	r3, #112	@ 0x70
 8004216:	d87b      	bhi.n	8004310 <HAL_TIM_ConfigClockSource+0x16c>
 8004218:	2b60      	cmp	r3, #96	@ 0x60
 800421a:	d050      	beq.n	80042be <HAL_TIM_ConfigClockSource+0x11a>
 800421c:	2b60      	cmp	r3, #96	@ 0x60
 800421e:	d877      	bhi.n	8004310 <HAL_TIM_ConfigClockSource+0x16c>
 8004220:	2b50      	cmp	r3, #80	@ 0x50
 8004222:	d03c      	beq.n	800429e <HAL_TIM_ConfigClockSource+0xfa>
 8004224:	2b50      	cmp	r3, #80	@ 0x50
 8004226:	d873      	bhi.n	8004310 <HAL_TIM_ConfigClockSource+0x16c>
 8004228:	2b40      	cmp	r3, #64	@ 0x40
 800422a:	d058      	beq.n	80042de <HAL_TIM_ConfigClockSource+0x13a>
 800422c:	2b40      	cmp	r3, #64	@ 0x40
 800422e:	d86f      	bhi.n	8004310 <HAL_TIM_ConfigClockSource+0x16c>
 8004230:	2b30      	cmp	r3, #48	@ 0x30
 8004232:	d064      	beq.n	80042fe <HAL_TIM_ConfigClockSource+0x15a>
 8004234:	2b30      	cmp	r3, #48	@ 0x30
 8004236:	d86b      	bhi.n	8004310 <HAL_TIM_ConfigClockSource+0x16c>
 8004238:	2b20      	cmp	r3, #32
 800423a:	d060      	beq.n	80042fe <HAL_TIM_ConfigClockSource+0x15a>
 800423c:	2b20      	cmp	r3, #32
 800423e:	d867      	bhi.n	8004310 <HAL_TIM_ConfigClockSource+0x16c>
 8004240:	2b00      	cmp	r3, #0
 8004242:	d05c      	beq.n	80042fe <HAL_TIM_ConfigClockSource+0x15a>
 8004244:	2b10      	cmp	r3, #16
 8004246:	d05a      	beq.n	80042fe <HAL_TIM_ConfigClockSource+0x15a>
 8004248:	e062      	b.n	8004310 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004252:	683b      	ldr	r3, [r7, #0]
 8004254:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004256:	683b      	ldr	r3, [r7, #0]
 8004258:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800425a:	f000 f974 	bl	8004546 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	689b      	ldr	r3, [r3, #8]
 8004264:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004266:	68bb      	ldr	r3, [r7, #8]
 8004268:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800426c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	68ba      	ldr	r2, [r7, #8]
 8004274:	609a      	str	r2, [r3, #8]
      break;
 8004276:	e04f      	b.n	8004318 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004288:	f000 f95d 	bl	8004546 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	689a      	ldr	r2, [r3, #8]
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800429a:	609a      	str	r2, [r3, #8]
      break;
 800429c:	e03c      	b.n	8004318 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80042a2:	683b      	ldr	r3, [r7, #0]
 80042a4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80042a6:	683b      	ldr	r3, [r7, #0]
 80042a8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80042aa:	461a      	mov	r2, r3
 80042ac:	f000 f8d4 	bl	8004458 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	2150      	movs	r1, #80	@ 0x50
 80042b6:	4618      	mov	r0, r3
 80042b8:	f000 f92b 	bl	8004512 <TIM_ITRx_SetConfig>
      break;
 80042bc:	e02c      	b.n	8004318 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80042c2:	683b      	ldr	r3, [r7, #0]
 80042c4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80042c6:	683b      	ldr	r3, [r7, #0]
 80042c8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80042ca:	461a      	mov	r2, r3
 80042cc:	f000 f8f2 	bl	80044b4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	2160      	movs	r1, #96	@ 0x60
 80042d6:	4618      	mov	r0, r3
 80042d8:	f000 f91b 	bl	8004512 <TIM_ITRx_SetConfig>
      break;
 80042dc:	e01c      	b.n	8004318 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80042ea:	461a      	mov	r2, r3
 80042ec:	f000 f8b4 	bl	8004458 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	2140      	movs	r1, #64	@ 0x40
 80042f6:	4618      	mov	r0, r3
 80042f8:	f000 f90b 	bl	8004512 <TIM_ITRx_SetConfig>
      break;
 80042fc:	e00c      	b.n	8004318 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681a      	ldr	r2, [r3, #0]
 8004302:	683b      	ldr	r3, [r7, #0]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	4619      	mov	r1, r3
 8004308:	4610      	mov	r0, r2
 800430a:	f000 f902 	bl	8004512 <TIM_ITRx_SetConfig>
      break;
 800430e:	e003      	b.n	8004318 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004310:	2301      	movs	r3, #1
 8004312:	73fb      	strb	r3, [r7, #15]
      break;
 8004314:	e000      	b.n	8004318 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004316:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2201      	movs	r2, #1
 800431c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2200      	movs	r2, #0
 8004324:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004328:	7bfb      	ldrb	r3, [r7, #15]
}
 800432a:	4618      	mov	r0, r3
 800432c:	3710      	adds	r7, #16
 800432e:	46bd      	mov	sp, r7
 8004330:	bd80      	pop	{r7, pc}

08004332 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004332:	b480      	push	{r7}
 8004334:	b083      	sub	sp, #12
 8004336:	af00      	add	r7, sp, #0
 8004338:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800433a:	bf00      	nop
 800433c:	370c      	adds	r7, #12
 800433e:	46bd      	mov	sp, r7
 8004340:	bc80      	pop	{r7}
 8004342:	4770      	bx	lr

08004344 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004344:	b480      	push	{r7}
 8004346:	b083      	sub	sp, #12
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800434c:	bf00      	nop
 800434e:	370c      	adds	r7, #12
 8004350:	46bd      	mov	sp, r7
 8004352:	bc80      	pop	{r7}
 8004354:	4770      	bx	lr

08004356 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004356:	b480      	push	{r7}
 8004358:	b083      	sub	sp, #12
 800435a:	af00      	add	r7, sp, #0
 800435c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800435e:	bf00      	nop
 8004360:	370c      	adds	r7, #12
 8004362:	46bd      	mov	sp, r7
 8004364:	bc80      	pop	{r7}
 8004366:	4770      	bx	lr

08004368 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004368:	b480      	push	{r7}
 800436a:	b083      	sub	sp, #12
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004370:	bf00      	nop
 8004372:	370c      	adds	r7, #12
 8004374:	46bd      	mov	sp, r7
 8004376:	bc80      	pop	{r7}
 8004378:	4770      	bx	lr
	...

0800437c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800437c:	b480      	push	{r7}
 800437e:	b085      	sub	sp, #20
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
 8004384:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	4a2f      	ldr	r2, [pc, #188]	@ (800444c <TIM_Base_SetConfig+0xd0>)
 8004390:	4293      	cmp	r3, r2
 8004392:	d00b      	beq.n	80043ac <TIM_Base_SetConfig+0x30>
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800439a:	d007      	beq.n	80043ac <TIM_Base_SetConfig+0x30>
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	4a2c      	ldr	r2, [pc, #176]	@ (8004450 <TIM_Base_SetConfig+0xd4>)
 80043a0:	4293      	cmp	r3, r2
 80043a2:	d003      	beq.n	80043ac <TIM_Base_SetConfig+0x30>
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	4a2b      	ldr	r2, [pc, #172]	@ (8004454 <TIM_Base_SetConfig+0xd8>)
 80043a8:	4293      	cmp	r3, r2
 80043aa:	d108      	bne.n	80043be <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80043b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	685b      	ldr	r3, [r3, #4]
 80043b8:	68fa      	ldr	r2, [r7, #12]
 80043ba:	4313      	orrs	r3, r2
 80043bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	4a22      	ldr	r2, [pc, #136]	@ (800444c <TIM_Base_SetConfig+0xd0>)
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d00b      	beq.n	80043de <TIM_Base_SetConfig+0x62>
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80043cc:	d007      	beq.n	80043de <TIM_Base_SetConfig+0x62>
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	4a1f      	ldr	r2, [pc, #124]	@ (8004450 <TIM_Base_SetConfig+0xd4>)
 80043d2:	4293      	cmp	r3, r2
 80043d4:	d003      	beq.n	80043de <TIM_Base_SetConfig+0x62>
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	4a1e      	ldr	r2, [pc, #120]	@ (8004454 <TIM_Base_SetConfig+0xd8>)
 80043da:	4293      	cmp	r3, r2
 80043dc:	d108      	bne.n	80043f0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80043e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80043e6:	683b      	ldr	r3, [r7, #0]
 80043e8:	68db      	ldr	r3, [r3, #12]
 80043ea:	68fa      	ldr	r2, [r7, #12]
 80043ec:	4313      	orrs	r3, r2
 80043ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80043f6:	683b      	ldr	r3, [r7, #0]
 80043f8:	695b      	ldr	r3, [r3, #20]
 80043fa:	4313      	orrs	r3, r2
 80043fc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	68fa      	ldr	r2, [r7, #12]
 8004402:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	689a      	ldr	r2, [r3, #8]
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800440c:	683b      	ldr	r3, [r7, #0]
 800440e:	681a      	ldr	r2, [r3, #0]
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	4a0d      	ldr	r2, [pc, #52]	@ (800444c <TIM_Base_SetConfig+0xd0>)
 8004418:	4293      	cmp	r3, r2
 800441a:	d103      	bne.n	8004424 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	691a      	ldr	r2, [r3, #16]
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2201      	movs	r2, #1
 8004428:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	691b      	ldr	r3, [r3, #16]
 800442e:	f003 0301 	and.w	r3, r3, #1
 8004432:	2b00      	cmp	r3, #0
 8004434:	d005      	beq.n	8004442 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	691b      	ldr	r3, [r3, #16]
 800443a:	f023 0201 	bic.w	r2, r3, #1
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	611a      	str	r2, [r3, #16]
  }
}
 8004442:	bf00      	nop
 8004444:	3714      	adds	r7, #20
 8004446:	46bd      	mov	sp, r7
 8004448:	bc80      	pop	{r7}
 800444a:	4770      	bx	lr
 800444c:	40012c00 	.word	0x40012c00
 8004450:	40000400 	.word	0x40000400
 8004454:	40000800 	.word	0x40000800

08004458 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004458:	b480      	push	{r7}
 800445a:	b087      	sub	sp, #28
 800445c:	af00      	add	r7, sp, #0
 800445e:	60f8      	str	r0, [r7, #12]
 8004460:	60b9      	str	r1, [r7, #8]
 8004462:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	6a1b      	ldr	r3, [r3, #32]
 8004468:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	6a1b      	ldr	r3, [r3, #32]
 800446e:	f023 0201 	bic.w	r2, r3, #1
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	699b      	ldr	r3, [r3, #24]
 800447a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800447c:	693b      	ldr	r3, [r7, #16]
 800447e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004482:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	011b      	lsls	r3, r3, #4
 8004488:	693a      	ldr	r2, [r7, #16]
 800448a:	4313      	orrs	r3, r2
 800448c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800448e:	697b      	ldr	r3, [r7, #20]
 8004490:	f023 030a 	bic.w	r3, r3, #10
 8004494:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004496:	697a      	ldr	r2, [r7, #20]
 8004498:	68bb      	ldr	r3, [r7, #8]
 800449a:	4313      	orrs	r3, r2
 800449c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	693a      	ldr	r2, [r7, #16]
 80044a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	697a      	ldr	r2, [r7, #20]
 80044a8:	621a      	str	r2, [r3, #32]
}
 80044aa:	bf00      	nop
 80044ac:	371c      	adds	r7, #28
 80044ae:	46bd      	mov	sp, r7
 80044b0:	bc80      	pop	{r7}
 80044b2:	4770      	bx	lr

080044b4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80044b4:	b480      	push	{r7}
 80044b6:	b087      	sub	sp, #28
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	60f8      	str	r0, [r7, #12]
 80044bc:	60b9      	str	r1, [r7, #8]
 80044be:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	6a1b      	ldr	r3, [r3, #32]
 80044c4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	6a1b      	ldr	r3, [r3, #32]
 80044ca:	f023 0210 	bic.w	r2, r3, #16
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	699b      	ldr	r3, [r3, #24]
 80044d6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80044d8:	693b      	ldr	r3, [r7, #16]
 80044da:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80044de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	031b      	lsls	r3, r3, #12
 80044e4:	693a      	ldr	r2, [r7, #16]
 80044e6:	4313      	orrs	r3, r2
 80044e8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80044ea:	697b      	ldr	r3, [r7, #20]
 80044ec:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80044f0:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80044f2:	68bb      	ldr	r3, [r7, #8]
 80044f4:	011b      	lsls	r3, r3, #4
 80044f6:	697a      	ldr	r2, [r7, #20]
 80044f8:	4313      	orrs	r3, r2
 80044fa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	693a      	ldr	r2, [r7, #16]
 8004500:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	697a      	ldr	r2, [r7, #20]
 8004506:	621a      	str	r2, [r3, #32]
}
 8004508:	bf00      	nop
 800450a:	371c      	adds	r7, #28
 800450c:	46bd      	mov	sp, r7
 800450e:	bc80      	pop	{r7}
 8004510:	4770      	bx	lr

08004512 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004512:	b480      	push	{r7}
 8004514:	b085      	sub	sp, #20
 8004516:	af00      	add	r7, sp, #0
 8004518:	6078      	str	r0, [r7, #4]
 800451a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	689b      	ldr	r3, [r3, #8]
 8004520:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004528:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800452a:	683a      	ldr	r2, [r7, #0]
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	4313      	orrs	r3, r2
 8004530:	f043 0307 	orr.w	r3, r3, #7
 8004534:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	68fa      	ldr	r2, [r7, #12]
 800453a:	609a      	str	r2, [r3, #8]
}
 800453c:	bf00      	nop
 800453e:	3714      	adds	r7, #20
 8004540:	46bd      	mov	sp, r7
 8004542:	bc80      	pop	{r7}
 8004544:	4770      	bx	lr

08004546 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004546:	b480      	push	{r7}
 8004548:	b087      	sub	sp, #28
 800454a:	af00      	add	r7, sp, #0
 800454c:	60f8      	str	r0, [r7, #12]
 800454e:	60b9      	str	r1, [r7, #8]
 8004550:	607a      	str	r2, [r7, #4]
 8004552:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	689b      	ldr	r3, [r3, #8]
 8004558:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800455a:	697b      	ldr	r3, [r7, #20]
 800455c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004560:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	021a      	lsls	r2, r3, #8
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	431a      	orrs	r2, r3
 800456a:	68bb      	ldr	r3, [r7, #8]
 800456c:	4313      	orrs	r3, r2
 800456e:	697a      	ldr	r2, [r7, #20]
 8004570:	4313      	orrs	r3, r2
 8004572:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	697a      	ldr	r2, [r7, #20]
 8004578:	609a      	str	r2, [r3, #8]
}
 800457a:	bf00      	nop
 800457c:	371c      	adds	r7, #28
 800457e:	46bd      	mov	sp, r7
 8004580:	bc80      	pop	{r7}
 8004582:	4770      	bx	lr

08004584 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004584:	b480      	push	{r7}
 8004586:	b085      	sub	sp, #20
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
 800458c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004594:	2b01      	cmp	r3, #1
 8004596:	d101      	bne.n	800459c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004598:	2302      	movs	r3, #2
 800459a:	e046      	b.n	800462a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2201      	movs	r2, #1
 80045a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2202      	movs	r2, #2
 80045a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	685b      	ldr	r3, [r3, #4]
 80045b2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	689b      	ldr	r3, [r3, #8]
 80045ba:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80045c2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	68fa      	ldr	r2, [r7, #12]
 80045ca:	4313      	orrs	r3, r2
 80045cc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	68fa      	ldr	r2, [r7, #12]
 80045d4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	4a16      	ldr	r2, [pc, #88]	@ (8004634 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80045dc:	4293      	cmp	r3, r2
 80045de:	d00e      	beq.n	80045fe <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80045e8:	d009      	beq.n	80045fe <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	4a12      	ldr	r2, [pc, #72]	@ (8004638 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80045f0:	4293      	cmp	r3, r2
 80045f2:	d004      	beq.n	80045fe <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	4a10      	ldr	r2, [pc, #64]	@ (800463c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80045fa:	4293      	cmp	r3, r2
 80045fc:	d10c      	bne.n	8004618 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80045fe:	68bb      	ldr	r3, [r7, #8]
 8004600:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004604:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004606:	683b      	ldr	r3, [r7, #0]
 8004608:	685b      	ldr	r3, [r3, #4]
 800460a:	68ba      	ldr	r2, [r7, #8]
 800460c:	4313      	orrs	r3, r2
 800460e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	68ba      	ldr	r2, [r7, #8]
 8004616:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2201      	movs	r2, #1
 800461c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2200      	movs	r2, #0
 8004624:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004628:	2300      	movs	r3, #0
}
 800462a:	4618      	mov	r0, r3
 800462c:	3714      	adds	r7, #20
 800462e:	46bd      	mov	sp, r7
 8004630:	bc80      	pop	{r7}
 8004632:	4770      	bx	lr
 8004634:	40012c00 	.word	0x40012c00
 8004638:	40000400 	.word	0x40000400
 800463c:	40000800 	.word	0x40000800

08004640 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004640:	b480      	push	{r7}
 8004642:	b083      	sub	sp, #12
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004648:	bf00      	nop
 800464a:	370c      	adds	r7, #12
 800464c:	46bd      	mov	sp, r7
 800464e:	bc80      	pop	{r7}
 8004650:	4770      	bx	lr

08004652 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004652:	b480      	push	{r7}
 8004654:	b083      	sub	sp, #12
 8004656:	af00      	add	r7, sp, #0
 8004658:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800465a:	bf00      	nop
 800465c:	370c      	adds	r7, #12
 800465e:	46bd      	mov	sp, r7
 8004660:	bc80      	pop	{r7}
 8004662:	4770      	bx	lr

08004664 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004664:	b480      	push	{r7}
 8004666:	b085      	sub	sp, #20
 8004668:	af00      	add	r7, sp, #0
 800466a:	60f8      	str	r0, [r7, #12]
 800466c:	4638      	mov	r0, r7
 800466e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8004672:	2300      	movs	r3, #0
}
 8004674:	4618      	mov	r0, r3
 8004676:	3714      	adds	r7, #20
 8004678:	46bd      	mov	sp, r7
 800467a:	bc80      	pop	{r7}
 800467c:	4770      	bx	lr

0800467e <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800467e:	b480      	push	{r7}
 8004680:	b085      	sub	sp, #20
 8004682:	af00      	add	r7, sp, #0
 8004684:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	2200      	movs	r2, #0
 800468a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800468e:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8004692:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	b29a      	uxth	r2, r3
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800469e:	2300      	movs	r3, #0
}
 80046a0:	4618      	mov	r0, r3
 80046a2:	3714      	adds	r7, #20
 80046a4:	46bd      	mov	sp, r7
 80046a6:	bc80      	pop	{r7}
 80046a8:	4770      	bx	lr

080046aa <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80046aa:	b480      	push	{r7}
 80046ac:	b085      	sub	sp, #20
 80046ae:	af00      	add	r7, sp, #0
 80046b0:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80046b2:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 80046b6:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80046be:	b29a      	uxth	r2, r3
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	b29b      	uxth	r3, r3
 80046c4:	43db      	mvns	r3, r3
 80046c6:	b29b      	uxth	r3, r3
 80046c8:	4013      	ands	r3, r2
 80046ca:	b29a      	uxth	r2, r3
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80046d2:	2300      	movs	r3, #0
}
 80046d4:	4618      	mov	r0, r3
 80046d6:	3714      	adds	r7, #20
 80046d8:	46bd      	mov	sp, r7
 80046da:	bc80      	pop	{r7}
 80046dc:	4770      	bx	lr

080046de <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 80046de:	b480      	push	{r7}
 80046e0:	b083      	sub	sp, #12
 80046e2:	af00      	add	r7, sp, #0
 80046e4:	6078      	str	r0, [r7, #4]
 80046e6:	460b      	mov	r3, r1
 80046e8:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80046ea:	2300      	movs	r3, #0
}
 80046ec:	4618      	mov	r0, r3
 80046ee:	370c      	adds	r7, #12
 80046f0:	46bd      	mov	sp, r7
 80046f2:	bc80      	pop	{r7}
 80046f4:	4770      	bx	lr

080046f6 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80046f6:	b480      	push	{r7}
 80046f8:	b085      	sub	sp, #20
 80046fa:	af00      	add	r7, sp, #0
 80046fc:	60f8      	str	r0, [r7, #12]
 80046fe:	4638      	mov	r0, r7
 8004700:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	2201      	movs	r2, #1
 8004708:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	2200      	movs	r2, #0
 8004710:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	2200      	movs	r2, #0
 8004718:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	2200      	movs	r2, #0
 8004720:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8004724:	2300      	movs	r3, #0
}
 8004726:	4618      	mov	r0, r3
 8004728:	3714      	adds	r7, #20
 800472a:	46bd      	mov	sp, r7
 800472c:	bc80      	pop	{r7}
 800472e:	4770      	bx	lr

08004730 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004730:	b480      	push	{r7}
 8004732:	b09d      	sub	sp, #116	@ 0x74
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
 8004738:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800473a:	2300      	movs	r3, #0
 800473c:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8004740:	687a      	ldr	r2, [r7, #4]
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	781b      	ldrb	r3, [r3, #0]
 8004746:	009b      	lsls	r3, r3, #2
 8004748:	4413      	add	r3, r2
 800474a:	881b      	ldrh	r3, [r3, #0]
 800474c:	b29b      	uxth	r3, r3
 800474e:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 8004752:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004756:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 800475a:	683b      	ldr	r3, [r7, #0]
 800475c:	78db      	ldrb	r3, [r3, #3]
 800475e:	2b03      	cmp	r3, #3
 8004760:	d81f      	bhi.n	80047a2 <USB_ActivateEndpoint+0x72>
 8004762:	a201      	add	r2, pc, #4	@ (adr r2, 8004768 <USB_ActivateEndpoint+0x38>)
 8004764:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004768:	08004779 	.word	0x08004779
 800476c:	08004795 	.word	0x08004795
 8004770:	080047ab 	.word	0x080047ab
 8004774:	08004787 	.word	0x08004787
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8004778:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800477c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004780:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8004784:	e012      	b.n	80047ac <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8004786:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800478a:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 800478e:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8004792:	e00b      	b.n	80047ac <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8004794:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8004798:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800479c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 80047a0:	e004      	b.n	80047ac <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80047a2:	2301      	movs	r3, #1
 80047a4:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 80047a8:	e000      	b.n	80047ac <USB_ActivateEndpoint+0x7c>
      break;
 80047aa:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80047ac:	687a      	ldr	r2, [r7, #4]
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	781b      	ldrb	r3, [r3, #0]
 80047b2:	009b      	lsls	r3, r3, #2
 80047b4:	441a      	add	r2, r3
 80047b6:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80047ba:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80047be:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80047c2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80047c6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80047ca:	b29b      	uxth	r3, r3
 80047cc:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80047ce:	687a      	ldr	r2, [r7, #4]
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	781b      	ldrb	r3, [r3, #0]
 80047d4:	009b      	lsls	r3, r3, #2
 80047d6:	4413      	add	r3, r2
 80047d8:	881b      	ldrh	r3, [r3, #0]
 80047da:	b29b      	uxth	r3, r3
 80047dc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80047e0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80047e4:	b29b      	uxth	r3, r3
 80047e6:	683a      	ldr	r2, [r7, #0]
 80047e8:	7812      	ldrb	r2, [r2, #0]
 80047ea:	4313      	orrs	r3, r2
 80047ec:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 80047f0:	687a      	ldr	r2, [r7, #4]
 80047f2:	683b      	ldr	r3, [r7, #0]
 80047f4:	781b      	ldrb	r3, [r3, #0]
 80047f6:	009b      	lsls	r3, r3, #2
 80047f8:	441a      	add	r2, r3
 80047fa:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 80047fe:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004802:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004806:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800480a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800480e:	b29b      	uxth	r3, r3
 8004810:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8004812:	683b      	ldr	r3, [r7, #0]
 8004814:	7b1b      	ldrb	r3, [r3, #12]
 8004816:	2b00      	cmp	r3, #0
 8004818:	f040 8178 	bne.w	8004b0c <USB_ActivateEndpoint+0x3dc>
  {
    if (ep->is_in != 0U)
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	785b      	ldrb	r3, [r3, #1]
 8004820:	2b00      	cmp	r3, #0
 8004822:	f000 8084 	beq.w	800492e <USB_ActivateEndpoint+0x1fe>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	61bb      	str	r3, [r7, #24]
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004830:	b29b      	uxth	r3, r3
 8004832:	461a      	mov	r2, r3
 8004834:	69bb      	ldr	r3, [r7, #24]
 8004836:	4413      	add	r3, r2
 8004838:	61bb      	str	r3, [r7, #24]
 800483a:	683b      	ldr	r3, [r7, #0]
 800483c:	781b      	ldrb	r3, [r3, #0]
 800483e:	011a      	lsls	r2, r3, #4
 8004840:	69bb      	ldr	r3, [r7, #24]
 8004842:	4413      	add	r3, r2
 8004844:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004848:	617b      	str	r3, [r7, #20]
 800484a:	683b      	ldr	r3, [r7, #0]
 800484c:	88db      	ldrh	r3, [r3, #6]
 800484e:	085b      	lsrs	r3, r3, #1
 8004850:	b29b      	uxth	r3, r3
 8004852:	005b      	lsls	r3, r3, #1
 8004854:	b29a      	uxth	r2, r3
 8004856:	697b      	ldr	r3, [r7, #20]
 8004858:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800485a:	687a      	ldr	r2, [r7, #4]
 800485c:	683b      	ldr	r3, [r7, #0]
 800485e:	781b      	ldrb	r3, [r3, #0]
 8004860:	009b      	lsls	r3, r3, #2
 8004862:	4413      	add	r3, r2
 8004864:	881b      	ldrh	r3, [r3, #0]
 8004866:	827b      	strh	r3, [r7, #18]
 8004868:	8a7b      	ldrh	r3, [r7, #18]
 800486a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800486e:	2b00      	cmp	r3, #0
 8004870:	d01b      	beq.n	80048aa <USB_ActivateEndpoint+0x17a>
 8004872:	687a      	ldr	r2, [r7, #4]
 8004874:	683b      	ldr	r3, [r7, #0]
 8004876:	781b      	ldrb	r3, [r3, #0]
 8004878:	009b      	lsls	r3, r3, #2
 800487a:	4413      	add	r3, r2
 800487c:	881b      	ldrh	r3, [r3, #0]
 800487e:	b29b      	uxth	r3, r3
 8004880:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004884:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004888:	823b      	strh	r3, [r7, #16]
 800488a:	687a      	ldr	r2, [r7, #4]
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	781b      	ldrb	r3, [r3, #0]
 8004890:	009b      	lsls	r3, r3, #2
 8004892:	441a      	add	r2, r3
 8004894:	8a3b      	ldrh	r3, [r7, #16]
 8004896:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800489a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800489e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80048a2:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80048a6:	b29b      	uxth	r3, r3
 80048a8:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80048aa:	683b      	ldr	r3, [r7, #0]
 80048ac:	78db      	ldrb	r3, [r3, #3]
 80048ae:	2b01      	cmp	r3, #1
 80048b0:	d020      	beq.n	80048f4 <USB_ActivateEndpoint+0x1c4>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80048b2:	687a      	ldr	r2, [r7, #4]
 80048b4:	683b      	ldr	r3, [r7, #0]
 80048b6:	781b      	ldrb	r3, [r3, #0]
 80048b8:	009b      	lsls	r3, r3, #2
 80048ba:	4413      	add	r3, r2
 80048bc:	881b      	ldrh	r3, [r3, #0]
 80048be:	b29b      	uxth	r3, r3
 80048c0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80048c4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80048c8:	81bb      	strh	r3, [r7, #12]
 80048ca:	89bb      	ldrh	r3, [r7, #12]
 80048cc:	f083 0320 	eor.w	r3, r3, #32
 80048d0:	81bb      	strh	r3, [r7, #12]
 80048d2:	687a      	ldr	r2, [r7, #4]
 80048d4:	683b      	ldr	r3, [r7, #0]
 80048d6:	781b      	ldrb	r3, [r3, #0]
 80048d8:	009b      	lsls	r3, r3, #2
 80048da:	441a      	add	r2, r3
 80048dc:	89bb      	ldrh	r3, [r7, #12]
 80048de:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80048e2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80048e6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80048ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80048ee:	b29b      	uxth	r3, r3
 80048f0:	8013      	strh	r3, [r2, #0]
 80048f2:	e2d5      	b.n	8004ea0 <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80048f4:	687a      	ldr	r2, [r7, #4]
 80048f6:	683b      	ldr	r3, [r7, #0]
 80048f8:	781b      	ldrb	r3, [r3, #0]
 80048fa:	009b      	lsls	r3, r3, #2
 80048fc:	4413      	add	r3, r2
 80048fe:	881b      	ldrh	r3, [r3, #0]
 8004900:	b29b      	uxth	r3, r3
 8004902:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004906:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800490a:	81fb      	strh	r3, [r7, #14]
 800490c:	687a      	ldr	r2, [r7, #4]
 800490e:	683b      	ldr	r3, [r7, #0]
 8004910:	781b      	ldrb	r3, [r3, #0]
 8004912:	009b      	lsls	r3, r3, #2
 8004914:	441a      	add	r2, r3
 8004916:	89fb      	ldrh	r3, [r7, #14]
 8004918:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800491c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004920:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004924:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004928:	b29b      	uxth	r3, r3
 800492a:	8013      	strh	r3, [r2, #0]
 800492c:	e2b8      	b.n	8004ea0 <USB_ActivateEndpoint+0x770>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	633b      	str	r3, [r7, #48]	@ 0x30
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004938:	b29b      	uxth	r3, r3
 800493a:	461a      	mov	r2, r3
 800493c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800493e:	4413      	add	r3, r2
 8004940:	633b      	str	r3, [r7, #48]	@ 0x30
 8004942:	683b      	ldr	r3, [r7, #0]
 8004944:	781b      	ldrb	r3, [r3, #0]
 8004946:	011a      	lsls	r2, r3, #4
 8004948:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800494a:	4413      	add	r3, r2
 800494c:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8004950:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004952:	683b      	ldr	r3, [r7, #0]
 8004954:	88db      	ldrh	r3, [r3, #6]
 8004956:	085b      	lsrs	r3, r3, #1
 8004958:	b29b      	uxth	r3, r3
 800495a:	005b      	lsls	r3, r3, #1
 800495c:	b29a      	uxth	r2, r3
 800495e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004960:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800496c:	b29b      	uxth	r3, r3
 800496e:	461a      	mov	r2, r3
 8004970:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004972:	4413      	add	r3, r2
 8004974:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004976:	683b      	ldr	r3, [r7, #0]
 8004978:	781b      	ldrb	r3, [r3, #0]
 800497a:	011a      	lsls	r2, r3, #4
 800497c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800497e:	4413      	add	r3, r2
 8004980:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004984:	627b      	str	r3, [r7, #36]	@ 0x24
 8004986:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004988:	881b      	ldrh	r3, [r3, #0]
 800498a:	b29b      	uxth	r3, r3
 800498c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004990:	b29a      	uxth	r2, r3
 8004992:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004994:	801a      	strh	r2, [r3, #0]
 8004996:	683b      	ldr	r3, [r7, #0]
 8004998:	691b      	ldr	r3, [r3, #16]
 800499a:	2b3e      	cmp	r3, #62	@ 0x3e
 800499c:	d91d      	bls.n	80049da <USB_ActivateEndpoint+0x2aa>
 800499e:	683b      	ldr	r3, [r7, #0]
 80049a0:	691b      	ldr	r3, [r3, #16]
 80049a2:	095b      	lsrs	r3, r3, #5
 80049a4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80049a6:	683b      	ldr	r3, [r7, #0]
 80049a8:	691b      	ldr	r3, [r3, #16]
 80049aa:	f003 031f 	and.w	r3, r3, #31
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d102      	bne.n	80049b8 <USB_ActivateEndpoint+0x288>
 80049b2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80049b4:	3b01      	subs	r3, #1
 80049b6:	66bb      	str	r3, [r7, #104]	@ 0x68
 80049b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049ba:	881b      	ldrh	r3, [r3, #0]
 80049bc:	b29a      	uxth	r2, r3
 80049be:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80049c0:	b29b      	uxth	r3, r3
 80049c2:	029b      	lsls	r3, r3, #10
 80049c4:	b29b      	uxth	r3, r3
 80049c6:	4313      	orrs	r3, r2
 80049c8:	b29b      	uxth	r3, r3
 80049ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80049ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80049d2:	b29a      	uxth	r2, r3
 80049d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049d6:	801a      	strh	r2, [r3, #0]
 80049d8:	e026      	b.n	8004a28 <USB_ActivateEndpoint+0x2f8>
 80049da:	683b      	ldr	r3, [r7, #0]
 80049dc:	691b      	ldr	r3, [r3, #16]
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d10a      	bne.n	80049f8 <USB_ActivateEndpoint+0x2c8>
 80049e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049e4:	881b      	ldrh	r3, [r3, #0]
 80049e6:	b29b      	uxth	r3, r3
 80049e8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80049ec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80049f0:	b29a      	uxth	r2, r3
 80049f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049f4:	801a      	strh	r2, [r3, #0]
 80049f6:	e017      	b.n	8004a28 <USB_ActivateEndpoint+0x2f8>
 80049f8:	683b      	ldr	r3, [r7, #0]
 80049fa:	691b      	ldr	r3, [r3, #16]
 80049fc:	085b      	lsrs	r3, r3, #1
 80049fe:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004a00:	683b      	ldr	r3, [r7, #0]
 8004a02:	691b      	ldr	r3, [r3, #16]
 8004a04:	f003 0301 	and.w	r3, r3, #1
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d002      	beq.n	8004a12 <USB_ActivateEndpoint+0x2e2>
 8004a0c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004a0e:	3301      	adds	r3, #1
 8004a10:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004a12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a14:	881b      	ldrh	r3, [r3, #0]
 8004a16:	b29a      	uxth	r2, r3
 8004a18:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004a1a:	b29b      	uxth	r3, r3
 8004a1c:	029b      	lsls	r3, r3, #10
 8004a1e:	b29b      	uxth	r3, r3
 8004a20:	4313      	orrs	r3, r2
 8004a22:	b29a      	uxth	r2, r3
 8004a24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a26:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004a28:	687a      	ldr	r2, [r7, #4]
 8004a2a:	683b      	ldr	r3, [r7, #0]
 8004a2c:	781b      	ldrb	r3, [r3, #0]
 8004a2e:	009b      	lsls	r3, r3, #2
 8004a30:	4413      	add	r3, r2
 8004a32:	881b      	ldrh	r3, [r3, #0]
 8004a34:	847b      	strh	r3, [r7, #34]	@ 0x22
 8004a36:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8004a38:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d01b      	beq.n	8004a78 <USB_ActivateEndpoint+0x348>
 8004a40:	687a      	ldr	r2, [r7, #4]
 8004a42:	683b      	ldr	r3, [r7, #0]
 8004a44:	781b      	ldrb	r3, [r3, #0]
 8004a46:	009b      	lsls	r3, r3, #2
 8004a48:	4413      	add	r3, r2
 8004a4a:	881b      	ldrh	r3, [r3, #0]
 8004a4c:	b29b      	uxth	r3, r3
 8004a4e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004a52:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a56:	843b      	strh	r3, [r7, #32]
 8004a58:	687a      	ldr	r2, [r7, #4]
 8004a5a:	683b      	ldr	r3, [r7, #0]
 8004a5c:	781b      	ldrb	r3, [r3, #0]
 8004a5e:	009b      	lsls	r3, r3, #2
 8004a60:	441a      	add	r2, r3
 8004a62:	8c3b      	ldrh	r3, [r7, #32]
 8004a64:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004a68:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004a6c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004a70:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004a74:	b29b      	uxth	r3, r3
 8004a76:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8004a78:	683b      	ldr	r3, [r7, #0]
 8004a7a:	781b      	ldrb	r3, [r3, #0]
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d124      	bne.n	8004aca <USB_ActivateEndpoint+0x39a>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004a80:	687a      	ldr	r2, [r7, #4]
 8004a82:	683b      	ldr	r3, [r7, #0]
 8004a84:	781b      	ldrb	r3, [r3, #0]
 8004a86:	009b      	lsls	r3, r3, #2
 8004a88:	4413      	add	r3, r2
 8004a8a:	881b      	ldrh	r3, [r3, #0]
 8004a8c:	b29b      	uxth	r3, r3
 8004a8e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004a92:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a96:	83bb      	strh	r3, [r7, #28]
 8004a98:	8bbb      	ldrh	r3, [r7, #28]
 8004a9a:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8004a9e:	83bb      	strh	r3, [r7, #28]
 8004aa0:	8bbb      	ldrh	r3, [r7, #28]
 8004aa2:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8004aa6:	83bb      	strh	r3, [r7, #28]
 8004aa8:	687a      	ldr	r2, [r7, #4]
 8004aaa:	683b      	ldr	r3, [r7, #0]
 8004aac:	781b      	ldrb	r3, [r3, #0]
 8004aae:	009b      	lsls	r3, r3, #2
 8004ab0:	441a      	add	r2, r3
 8004ab2:	8bbb      	ldrh	r3, [r7, #28]
 8004ab4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004ab8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004abc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004ac0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004ac4:	b29b      	uxth	r3, r3
 8004ac6:	8013      	strh	r3, [r2, #0]
 8004ac8:	e1ea      	b.n	8004ea0 <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8004aca:	687a      	ldr	r2, [r7, #4]
 8004acc:	683b      	ldr	r3, [r7, #0]
 8004ace:	781b      	ldrb	r3, [r3, #0]
 8004ad0:	009b      	lsls	r3, r3, #2
 8004ad2:	4413      	add	r3, r2
 8004ad4:	881b      	ldrh	r3, [r3, #0]
 8004ad6:	b29b      	uxth	r3, r3
 8004ad8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004adc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ae0:	83fb      	strh	r3, [r7, #30]
 8004ae2:	8bfb      	ldrh	r3, [r7, #30]
 8004ae4:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8004ae8:	83fb      	strh	r3, [r7, #30]
 8004aea:	687a      	ldr	r2, [r7, #4]
 8004aec:	683b      	ldr	r3, [r7, #0]
 8004aee:	781b      	ldrb	r3, [r3, #0]
 8004af0:	009b      	lsls	r3, r3, #2
 8004af2:	441a      	add	r2, r3
 8004af4:	8bfb      	ldrh	r3, [r7, #30]
 8004af6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004afa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004afe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004b02:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004b06:	b29b      	uxth	r3, r3
 8004b08:	8013      	strh	r3, [r2, #0]
 8004b0a:	e1c9      	b.n	8004ea0 <USB_ActivateEndpoint+0x770>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8004b0c:	683b      	ldr	r3, [r7, #0]
 8004b0e:	78db      	ldrb	r3, [r3, #3]
 8004b10:	2b02      	cmp	r3, #2
 8004b12:	d11e      	bne.n	8004b52 <USB_ActivateEndpoint+0x422>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8004b14:	687a      	ldr	r2, [r7, #4]
 8004b16:	683b      	ldr	r3, [r7, #0]
 8004b18:	781b      	ldrb	r3, [r3, #0]
 8004b1a:	009b      	lsls	r3, r3, #2
 8004b1c:	4413      	add	r3, r2
 8004b1e:	881b      	ldrh	r3, [r3, #0]
 8004b20:	b29b      	uxth	r3, r3
 8004b22:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004b26:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b2a:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8004b2e:	687a      	ldr	r2, [r7, #4]
 8004b30:	683b      	ldr	r3, [r7, #0]
 8004b32:	781b      	ldrb	r3, [r3, #0]
 8004b34:	009b      	lsls	r3, r3, #2
 8004b36:	441a      	add	r2, r3
 8004b38:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8004b3c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004b40:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004b44:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8004b48:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004b4c:	b29b      	uxth	r3, r3
 8004b4e:	8013      	strh	r3, [r2, #0]
 8004b50:	e01d      	b.n	8004b8e <USB_ActivateEndpoint+0x45e>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8004b52:	687a      	ldr	r2, [r7, #4]
 8004b54:	683b      	ldr	r3, [r7, #0]
 8004b56:	781b      	ldrb	r3, [r3, #0]
 8004b58:	009b      	lsls	r3, r3, #2
 8004b5a:	4413      	add	r3, r2
 8004b5c:	881b      	ldrh	r3, [r3, #0]
 8004b5e:	b29b      	uxth	r3, r3
 8004b60:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8004b64:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b68:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8004b6c:	687a      	ldr	r2, [r7, #4]
 8004b6e:	683b      	ldr	r3, [r7, #0]
 8004b70:	781b      	ldrb	r3, [r3, #0]
 8004b72:	009b      	lsls	r3, r3, #2
 8004b74:	441a      	add	r2, r3
 8004b76:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8004b7a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004b7e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004b82:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004b86:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004b8a:	b29b      	uxth	r3, r3
 8004b8c:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004b98:	b29b      	uxth	r3, r3
 8004b9a:	461a      	mov	r2, r3
 8004b9c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004b9e:	4413      	add	r3, r2
 8004ba0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004ba2:	683b      	ldr	r3, [r7, #0]
 8004ba4:	781b      	ldrb	r3, [r3, #0]
 8004ba6:	011a      	lsls	r2, r3, #4
 8004ba8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004baa:	4413      	add	r3, r2
 8004bac:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004bb0:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004bb2:	683b      	ldr	r3, [r7, #0]
 8004bb4:	891b      	ldrh	r3, [r3, #8]
 8004bb6:	085b      	lsrs	r3, r3, #1
 8004bb8:	b29b      	uxth	r3, r3
 8004bba:	005b      	lsls	r3, r3, #1
 8004bbc:	b29a      	uxth	r2, r3
 8004bbe:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004bc0:	801a      	strh	r2, [r3, #0]
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	657b      	str	r3, [r7, #84]	@ 0x54
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004bcc:	b29b      	uxth	r3, r3
 8004bce:	461a      	mov	r2, r3
 8004bd0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004bd2:	4413      	add	r3, r2
 8004bd4:	657b      	str	r3, [r7, #84]	@ 0x54
 8004bd6:	683b      	ldr	r3, [r7, #0]
 8004bd8:	781b      	ldrb	r3, [r3, #0]
 8004bda:	011a      	lsls	r2, r3, #4
 8004bdc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004bde:	4413      	add	r3, r2
 8004be0:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8004be4:	653b      	str	r3, [r7, #80]	@ 0x50
 8004be6:	683b      	ldr	r3, [r7, #0]
 8004be8:	895b      	ldrh	r3, [r3, #10]
 8004bea:	085b      	lsrs	r3, r3, #1
 8004bec:	b29b      	uxth	r3, r3
 8004bee:	005b      	lsls	r3, r3, #1
 8004bf0:	b29a      	uxth	r2, r3
 8004bf2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004bf4:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8004bf6:	683b      	ldr	r3, [r7, #0]
 8004bf8:	785b      	ldrb	r3, [r3, #1]
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	f040 8093 	bne.w	8004d26 <USB_ActivateEndpoint+0x5f6>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004c00:	687a      	ldr	r2, [r7, #4]
 8004c02:	683b      	ldr	r3, [r7, #0]
 8004c04:	781b      	ldrb	r3, [r3, #0]
 8004c06:	009b      	lsls	r3, r3, #2
 8004c08:	4413      	add	r3, r2
 8004c0a:	881b      	ldrh	r3, [r3, #0]
 8004c0c:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8004c10:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8004c14:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d01b      	beq.n	8004c54 <USB_ActivateEndpoint+0x524>
 8004c1c:	687a      	ldr	r2, [r7, #4]
 8004c1e:	683b      	ldr	r3, [r7, #0]
 8004c20:	781b      	ldrb	r3, [r3, #0]
 8004c22:	009b      	lsls	r3, r3, #2
 8004c24:	4413      	add	r3, r2
 8004c26:	881b      	ldrh	r3, [r3, #0]
 8004c28:	b29b      	uxth	r3, r3
 8004c2a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004c2e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c32:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8004c34:	687a      	ldr	r2, [r7, #4]
 8004c36:	683b      	ldr	r3, [r7, #0]
 8004c38:	781b      	ldrb	r3, [r3, #0]
 8004c3a:	009b      	lsls	r3, r3, #2
 8004c3c:	441a      	add	r2, r3
 8004c3e:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8004c40:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004c44:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004c48:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004c4c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004c50:	b29b      	uxth	r3, r3
 8004c52:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004c54:	687a      	ldr	r2, [r7, #4]
 8004c56:	683b      	ldr	r3, [r7, #0]
 8004c58:	781b      	ldrb	r3, [r3, #0]
 8004c5a:	009b      	lsls	r3, r3, #2
 8004c5c:	4413      	add	r3, r2
 8004c5e:	881b      	ldrh	r3, [r3, #0]
 8004c60:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8004c62:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8004c64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d01b      	beq.n	8004ca4 <USB_ActivateEndpoint+0x574>
 8004c6c:	687a      	ldr	r2, [r7, #4]
 8004c6e:	683b      	ldr	r3, [r7, #0]
 8004c70:	781b      	ldrb	r3, [r3, #0]
 8004c72:	009b      	lsls	r3, r3, #2
 8004c74:	4413      	add	r3, r2
 8004c76:	881b      	ldrh	r3, [r3, #0]
 8004c78:	b29b      	uxth	r3, r3
 8004c7a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004c7e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c82:	877b      	strh	r3, [r7, #58]	@ 0x3a
 8004c84:	687a      	ldr	r2, [r7, #4]
 8004c86:	683b      	ldr	r3, [r7, #0]
 8004c88:	781b      	ldrb	r3, [r3, #0]
 8004c8a:	009b      	lsls	r3, r3, #2
 8004c8c:	441a      	add	r2, r3
 8004c8e:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8004c90:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004c94:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004c98:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004c9c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004ca0:	b29b      	uxth	r3, r3
 8004ca2:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004ca4:	687a      	ldr	r2, [r7, #4]
 8004ca6:	683b      	ldr	r3, [r7, #0]
 8004ca8:	781b      	ldrb	r3, [r3, #0]
 8004caa:	009b      	lsls	r3, r3, #2
 8004cac:	4413      	add	r3, r2
 8004cae:	881b      	ldrh	r3, [r3, #0]
 8004cb0:	b29b      	uxth	r3, r3
 8004cb2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004cb6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004cba:	873b      	strh	r3, [r7, #56]	@ 0x38
 8004cbc:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8004cbe:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8004cc2:	873b      	strh	r3, [r7, #56]	@ 0x38
 8004cc4:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8004cc6:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8004cca:	873b      	strh	r3, [r7, #56]	@ 0x38
 8004ccc:	687a      	ldr	r2, [r7, #4]
 8004cce:	683b      	ldr	r3, [r7, #0]
 8004cd0:	781b      	ldrb	r3, [r3, #0]
 8004cd2:	009b      	lsls	r3, r3, #2
 8004cd4:	441a      	add	r2, r3
 8004cd6:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8004cd8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004cdc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004ce0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004ce4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004ce8:	b29b      	uxth	r3, r3
 8004cea:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004cec:	687a      	ldr	r2, [r7, #4]
 8004cee:	683b      	ldr	r3, [r7, #0]
 8004cf0:	781b      	ldrb	r3, [r3, #0]
 8004cf2:	009b      	lsls	r3, r3, #2
 8004cf4:	4413      	add	r3, r2
 8004cf6:	881b      	ldrh	r3, [r3, #0]
 8004cf8:	b29b      	uxth	r3, r3
 8004cfa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004cfe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004d02:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8004d04:	687a      	ldr	r2, [r7, #4]
 8004d06:	683b      	ldr	r3, [r7, #0]
 8004d08:	781b      	ldrb	r3, [r3, #0]
 8004d0a:	009b      	lsls	r3, r3, #2
 8004d0c:	441a      	add	r2, r3
 8004d0e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8004d10:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004d14:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004d18:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004d1c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004d20:	b29b      	uxth	r3, r3
 8004d22:	8013      	strh	r3, [r2, #0]
 8004d24:	e0bc      	b.n	8004ea0 <USB_ActivateEndpoint+0x770>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004d26:	687a      	ldr	r2, [r7, #4]
 8004d28:	683b      	ldr	r3, [r7, #0]
 8004d2a:	781b      	ldrb	r3, [r3, #0]
 8004d2c:	009b      	lsls	r3, r3, #2
 8004d2e:	4413      	add	r3, r2
 8004d30:	881b      	ldrh	r3, [r3, #0]
 8004d32:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8004d36:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8004d3a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d01d      	beq.n	8004d7e <USB_ActivateEndpoint+0x64e>
 8004d42:	687a      	ldr	r2, [r7, #4]
 8004d44:	683b      	ldr	r3, [r7, #0]
 8004d46:	781b      	ldrb	r3, [r3, #0]
 8004d48:	009b      	lsls	r3, r3, #2
 8004d4a:	4413      	add	r3, r2
 8004d4c:	881b      	ldrh	r3, [r3, #0]
 8004d4e:	b29b      	uxth	r3, r3
 8004d50:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004d54:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d58:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 8004d5c:	687a      	ldr	r2, [r7, #4]
 8004d5e:	683b      	ldr	r3, [r7, #0]
 8004d60:	781b      	ldrb	r3, [r3, #0]
 8004d62:	009b      	lsls	r3, r3, #2
 8004d64:	441a      	add	r2, r3
 8004d66:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8004d6a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004d6e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004d72:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004d76:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004d7a:	b29b      	uxth	r3, r3
 8004d7c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004d7e:	687a      	ldr	r2, [r7, #4]
 8004d80:	683b      	ldr	r3, [r7, #0]
 8004d82:	781b      	ldrb	r3, [r3, #0]
 8004d84:	009b      	lsls	r3, r3, #2
 8004d86:	4413      	add	r3, r2
 8004d88:	881b      	ldrh	r3, [r3, #0]
 8004d8a:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 8004d8e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8004d92:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d01d      	beq.n	8004dd6 <USB_ActivateEndpoint+0x6a6>
 8004d9a:	687a      	ldr	r2, [r7, #4]
 8004d9c:	683b      	ldr	r3, [r7, #0]
 8004d9e:	781b      	ldrb	r3, [r3, #0]
 8004da0:	009b      	lsls	r3, r3, #2
 8004da2:	4413      	add	r3, r2
 8004da4:	881b      	ldrh	r3, [r3, #0]
 8004da6:	b29b      	uxth	r3, r3
 8004da8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004dac:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004db0:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8004db4:	687a      	ldr	r2, [r7, #4]
 8004db6:	683b      	ldr	r3, [r7, #0]
 8004db8:	781b      	ldrb	r3, [r3, #0]
 8004dba:	009b      	lsls	r3, r3, #2
 8004dbc:	441a      	add	r2, r3
 8004dbe:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8004dc2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004dc6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004dca:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004dce:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004dd2:	b29b      	uxth	r3, r3
 8004dd4:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004dd6:	683b      	ldr	r3, [r7, #0]
 8004dd8:	78db      	ldrb	r3, [r3, #3]
 8004dda:	2b01      	cmp	r3, #1
 8004ddc:	d024      	beq.n	8004e28 <USB_ActivateEndpoint+0x6f8>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004dde:	687a      	ldr	r2, [r7, #4]
 8004de0:	683b      	ldr	r3, [r7, #0]
 8004de2:	781b      	ldrb	r3, [r3, #0]
 8004de4:	009b      	lsls	r3, r3, #2
 8004de6:	4413      	add	r3, r2
 8004de8:	881b      	ldrh	r3, [r3, #0]
 8004dea:	b29b      	uxth	r3, r3
 8004dec:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004df0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004df4:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8004df8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8004dfc:	f083 0320 	eor.w	r3, r3, #32
 8004e00:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8004e04:	687a      	ldr	r2, [r7, #4]
 8004e06:	683b      	ldr	r3, [r7, #0]
 8004e08:	781b      	ldrb	r3, [r3, #0]
 8004e0a:	009b      	lsls	r3, r3, #2
 8004e0c:	441a      	add	r2, r3
 8004e0e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8004e12:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004e16:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004e1a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004e1e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004e22:	b29b      	uxth	r3, r3
 8004e24:	8013      	strh	r3, [r2, #0]
 8004e26:	e01d      	b.n	8004e64 <USB_ActivateEndpoint+0x734>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004e28:	687a      	ldr	r2, [r7, #4]
 8004e2a:	683b      	ldr	r3, [r7, #0]
 8004e2c:	781b      	ldrb	r3, [r3, #0]
 8004e2e:	009b      	lsls	r3, r3, #2
 8004e30:	4413      	add	r3, r2
 8004e32:	881b      	ldrh	r3, [r3, #0]
 8004e34:	b29b      	uxth	r3, r3
 8004e36:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004e3a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004e3e:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8004e42:	687a      	ldr	r2, [r7, #4]
 8004e44:	683b      	ldr	r3, [r7, #0]
 8004e46:	781b      	ldrb	r3, [r3, #0]
 8004e48:	009b      	lsls	r3, r3, #2
 8004e4a:	441a      	add	r2, r3
 8004e4c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8004e50:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004e54:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004e58:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004e5c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004e60:	b29b      	uxth	r3, r3
 8004e62:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004e64:	687a      	ldr	r2, [r7, #4]
 8004e66:	683b      	ldr	r3, [r7, #0]
 8004e68:	781b      	ldrb	r3, [r3, #0]
 8004e6a:	009b      	lsls	r3, r3, #2
 8004e6c:	4413      	add	r3, r2
 8004e6e:	881b      	ldrh	r3, [r3, #0]
 8004e70:	b29b      	uxth	r3, r3
 8004e72:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004e76:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e7a:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8004e7e:	687a      	ldr	r2, [r7, #4]
 8004e80:	683b      	ldr	r3, [r7, #0]
 8004e82:	781b      	ldrb	r3, [r3, #0]
 8004e84:	009b      	lsls	r3, r3, #2
 8004e86:	441a      	add	r2, r3
 8004e88:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8004e8c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004e90:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004e94:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004e98:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004e9c:	b29b      	uxth	r3, r3
 8004e9e:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8004ea0:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	3774      	adds	r7, #116	@ 0x74
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	bc80      	pop	{r7}
 8004eac:	4770      	bx	lr
 8004eae:	bf00      	nop

08004eb0 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004eb0:	b480      	push	{r7}
 8004eb2:	b08d      	sub	sp, #52	@ 0x34
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	6078      	str	r0, [r7, #4]
 8004eb8:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8004eba:	683b      	ldr	r3, [r7, #0]
 8004ebc:	7b1b      	ldrb	r3, [r3, #12]
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	f040 808e 	bne.w	8004fe0 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8004ec4:	683b      	ldr	r3, [r7, #0]
 8004ec6:	785b      	ldrb	r3, [r3, #1]
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d044      	beq.n	8004f56 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004ecc:	687a      	ldr	r2, [r7, #4]
 8004ece:	683b      	ldr	r3, [r7, #0]
 8004ed0:	781b      	ldrb	r3, [r3, #0]
 8004ed2:	009b      	lsls	r3, r3, #2
 8004ed4:	4413      	add	r3, r2
 8004ed6:	881b      	ldrh	r3, [r3, #0]
 8004ed8:	81bb      	strh	r3, [r7, #12]
 8004eda:	89bb      	ldrh	r3, [r7, #12]
 8004edc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d01b      	beq.n	8004f1c <USB_DeactivateEndpoint+0x6c>
 8004ee4:	687a      	ldr	r2, [r7, #4]
 8004ee6:	683b      	ldr	r3, [r7, #0]
 8004ee8:	781b      	ldrb	r3, [r3, #0]
 8004eea:	009b      	lsls	r3, r3, #2
 8004eec:	4413      	add	r3, r2
 8004eee:	881b      	ldrh	r3, [r3, #0]
 8004ef0:	b29b      	uxth	r3, r3
 8004ef2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004ef6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004efa:	817b      	strh	r3, [r7, #10]
 8004efc:	687a      	ldr	r2, [r7, #4]
 8004efe:	683b      	ldr	r3, [r7, #0]
 8004f00:	781b      	ldrb	r3, [r3, #0]
 8004f02:	009b      	lsls	r3, r3, #2
 8004f04:	441a      	add	r2, r3
 8004f06:	897b      	ldrh	r3, [r7, #10]
 8004f08:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004f0c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004f10:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004f14:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004f18:	b29b      	uxth	r3, r3
 8004f1a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004f1c:	687a      	ldr	r2, [r7, #4]
 8004f1e:	683b      	ldr	r3, [r7, #0]
 8004f20:	781b      	ldrb	r3, [r3, #0]
 8004f22:	009b      	lsls	r3, r3, #2
 8004f24:	4413      	add	r3, r2
 8004f26:	881b      	ldrh	r3, [r3, #0]
 8004f28:	b29b      	uxth	r3, r3
 8004f2a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004f2e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004f32:	813b      	strh	r3, [r7, #8]
 8004f34:	687a      	ldr	r2, [r7, #4]
 8004f36:	683b      	ldr	r3, [r7, #0]
 8004f38:	781b      	ldrb	r3, [r3, #0]
 8004f3a:	009b      	lsls	r3, r3, #2
 8004f3c:	441a      	add	r2, r3
 8004f3e:	893b      	ldrh	r3, [r7, #8]
 8004f40:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004f44:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004f48:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004f4c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004f50:	b29b      	uxth	r3, r3
 8004f52:	8013      	strh	r3, [r2, #0]
 8004f54:	e192      	b.n	800527c <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004f56:	687a      	ldr	r2, [r7, #4]
 8004f58:	683b      	ldr	r3, [r7, #0]
 8004f5a:	781b      	ldrb	r3, [r3, #0]
 8004f5c:	009b      	lsls	r3, r3, #2
 8004f5e:	4413      	add	r3, r2
 8004f60:	881b      	ldrh	r3, [r3, #0]
 8004f62:	827b      	strh	r3, [r7, #18]
 8004f64:	8a7b      	ldrh	r3, [r7, #18]
 8004f66:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d01b      	beq.n	8004fa6 <USB_DeactivateEndpoint+0xf6>
 8004f6e:	687a      	ldr	r2, [r7, #4]
 8004f70:	683b      	ldr	r3, [r7, #0]
 8004f72:	781b      	ldrb	r3, [r3, #0]
 8004f74:	009b      	lsls	r3, r3, #2
 8004f76:	4413      	add	r3, r2
 8004f78:	881b      	ldrh	r3, [r3, #0]
 8004f7a:	b29b      	uxth	r3, r3
 8004f7c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004f80:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f84:	823b      	strh	r3, [r7, #16]
 8004f86:	687a      	ldr	r2, [r7, #4]
 8004f88:	683b      	ldr	r3, [r7, #0]
 8004f8a:	781b      	ldrb	r3, [r3, #0]
 8004f8c:	009b      	lsls	r3, r3, #2
 8004f8e:	441a      	add	r2, r3
 8004f90:	8a3b      	ldrh	r3, [r7, #16]
 8004f92:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004f96:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004f9a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004f9e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004fa2:	b29b      	uxth	r3, r3
 8004fa4:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004fa6:	687a      	ldr	r2, [r7, #4]
 8004fa8:	683b      	ldr	r3, [r7, #0]
 8004faa:	781b      	ldrb	r3, [r3, #0]
 8004fac:	009b      	lsls	r3, r3, #2
 8004fae:	4413      	add	r3, r2
 8004fb0:	881b      	ldrh	r3, [r3, #0]
 8004fb2:	b29b      	uxth	r3, r3
 8004fb4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004fb8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004fbc:	81fb      	strh	r3, [r7, #14]
 8004fbe:	687a      	ldr	r2, [r7, #4]
 8004fc0:	683b      	ldr	r3, [r7, #0]
 8004fc2:	781b      	ldrb	r3, [r3, #0]
 8004fc4:	009b      	lsls	r3, r3, #2
 8004fc6:	441a      	add	r2, r3
 8004fc8:	89fb      	ldrh	r3, [r7, #14]
 8004fca:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004fce:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004fd2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004fd6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004fda:	b29b      	uxth	r3, r3
 8004fdc:	8013      	strh	r3, [r2, #0]
 8004fde:	e14d      	b.n	800527c <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8004fe0:	683b      	ldr	r3, [r7, #0]
 8004fe2:	785b      	ldrb	r3, [r3, #1]
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	f040 80a5 	bne.w	8005134 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004fea:	687a      	ldr	r2, [r7, #4]
 8004fec:	683b      	ldr	r3, [r7, #0]
 8004fee:	781b      	ldrb	r3, [r3, #0]
 8004ff0:	009b      	lsls	r3, r3, #2
 8004ff2:	4413      	add	r3, r2
 8004ff4:	881b      	ldrh	r3, [r3, #0]
 8004ff6:	843b      	strh	r3, [r7, #32]
 8004ff8:	8c3b      	ldrh	r3, [r7, #32]
 8004ffa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d01b      	beq.n	800503a <USB_DeactivateEndpoint+0x18a>
 8005002:	687a      	ldr	r2, [r7, #4]
 8005004:	683b      	ldr	r3, [r7, #0]
 8005006:	781b      	ldrb	r3, [r3, #0]
 8005008:	009b      	lsls	r3, r3, #2
 800500a:	4413      	add	r3, r2
 800500c:	881b      	ldrh	r3, [r3, #0]
 800500e:	b29b      	uxth	r3, r3
 8005010:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005014:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005018:	83fb      	strh	r3, [r7, #30]
 800501a:	687a      	ldr	r2, [r7, #4]
 800501c:	683b      	ldr	r3, [r7, #0]
 800501e:	781b      	ldrb	r3, [r3, #0]
 8005020:	009b      	lsls	r3, r3, #2
 8005022:	441a      	add	r2, r3
 8005024:	8bfb      	ldrh	r3, [r7, #30]
 8005026:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800502a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800502e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005032:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005036:	b29b      	uxth	r3, r3
 8005038:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800503a:	687a      	ldr	r2, [r7, #4]
 800503c:	683b      	ldr	r3, [r7, #0]
 800503e:	781b      	ldrb	r3, [r3, #0]
 8005040:	009b      	lsls	r3, r3, #2
 8005042:	4413      	add	r3, r2
 8005044:	881b      	ldrh	r3, [r3, #0]
 8005046:	83bb      	strh	r3, [r7, #28]
 8005048:	8bbb      	ldrh	r3, [r7, #28]
 800504a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800504e:	2b00      	cmp	r3, #0
 8005050:	d01b      	beq.n	800508a <USB_DeactivateEndpoint+0x1da>
 8005052:	687a      	ldr	r2, [r7, #4]
 8005054:	683b      	ldr	r3, [r7, #0]
 8005056:	781b      	ldrb	r3, [r3, #0]
 8005058:	009b      	lsls	r3, r3, #2
 800505a:	4413      	add	r3, r2
 800505c:	881b      	ldrh	r3, [r3, #0]
 800505e:	b29b      	uxth	r3, r3
 8005060:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005064:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005068:	837b      	strh	r3, [r7, #26]
 800506a:	687a      	ldr	r2, [r7, #4]
 800506c:	683b      	ldr	r3, [r7, #0]
 800506e:	781b      	ldrb	r3, [r3, #0]
 8005070:	009b      	lsls	r3, r3, #2
 8005072:	441a      	add	r2, r3
 8005074:	8b7b      	ldrh	r3, [r7, #26]
 8005076:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800507a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800507e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005082:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005086:	b29b      	uxth	r3, r3
 8005088:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800508a:	687a      	ldr	r2, [r7, #4]
 800508c:	683b      	ldr	r3, [r7, #0]
 800508e:	781b      	ldrb	r3, [r3, #0]
 8005090:	009b      	lsls	r3, r3, #2
 8005092:	4413      	add	r3, r2
 8005094:	881b      	ldrh	r3, [r3, #0]
 8005096:	b29b      	uxth	r3, r3
 8005098:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800509c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80050a0:	833b      	strh	r3, [r7, #24]
 80050a2:	687a      	ldr	r2, [r7, #4]
 80050a4:	683b      	ldr	r3, [r7, #0]
 80050a6:	781b      	ldrb	r3, [r3, #0]
 80050a8:	009b      	lsls	r3, r3, #2
 80050aa:	441a      	add	r2, r3
 80050ac:	8b3b      	ldrh	r3, [r7, #24]
 80050ae:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80050b2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80050b6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80050ba:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80050be:	b29b      	uxth	r3, r3
 80050c0:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80050c2:	687a      	ldr	r2, [r7, #4]
 80050c4:	683b      	ldr	r3, [r7, #0]
 80050c6:	781b      	ldrb	r3, [r3, #0]
 80050c8:	009b      	lsls	r3, r3, #2
 80050ca:	4413      	add	r3, r2
 80050cc:	881b      	ldrh	r3, [r3, #0]
 80050ce:	b29b      	uxth	r3, r3
 80050d0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80050d4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80050d8:	82fb      	strh	r3, [r7, #22]
 80050da:	687a      	ldr	r2, [r7, #4]
 80050dc:	683b      	ldr	r3, [r7, #0]
 80050de:	781b      	ldrb	r3, [r3, #0]
 80050e0:	009b      	lsls	r3, r3, #2
 80050e2:	441a      	add	r2, r3
 80050e4:	8afb      	ldrh	r3, [r7, #22]
 80050e6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80050ea:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80050ee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80050f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80050f6:	b29b      	uxth	r3, r3
 80050f8:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80050fa:	687a      	ldr	r2, [r7, #4]
 80050fc:	683b      	ldr	r3, [r7, #0]
 80050fe:	781b      	ldrb	r3, [r3, #0]
 8005100:	009b      	lsls	r3, r3, #2
 8005102:	4413      	add	r3, r2
 8005104:	881b      	ldrh	r3, [r3, #0]
 8005106:	b29b      	uxth	r3, r3
 8005108:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800510c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005110:	82bb      	strh	r3, [r7, #20]
 8005112:	687a      	ldr	r2, [r7, #4]
 8005114:	683b      	ldr	r3, [r7, #0]
 8005116:	781b      	ldrb	r3, [r3, #0]
 8005118:	009b      	lsls	r3, r3, #2
 800511a:	441a      	add	r2, r3
 800511c:	8abb      	ldrh	r3, [r7, #20]
 800511e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005122:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005126:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800512a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800512e:	b29b      	uxth	r3, r3
 8005130:	8013      	strh	r3, [r2, #0]
 8005132:	e0a3      	b.n	800527c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005134:	687a      	ldr	r2, [r7, #4]
 8005136:	683b      	ldr	r3, [r7, #0]
 8005138:	781b      	ldrb	r3, [r3, #0]
 800513a:	009b      	lsls	r3, r3, #2
 800513c:	4413      	add	r3, r2
 800513e:	881b      	ldrh	r3, [r3, #0]
 8005140:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8005142:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8005144:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005148:	2b00      	cmp	r3, #0
 800514a:	d01b      	beq.n	8005184 <USB_DeactivateEndpoint+0x2d4>
 800514c:	687a      	ldr	r2, [r7, #4]
 800514e:	683b      	ldr	r3, [r7, #0]
 8005150:	781b      	ldrb	r3, [r3, #0]
 8005152:	009b      	lsls	r3, r3, #2
 8005154:	4413      	add	r3, r2
 8005156:	881b      	ldrh	r3, [r3, #0]
 8005158:	b29b      	uxth	r3, r3
 800515a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800515e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005162:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8005164:	687a      	ldr	r2, [r7, #4]
 8005166:	683b      	ldr	r3, [r7, #0]
 8005168:	781b      	ldrb	r3, [r3, #0]
 800516a:	009b      	lsls	r3, r3, #2
 800516c:	441a      	add	r2, r3
 800516e:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8005170:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005174:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005178:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800517c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005180:	b29b      	uxth	r3, r3
 8005182:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005184:	687a      	ldr	r2, [r7, #4]
 8005186:	683b      	ldr	r3, [r7, #0]
 8005188:	781b      	ldrb	r3, [r3, #0]
 800518a:	009b      	lsls	r3, r3, #2
 800518c:	4413      	add	r3, r2
 800518e:	881b      	ldrh	r3, [r3, #0]
 8005190:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8005192:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8005194:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005198:	2b00      	cmp	r3, #0
 800519a:	d01b      	beq.n	80051d4 <USB_DeactivateEndpoint+0x324>
 800519c:	687a      	ldr	r2, [r7, #4]
 800519e:	683b      	ldr	r3, [r7, #0]
 80051a0:	781b      	ldrb	r3, [r3, #0]
 80051a2:	009b      	lsls	r3, r3, #2
 80051a4:	4413      	add	r3, r2
 80051a6:	881b      	ldrh	r3, [r3, #0]
 80051a8:	b29b      	uxth	r3, r3
 80051aa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80051ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80051b2:	853b      	strh	r3, [r7, #40]	@ 0x28
 80051b4:	687a      	ldr	r2, [r7, #4]
 80051b6:	683b      	ldr	r3, [r7, #0]
 80051b8:	781b      	ldrb	r3, [r3, #0]
 80051ba:	009b      	lsls	r3, r3, #2
 80051bc:	441a      	add	r2, r3
 80051be:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80051c0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80051c4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80051c8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80051cc:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80051d0:	b29b      	uxth	r3, r3
 80051d2:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80051d4:	687a      	ldr	r2, [r7, #4]
 80051d6:	683b      	ldr	r3, [r7, #0]
 80051d8:	781b      	ldrb	r3, [r3, #0]
 80051da:	009b      	lsls	r3, r3, #2
 80051dc:	4413      	add	r3, r2
 80051de:	881b      	ldrh	r3, [r3, #0]
 80051e0:	b29b      	uxth	r3, r3
 80051e2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80051e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80051ea:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80051ec:	687a      	ldr	r2, [r7, #4]
 80051ee:	683b      	ldr	r3, [r7, #0]
 80051f0:	781b      	ldrb	r3, [r3, #0]
 80051f2:	009b      	lsls	r3, r3, #2
 80051f4:	441a      	add	r2, r3
 80051f6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80051f8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80051fc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005200:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005204:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005208:	b29b      	uxth	r3, r3
 800520a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800520c:	687a      	ldr	r2, [r7, #4]
 800520e:	683b      	ldr	r3, [r7, #0]
 8005210:	781b      	ldrb	r3, [r3, #0]
 8005212:	009b      	lsls	r3, r3, #2
 8005214:	4413      	add	r3, r2
 8005216:	881b      	ldrh	r3, [r3, #0]
 8005218:	b29b      	uxth	r3, r3
 800521a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800521e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005222:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8005224:	687a      	ldr	r2, [r7, #4]
 8005226:	683b      	ldr	r3, [r7, #0]
 8005228:	781b      	ldrb	r3, [r3, #0]
 800522a:	009b      	lsls	r3, r3, #2
 800522c:	441a      	add	r2, r3
 800522e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005230:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005234:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005238:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800523c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005240:	b29b      	uxth	r3, r3
 8005242:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005244:	687a      	ldr	r2, [r7, #4]
 8005246:	683b      	ldr	r3, [r7, #0]
 8005248:	781b      	ldrb	r3, [r3, #0]
 800524a:	009b      	lsls	r3, r3, #2
 800524c:	4413      	add	r3, r2
 800524e:	881b      	ldrh	r3, [r3, #0]
 8005250:	b29b      	uxth	r3, r3
 8005252:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005256:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800525a:	847b      	strh	r3, [r7, #34]	@ 0x22
 800525c:	687a      	ldr	r2, [r7, #4]
 800525e:	683b      	ldr	r3, [r7, #0]
 8005260:	781b      	ldrb	r3, [r3, #0]
 8005262:	009b      	lsls	r3, r3, #2
 8005264:	441a      	add	r2, r3
 8005266:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005268:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800526c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005270:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005274:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005278:	b29b      	uxth	r3, r3
 800527a:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800527c:	2300      	movs	r3, #0
}
 800527e:	4618      	mov	r0, r3
 8005280:	3734      	adds	r7, #52	@ 0x34
 8005282:	46bd      	mov	sp, r7
 8005284:	bc80      	pop	{r7}
 8005286:	4770      	bx	lr

08005288 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005288:	b580      	push	{r7, lr}
 800528a:	b0c2      	sub	sp, #264	@ 0x108
 800528c:	af00      	add	r7, sp, #0
 800528e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005292:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005296:	6018      	str	r0, [r3, #0]
 8005298:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800529c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80052a0:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 80052a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80052a6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	785b      	ldrb	r3, [r3, #1]
 80052ae:	2b01      	cmp	r3, #1
 80052b0:	f040 86b7 	bne.w	8006022 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80052b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80052b8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	699a      	ldr	r2, [r3, #24]
 80052c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80052c4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	691b      	ldr	r3, [r3, #16]
 80052cc:	429a      	cmp	r2, r3
 80052ce:	d908      	bls.n	80052e2 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 80052d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80052d4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	691b      	ldr	r3, [r3, #16]
 80052dc:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80052e0:	e007      	b.n	80052f2 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 80052e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80052e6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	699b      	ldr	r3, [r3, #24]
 80052ee:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80052f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80052f6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	7b1b      	ldrb	r3, [r3, #12]
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d13a      	bne.n	8005378 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8005302:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005306:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	6959      	ldr	r1, [r3, #20]
 800530e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005312:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	88da      	ldrh	r2, [r3, #6]
 800531a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800531e:	b29b      	uxth	r3, r3
 8005320:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005324:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005328:	6800      	ldr	r0, [r0, #0]
 800532a:	f001 fc9c 	bl	8006c66 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800532e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005332:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	613b      	str	r3, [r7, #16]
 800533a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800533e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005348:	b29b      	uxth	r3, r3
 800534a:	461a      	mov	r2, r3
 800534c:	693b      	ldr	r3, [r7, #16]
 800534e:	4413      	add	r3, r2
 8005350:	613b      	str	r3, [r7, #16]
 8005352:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005356:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	781b      	ldrb	r3, [r3, #0]
 800535e:	011a      	lsls	r2, r3, #4
 8005360:	693b      	ldr	r3, [r7, #16]
 8005362:	4413      	add	r3, r2
 8005364:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005368:	60fb      	str	r3, [r7, #12]
 800536a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800536e:	b29a      	uxth	r2, r3
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	801a      	strh	r2, [r3, #0]
 8005374:	f000 be1f 	b.w	8005fb6 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8005378:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800537c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	78db      	ldrb	r3, [r3, #3]
 8005384:	2b02      	cmp	r3, #2
 8005386:	f040 8462 	bne.w	8005c4e <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800538a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800538e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	6a1a      	ldr	r2, [r3, #32]
 8005396:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800539a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	691b      	ldr	r3, [r3, #16]
 80053a2:	429a      	cmp	r2, r3
 80053a4:	f240 83df 	bls.w	8005b66 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80053a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80053ac:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80053b0:	681a      	ldr	r2, [r3, #0]
 80053b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80053b6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	781b      	ldrb	r3, [r3, #0]
 80053be:	009b      	lsls	r3, r3, #2
 80053c0:	4413      	add	r3, r2
 80053c2:	881b      	ldrh	r3, [r3, #0]
 80053c4:	b29b      	uxth	r3, r3
 80053c6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80053ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80053ce:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 80053d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80053d6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80053da:	681a      	ldr	r2, [r3, #0]
 80053dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80053e0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	781b      	ldrb	r3, [r3, #0]
 80053e8:	009b      	lsls	r3, r3, #2
 80053ea:	441a      	add	r2, r3
 80053ec:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 80053f0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80053f4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80053f8:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 80053fc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005400:	b29b      	uxth	r3, r3
 8005402:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8005404:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005408:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	6a1a      	ldr	r2, [r3, #32]
 8005410:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005414:	1ad2      	subs	r2, r2, r3
 8005416:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800541a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005422:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005426:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800542a:	681a      	ldr	r2, [r3, #0]
 800542c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005430:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	781b      	ldrb	r3, [r3, #0]
 8005438:	009b      	lsls	r3, r3, #2
 800543a:	4413      	add	r3, r2
 800543c:	881b      	ldrh	r3, [r3, #0]
 800543e:	b29b      	uxth	r3, r3
 8005440:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005444:	2b00      	cmp	r3, #0
 8005446:	f000 81c7 	beq.w	80057d8 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800544a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800544e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	633b      	str	r3, [r7, #48]	@ 0x30
 8005456:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800545a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	785b      	ldrb	r3, [r3, #1]
 8005462:	2b00      	cmp	r3, #0
 8005464:	d177      	bne.n	8005556 <USB_EPStartXfer+0x2ce>
 8005466:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800546a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005472:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005476:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005480:	b29b      	uxth	r3, r3
 8005482:	461a      	mov	r2, r3
 8005484:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005486:	4413      	add	r3, r2
 8005488:	62bb      	str	r3, [r7, #40]	@ 0x28
 800548a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800548e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	781b      	ldrb	r3, [r3, #0]
 8005496:	011a      	lsls	r2, r3, #4
 8005498:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800549a:	4413      	add	r3, r2
 800549c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80054a0:	627b      	str	r3, [r7, #36]	@ 0x24
 80054a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054a4:	881b      	ldrh	r3, [r3, #0]
 80054a6:	b29b      	uxth	r3, r3
 80054a8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80054ac:	b29a      	uxth	r2, r3
 80054ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054b0:	801a      	strh	r2, [r3, #0]
 80054b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80054b6:	2b3e      	cmp	r3, #62	@ 0x3e
 80054b8:	d921      	bls.n	80054fe <USB_EPStartXfer+0x276>
 80054ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80054be:	095b      	lsrs	r3, r3, #5
 80054c0:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80054c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80054c8:	f003 031f 	and.w	r3, r3, #31
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d104      	bne.n	80054da <USB_EPStartXfer+0x252>
 80054d0:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80054d4:	3b01      	subs	r3, #1
 80054d6:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80054da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054dc:	881b      	ldrh	r3, [r3, #0]
 80054de:	b29a      	uxth	r2, r3
 80054e0:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80054e4:	b29b      	uxth	r3, r3
 80054e6:	029b      	lsls	r3, r3, #10
 80054e8:	b29b      	uxth	r3, r3
 80054ea:	4313      	orrs	r3, r2
 80054ec:	b29b      	uxth	r3, r3
 80054ee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80054f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80054f6:	b29a      	uxth	r2, r3
 80054f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054fa:	801a      	strh	r2, [r3, #0]
 80054fc:	e050      	b.n	80055a0 <USB_EPStartXfer+0x318>
 80054fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005502:	2b00      	cmp	r3, #0
 8005504:	d10a      	bne.n	800551c <USB_EPStartXfer+0x294>
 8005506:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005508:	881b      	ldrh	r3, [r3, #0]
 800550a:	b29b      	uxth	r3, r3
 800550c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005510:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005514:	b29a      	uxth	r2, r3
 8005516:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005518:	801a      	strh	r2, [r3, #0]
 800551a:	e041      	b.n	80055a0 <USB_EPStartXfer+0x318>
 800551c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005520:	085b      	lsrs	r3, r3, #1
 8005522:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8005526:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800552a:	f003 0301 	and.w	r3, r3, #1
 800552e:	2b00      	cmp	r3, #0
 8005530:	d004      	beq.n	800553c <USB_EPStartXfer+0x2b4>
 8005532:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8005536:	3301      	adds	r3, #1
 8005538:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800553c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800553e:	881b      	ldrh	r3, [r3, #0]
 8005540:	b29a      	uxth	r2, r3
 8005542:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8005546:	b29b      	uxth	r3, r3
 8005548:	029b      	lsls	r3, r3, #10
 800554a:	b29b      	uxth	r3, r3
 800554c:	4313      	orrs	r3, r2
 800554e:	b29a      	uxth	r2, r3
 8005550:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005552:	801a      	strh	r2, [r3, #0]
 8005554:	e024      	b.n	80055a0 <USB_EPStartXfer+0x318>
 8005556:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800555a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	785b      	ldrb	r3, [r3, #1]
 8005562:	2b01      	cmp	r3, #1
 8005564:	d11c      	bne.n	80055a0 <USB_EPStartXfer+0x318>
 8005566:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800556a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005574:	b29b      	uxth	r3, r3
 8005576:	461a      	mov	r2, r3
 8005578:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800557a:	4413      	add	r3, r2
 800557c:	633b      	str	r3, [r7, #48]	@ 0x30
 800557e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005582:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	781b      	ldrb	r3, [r3, #0]
 800558a:	011a      	lsls	r2, r3, #4
 800558c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800558e:	4413      	add	r3, r2
 8005590:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005594:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005596:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800559a:	b29a      	uxth	r2, r3
 800559c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800559e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80055a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80055a4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	895b      	ldrh	r3, [r3, #10]
 80055ac:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80055b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80055b4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	6959      	ldr	r1, [r3, #20]
 80055bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80055c0:	b29b      	uxth	r3, r3
 80055c2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80055c6:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80055ca:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80055ce:	6800      	ldr	r0, [r0, #0]
 80055d0:	f001 fb49 	bl	8006c66 <USB_WritePMA>
            ep->xfer_buff += len;
 80055d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80055d8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	695a      	ldr	r2, [r3, #20]
 80055e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80055e4:	441a      	add	r2, r3
 80055e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80055ea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80055f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80055f6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	6a1a      	ldr	r2, [r3, #32]
 80055fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005602:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	691b      	ldr	r3, [r3, #16]
 800560a:	429a      	cmp	r2, r3
 800560c:	d90f      	bls.n	800562e <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 800560e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005612:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	6a1a      	ldr	r2, [r3, #32]
 800561a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800561e:	1ad2      	subs	r2, r2, r3
 8005620:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005624:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	621a      	str	r2, [r3, #32]
 800562c:	e00e      	b.n	800564c <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 800562e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005632:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	6a1b      	ldr	r3, [r3, #32]
 800563a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 800563e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005642:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	2200      	movs	r2, #0
 800564a:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800564c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005650:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	785b      	ldrb	r3, [r3, #1]
 8005658:	2b00      	cmp	r3, #0
 800565a:	d177      	bne.n	800574c <USB_EPStartXfer+0x4c4>
 800565c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005660:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	61bb      	str	r3, [r7, #24]
 8005668:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800566c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005676:	b29b      	uxth	r3, r3
 8005678:	461a      	mov	r2, r3
 800567a:	69bb      	ldr	r3, [r7, #24]
 800567c:	4413      	add	r3, r2
 800567e:	61bb      	str	r3, [r7, #24]
 8005680:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005684:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	781b      	ldrb	r3, [r3, #0]
 800568c:	011a      	lsls	r2, r3, #4
 800568e:	69bb      	ldr	r3, [r7, #24]
 8005690:	4413      	add	r3, r2
 8005692:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005696:	617b      	str	r3, [r7, #20]
 8005698:	697b      	ldr	r3, [r7, #20]
 800569a:	881b      	ldrh	r3, [r3, #0]
 800569c:	b29b      	uxth	r3, r3
 800569e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80056a2:	b29a      	uxth	r2, r3
 80056a4:	697b      	ldr	r3, [r7, #20]
 80056a6:	801a      	strh	r2, [r3, #0]
 80056a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80056ac:	2b3e      	cmp	r3, #62	@ 0x3e
 80056ae:	d921      	bls.n	80056f4 <USB_EPStartXfer+0x46c>
 80056b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80056b4:	095b      	lsrs	r3, r3, #5
 80056b6:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80056ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80056be:	f003 031f 	and.w	r3, r3, #31
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d104      	bne.n	80056d0 <USB_EPStartXfer+0x448>
 80056c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80056ca:	3b01      	subs	r3, #1
 80056cc:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80056d0:	697b      	ldr	r3, [r7, #20]
 80056d2:	881b      	ldrh	r3, [r3, #0]
 80056d4:	b29a      	uxth	r2, r3
 80056d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80056da:	b29b      	uxth	r3, r3
 80056dc:	029b      	lsls	r3, r3, #10
 80056de:	b29b      	uxth	r3, r3
 80056e0:	4313      	orrs	r3, r2
 80056e2:	b29b      	uxth	r3, r3
 80056e4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80056e8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80056ec:	b29a      	uxth	r2, r3
 80056ee:	697b      	ldr	r3, [r7, #20]
 80056f0:	801a      	strh	r2, [r3, #0]
 80056f2:	e056      	b.n	80057a2 <USB_EPStartXfer+0x51a>
 80056f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d10a      	bne.n	8005712 <USB_EPStartXfer+0x48a>
 80056fc:	697b      	ldr	r3, [r7, #20]
 80056fe:	881b      	ldrh	r3, [r3, #0]
 8005700:	b29b      	uxth	r3, r3
 8005702:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005706:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800570a:	b29a      	uxth	r2, r3
 800570c:	697b      	ldr	r3, [r7, #20]
 800570e:	801a      	strh	r2, [r3, #0]
 8005710:	e047      	b.n	80057a2 <USB_EPStartXfer+0x51a>
 8005712:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005716:	085b      	lsrs	r3, r3, #1
 8005718:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800571c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005720:	f003 0301 	and.w	r3, r3, #1
 8005724:	2b00      	cmp	r3, #0
 8005726:	d004      	beq.n	8005732 <USB_EPStartXfer+0x4aa>
 8005728:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800572c:	3301      	adds	r3, #1
 800572e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005732:	697b      	ldr	r3, [r7, #20]
 8005734:	881b      	ldrh	r3, [r3, #0]
 8005736:	b29a      	uxth	r2, r3
 8005738:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800573c:	b29b      	uxth	r3, r3
 800573e:	029b      	lsls	r3, r3, #10
 8005740:	b29b      	uxth	r3, r3
 8005742:	4313      	orrs	r3, r2
 8005744:	b29a      	uxth	r2, r3
 8005746:	697b      	ldr	r3, [r7, #20]
 8005748:	801a      	strh	r2, [r3, #0]
 800574a:	e02a      	b.n	80057a2 <USB_EPStartXfer+0x51a>
 800574c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005750:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	785b      	ldrb	r3, [r3, #1]
 8005758:	2b01      	cmp	r3, #1
 800575a:	d122      	bne.n	80057a2 <USB_EPStartXfer+0x51a>
 800575c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005760:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	623b      	str	r3, [r7, #32]
 8005768:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800576c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005776:	b29b      	uxth	r3, r3
 8005778:	461a      	mov	r2, r3
 800577a:	6a3b      	ldr	r3, [r7, #32]
 800577c:	4413      	add	r3, r2
 800577e:	623b      	str	r3, [r7, #32]
 8005780:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005784:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	781b      	ldrb	r3, [r3, #0]
 800578c:	011a      	lsls	r2, r3, #4
 800578e:	6a3b      	ldr	r3, [r7, #32]
 8005790:	4413      	add	r3, r2
 8005792:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005796:	61fb      	str	r3, [r7, #28]
 8005798:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800579c:	b29a      	uxth	r2, r3
 800579e:	69fb      	ldr	r3, [r7, #28]
 80057a0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80057a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80057a6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	891b      	ldrh	r3, [r3, #8]
 80057ae:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80057b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80057b6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	6959      	ldr	r1, [r3, #20]
 80057be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80057c2:	b29b      	uxth	r3, r3
 80057c4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80057c8:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80057cc:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80057d0:	6800      	ldr	r0, [r0, #0]
 80057d2:	f001 fa48 	bl	8006c66 <USB_WritePMA>
 80057d6:	e3ee      	b.n	8005fb6 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80057d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80057dc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	785b      	ldrb	r3, [r3, #1]
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d177      	bne.n	80058d8 <USB_EPStartXfer+0x650>
 80057e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80057ec:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80057f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80057f8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005802:	b29b      	uxth	r3, r3
 8005804:	461a      	mov	r2, r3
 8005806:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005808:	4413      	add	r3, r2
 800580a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800580c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005810:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	781b      	ldrb	r3, [r3, #0]
 8005818:	011a      	lsls	r2, r3, #4
 800581a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800581c:	4413      	add	r3, r2
 800581e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005822:	647b      	str	r3, [r7, #68]	@ 0x44
 8005824:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005826:	881b      	ldrh	r3, [r3, #0]
 8005828:	b29b      	uxth	r3, r3
 800582a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800582e:	b29a      	uxth	r2, r3
 8005830:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005832:	801a      	strh	r2, [r3, #0]
 8005834:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005838:	2b3e      	cmp	r3, #62	@ 0x3e
 800583a:	d921      	bls.n	8005880 <USB_EPStartXfer+0x5f8>
 800583c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005840:	095b      	lsrs	r3, r3, #5
 8005842:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8005846:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800584a:	f003 031f 	and.w	r3, r3, #31
 800584e:	2b00      	cmp	r3, #0
 8005850:	d104      	bne.n	800585c <USB_EPStartXfer+0x5d4>
 8005852:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005856:	3b01      	subs	r3, #1
 8005858:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800585c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800585e:	881b      	ldrh	r3, [r3, #0]
 8005860:	b29a      	uxth	r2, r3
 8005862:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005866:	b29b      	uxth	r3, r3
 8005868:	029b      	lsls	r3, r3, #10
 800586a:	b29b      	uxth	r3, r3
 800586c:	4313      	orrs	r3, r2
 800586e:	b29b      	uxth	r3, r3
 8005870:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005874:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005878:	b29a      	uxth	r2, r3
 800587a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800587c:	801a      	strh	r2, [r3, #0]
 800587e:	e056      	b.n	800592e <USB_EPStartXfer+0x6a6>
 8005880:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005884:	2b00      	cmp	r3, #0
 8005886:	d10a      	bne.n	800589e <USB_EPStartXfer+0x616>
 8005888:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800588a:	881b      	ldrh	r3, [r3, #0]
 800588c:	b29b      	uxth	r3, r3
 800588e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005892:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005896:	b29a      	uxth	r2, r3
 8005898:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800589a:	801a      	strh	r2, [r3, #0]
 800589c:	e047      	b.n	800592e <USB_EPStartXfer+0x6a6>
 800589e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80058a2:	085b      	lsrs	r3, r3, #1
 80058a4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80058a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80058ac:	f003 0301 	and.w	r3, r3, #1
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d004      	beq.n	80058be <USB_EPStartXfer+0x636>
 80058b4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80058b8:	3301      	adds	r3, #1
 80058ba:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80058be:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80058c0:	881b      	ldrh	r3, [r3, #0]
 80058c2:	b29a      	uxth	r2, r3
 80058c4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80058c8:	b29b      	uxth	r3, r3
 80058ca:	029b      	lsls	r3, r3, #10
 80058cc:	b29b      	uxth	r3, r3
 80058ce:	4313      	orrs	r3, r2
 80058d0:	b29a      	uxth	r2, r3
 80058d2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80058d4:	801a      	strh	r2, [r3, #0]
 80058d6:	e02a      	b.n	800592e <USB_EPStartXfer+0x6a6>
 80058d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80058dc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	785b      	ldrb	r3, [r3, #1]
 80058e4:	2b01      	cmp	r3, #1
 80058e6:	d122      	bne.n	800592e <USB_EPStartXfer+0x6a6>
 80058e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80058ec:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	653b      	str	r3, [r7, #80]	@ 0x50
 80058f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80058f8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005902:	b29b      	uxth	r3, r3
 8005904:	461a      	mov	r2, r3
 8005906:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005908:	4413      	add	r3, r2
 800590a:	653b      	str	r3, [r7, #80]	@ 0x50
 800590c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005910:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	781b      	ldrb	r3, [r3, #0]
 8005918:	011a      	lsls	r2, r3, #4
 800591a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800591c:	4413      	add	r3, r2
 800591e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005922:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005924:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005928:	b29a      	uxth	r2, r3
 800592a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800592c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800592e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005932:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	891b      	ldrh	r3, [r3, #8]
 800593a:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800593e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005942:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	6959      	ldr	r1, [r3, #20]
 800594a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800594e:	b29b      	uxth	r3, r3
 8005950:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005954:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005958:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800595c:	6800      	ldr	r0, [r0, #0]
 800595e:	f001 f982 	bl	8006c66 <USB_WritePMA>
            ep->xfer_buff += len;
 8005962:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005966:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	695a      	ldr	r2, [r3, #20]
 800596e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005972:	441a      	add	r2, r3
 8005974:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005978:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005980:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005984:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	6a1a      	ldr	r2, [r3, #32]
 800598c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005990:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	691b      	ldr	r3, [r3, #16]
 8005998:	429a      	cmp	r2, r3
 800599a:	d90f      	bls.n	80059bc <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 800599c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80059a0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	6a1a      	ldr	r2, [r3, #32]
 80059a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80059ac:	1ad2      	subs	r2, r2, r3
 80059ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80059b2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	621a      	str	r2, [r3, #32]
 80059ba:	e00e      	b.n	80059da <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 80059bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80059c0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	6a1b      	ldr	r3, [r3, #32]
 80059c8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 80059cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80059d0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	2200      	movs	r2, #0
 80059d8:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80059da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80059de:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	643b      	str	r3, [r7, #64]	@ 0x40
 80059e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80059ea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	785b      	ldrb	r3, [r3, #1]
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d177      	bne.n	8005ae6 <USB_EPStartXfer+0x85e>
 80059f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80059fa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005a02:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a06:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005a10:	b29b      	uxth	r3, r3
 8005a12:	461a      	mov	r2, r3
 8005a14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a16:	4413      	add	r3, r2
 8005a18:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005a1a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a1e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	781b      	ldrb	r3, [r3, #0]
 8005a26:	011a      	lsls	r2, r3, #4
 8005a28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a2a:	4413      	add	r3, r2
 8005a2c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005a30:	637b      	str	r3, [r7, #52]	@ 0x34
 8005a32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a34:	881b      	ldrh	r3, [r3, #0]
 8005a36:	b29b      	uxth	r3, r3
 8005a38:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005a3c:	b29a      	uxth	r2, r3
 8005a3e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a40:	801a      	strh	r2, [r3, #0]
 8005a42:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a46:	2b3e      	cmp	r3, #62	@ 0x3e
 8005a48:	d921      	bls.n	8005a8e <USB_EPStartXfer+0x806>
 8005a4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a4e:	095b      	lsrs	r3, r3, #5
 8005a50:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005a54:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a58:	f003 031f 	and.w	r3, r3, #31
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d104      	bne.n	8005a6a <USB_EPStartXfer+0x7e2>
 8005a60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a64:	3b01      	subs	r3, #1
 8005a66:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005a6a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a6c:	881b      	ldrh	r3, [r3, #0]
 8005a6e:	b29a      	uxth	r2, r3
 8005a70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a74:	b29b      	uxth	r3, r3
 8005a76:	029b      	lsls	r3, r3, #10
 8005a78:	b29b      	uxth	r3, r3
 8005a7a:	4313      	orrs	r3, r2
 8005a7c:	b29b      	uxth	r3, r3
 8005a7e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a82:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a86:	b29a      	uxth	r2, r3
 8005a88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a8a:	801a      	strh	r2, [r3, #0]
 8005a8c:	e050      	b.n	8005b30 <USB_EPStartXfer+0x8a8>
 8005a8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d10a      	bne.n	8005aac <USB_EPStartXfer+0x824>
 8005a96:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a98:	881b      	ldrh	r3, [r3, #0]
 8005a9a:	b29b      	uxth	r3, r3
 8005a9c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005aa0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005aa4:	b29a      	uxth	r2, r3
 8005aa6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005aa8:	801a      	strh	r2, [r3, #0]
 8005aaa:	e041      	b.n	8005b30 <USB_EPStartXfer+0x8a8>
 8005aac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ab0:	085b      	lsrs	r3, r3, #1
 8005ab2:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005ab6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005aba:	f003 0301 	and.w	r3, r3, #1
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d004      	beq.n	8005acc <USB_EPStartXfer+0x844>
 8005ac2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ac6:	3301      	adds	r3, #1
 8005ac8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005acc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ace:	881b      	ldrh	r3, [r3, #0]
 8005ad0:	b29a      	uxth	r2, r3
 8005ad2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ad6:	b29b      	uxth	r3, r3
 8005ad8:	029b      	lsls	r3, r3, #10
 8005ada:	b29b      	uxth	r3, r3
 8005adc:	4313      	orrs	r3, r2
 8005ade:	b29a      	uxth	r2, r3
 8005ae0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ae2:	801a      	strh	r2, [r3, #0]
 8005ae4:	e024      	b.n	8005b30 <USB_EPStartXfer+0x8a8>
 8005ae6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005aea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	785b      	ldrb	r3, [r3, #1]
 8005af2:	2b01      	cmp	r3, #1
 8005af4:	d11c      	bne.n	8005b30 <USB_EPStartXfer+0x8a8>
 8005af6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005afa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005b04:	b29b      	uxth	r3, r3
 8005b06:	461a      	mov	r2, r3
 8005b08:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005b0a:	4413      	add	r3, r2
 8005b0c:	643b      	str	r3, [r7, #64]	@ 0x40
 8005b0e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b12:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	781b      	ldrb	r3, [r3, #0]
 8005b1a:	011a      	lsls	r2, r3, #4
 8005b1c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005b1e:	4413      	add	r3, r2
 8005b20:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005b24:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005b26:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b2a:	b29a      	uxth	r2, r3
 8005b2c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005b2e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005b30:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b34:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	895b      	ldrh	r3, [r3, #10]
 8005b3c:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005b40:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b44:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	6959      	ldr	r1, [r3, #20]
 8005b4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b50:	b29b      	uxth	r3, r3
 8005b52:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005b56:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005b5a:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005b5e:	6800      	ldr	r0, [r0, #0]
 8005b60:	f001 f881 	bl	8006c66 <USB_WritePMA>
 8005b64:	e227      	b.n	8005fb6 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8005b66:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b6a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	6a1b      	ldr	r3, [r3, #32]
 8005b72:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8005b76:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b7a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005b7e:	681a      	ldr	r2, [r3, #0]
 8005b80:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b84:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	781b      	ldrb	r3, [r3, #0]
 8005b8c:	009b      	lsls	r3, r3, #2
 8005b8e:	4413      	add	r3, r2
 8005b90:	881b      	ldrh	r3, [r3, #0]
 8005b92:	b29b      	uxth	r3, r3
 8005b94:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8005b98:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b9c:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8005ba0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ba4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005ba8:	681a      	ldr	r2, [r3, #0]
 8005baa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005bae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	781b      	ldrb	r3, [r3, #0]
 8005bb6:	009b      	lsls	r3, r3, #2
 8005bb8:	441a      	add	r2, r3
 8005bba:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8005bbe:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005bc2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005bc6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005bca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005bce:	b29b      	uxth	r3, r3
 8005bd0:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005bd2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005bd6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005bde:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005be2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005bec:	b29b      	uxth	r3, r3
 8005bee:	461a      	mov	r2, r3
 8005bf0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005bf2:	4413      	add	r3, r2
 8005bf4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005bf6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005bfa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	781b      	ldrb	r3, [r3, #0]
 8005c02:	011a      	lsls	r2, r3, #4
 8005c04:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005c06:	4413      	add	r3, r2
 8005c08:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005c0c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005c0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c12:	b29a      	uxth	r2, r3
 8005c14:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005c16:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005c18:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c1c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	891b      	ldrh	r3, [r3, #8]
 8005c24:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005c28:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c2c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	6959      	ldr	r1, [r3, #20]
 8005c34:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c38:	b29b      	uxth	r3, r3
 8005c3a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005c3e:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005c42:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005c46:	6800      	ldr	r0, [r0, #0]
 8005c48:	f001 f80d 	bl	8006c66 <USB_WritePMA>
 8005c4c:	e1b3      	b.n	8005fb6 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8005c4e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c52:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	6a1a      	ldr	r2, [r3, #32]
 8005c5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c5e:	1ad2      	subs	r2, r2, r3
 8005c60:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c64:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005c6c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c70:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005c74:	681a      	ldr	r2, [r3, #0]
 8005c76:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c7a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	781b      	ldrb	r3, [r3, #0]
 8005c82:	009b      	lsls	r3, r3, #2
 8005c84:	4413      	add	r3, r2
 8005c86:	881b      	ldrh	r3, [r3, #0]
 8005c88:	b29b      	uxth	r3, r3
 8005c8a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	f000 80c6 	beq.w	8005e20 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005c94:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c98:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	673b      	str	r3, [r7, #112]	@ 0x70
 8005ca0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ca4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	785b      	ldrb	r3, [r3, #1]
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d177      	bne.n	8005da0 <USB_EPStartXfer+0xb18>
 8005cb0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005cb4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005cbc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005cc0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005cca:	b29b      	uxth	r3, r3
 8005ccc:	461a      	mov	r2, r3
 8005cce:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005cd0:	4413      	add	r3, r2
 8005cd2:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005cd4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005cd8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	781b      	ldrb	r3, [r3, #0]
 8005ce0:	011a      	lsls	r2, r3, #4
 8005ce2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005ce4:	4413      	add	r3, r2
 8005ce6:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005cea:	667b      	str	r3, [r7, #100]	@ 0x64
 8005cec:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005cee:	881b      	ldrh	r3, [r3, #0]
 8005cf0:	b29b      	uxth	r3, r3
 8005cf2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005cf6:	b29a      	uxth	r2, r3
 8005cf8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005cfa:	801a      	strh	r2, [r3, #0]
 8005cfc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d00:	2b3e      	cmp	r3, #62	@ 0x3e
 8005d02:	d921      	bls.n	8005d48 <USB_EPStartXfer+0xac0>
 8005d04:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d08:	095b      	lsrs	r3, r3, #5
 8005d0a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8005d0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d12:	f003 031f 	and.w	r3, r3, #31
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d104      	bne.n	8005d24 <USB_EPStartXfer+0xa9c>
 8005d1a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8005d1e:	3b01      	subs	r3, #1
 8005d20:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8005d24:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005d26:	881b      	ldrh	r3, [r3, #0]
 8005d28:	b29a      	uxth	r2, r3
 8005d2a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8005d2e:	b29b      	uxth	r3, r3
 8005d30:	029b      	lsls	r3, r3, #10
 8005d32:	b29b      	uxth	r3, r3
 8005d34:	4313      	orrs	r3, r2
 8005d36:	b29b      	uxth	r3, r3
 8005d38:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d3c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d40:	b29a      	uxth	r2, r3
 8005d42:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005d44:	801a      	strh	r2, [r3, #0]
 8005d46:	e050      	b.n	8005dea <USB_EPStartXfer+0xb62>
 8005d48:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d10a      	bne.n	8005d66 <USB_EPStartXfer+0xade>
 8005d50:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005d52:	881b      	ldrh	r3, [r3, #0]
 8005d54:	b29b      	uxth	r3, r3
 8005d56:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d5a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d5e:	b29a      	uxth	r2, r3
 8005d60:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005d62:	801a      	strh	r2, [r3, #0]
 8005d64:	e041      	b.n	8005dea <USB_EPStartXfer+0xb62>
 8005d66:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d6a:	085b      	lsrs	r3, r3, #1
 8005d6c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8005d70:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d74:	f003 0301 	and.w	r3, r3, #1
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d004      	beq.n	8005d86 <USB_EPStartXfer+0xafe>
 8005d7c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8005d80:	3301      	adds	r3, #1
 8005d82:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8005d86:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005d88:	881b      	ldrh	r3, [r3, #0]
 8005d8a:	b29a      	uxth	r2, r3
 8005d8c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8005d90:	b29b      	uxth	r3, r3
 8005d92:	029b      	lsls	r3, r3, #10
 8005d94:	b29b      	uxth	r3, r3
 8005d96:	4313      	orrs	r3, r2
 8005d98:	b29a      	uxth	r2, r3
 8005d9a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005d9c:	801a      	strh	r2, [r3, #0]
 8005d9e:	e024      	b.n	8005dea <USB_EPStartXfer+0xb62>
 8005da0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005da4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	785b      	ldrb	r3, [r3, #1]
 8005dac:	2b01      	cmp	r3, #1
 8005dae:	d11c      	bne.n	8005dea <USB_EPStartXfer+0xb62>
 8005db0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005db4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005dbe:	b29b      	uxth	r3, r3
 8005dc0:	461a      	mov	r2, r3
 8005dc2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005dc4:	4413      	add	r3, r2
 8005dc6:	673b      	str	r3, [r7, #112]	@ 0x70
 8005dc8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005dcc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	781b      	ldrb	r3, [r3, #0]
 8005dd4:	011a      	lsls	r2, r3, #4
 8005dd6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005dd8:	4413      	add	r3, r2
 8005dda:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005dde:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005de0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005de4:	b29a      	uxth	r2, r3
 8005de6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005de8:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8005dea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005dee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	895b      	ldrh	r3, [r3, #10]
 8005df6:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005dfa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005dfe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	6959      	ldr	r1, [r3, #20]
 8005e06:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e0a:	b29b      	uxth	r3, r3
 8005e0c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005e10:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005e14:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005e18:	6800      	ldr	r0, [r0, #0]
 8005e1a:	f000 ff24 	bl	8006c66 <USB_WritePMA>
 8005e1e:	e0ca      	b.n	8005fb6 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005e20:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e24:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	785b      	ldrb	r3, [r3, #1]
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d177      	bne.n	8005f20 <USB_EPStartXfer+0xc98>
 8005e30:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e34:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005e3c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e40:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005e4a:	b29b      	uxth	r3, r3
 8005e4c:	461a      	mov	r2, r3
 8005e4e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005e50:	4413      	add	r3, r2
 8005e52:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005e54:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e58:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	781b      	ldrb	r3, [r3, #0]
 8005e60:	011a      	lsls	r2, r3, #4
 8005e62:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005e64:	4413      	add	r3, r2
 8005e66:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005e6a:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005e6c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005e6e:	881b      	ldrh	r3, [r3, #0]
 8005e70:	b29b      	uxth	r3, r3
 8005e72:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005e76:	b29a      	uxth	r2, r3
 8005e78:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005e7a:	801a      	strh	r2, [r3, #0]
 8005e7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e80:	2b3e      	cmp	r3, #62	@ 0x3e
 8005e82:	d921      	bls.n	8005ec8 <USB_EPStartXfer+0xc40>
 8005e84:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e88:	095b      	lsrs	r3, r3, #5
 8005e8a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005e8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e92:	f003 031f 	and.w	r3, r3, #31
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d104      	bne.n	8005ea4 <USB_EPStartXfer+0xc1c>
 8005e9a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8005e9e:	3b01      	subs	r3, #1
 8005ea0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005ea4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005ea6:	881b      	ldrh	r3, [r3, #0]
 8005ea8:	b29a      	uxth	r2, r3
 8005eaa:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8005eae:	b29b      	uxth	r3, r3
 8005eb0:	029b      	lsls	r3, r3, #10
 8005eb2:	b29b      	uxth	r3, r3
 8005eb4:	4313      	orrs	r3, r2
 8005eb6:	b29b      	uxth	r3, r3
 8005eb8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ebc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ec0:	b29a      	uxth	r2, r3
 8005ec2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005ec4:	801a      	strh	r2, [r3, #0]
 8005ec6:	e05c      	b.n	8005f82 <USB_EPStartXfer+0xcfa>
 8005ec8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d10a      	bne.n	8005ee6 <USB_EPStartXfer+0xc5e>
 8005ed0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005ed2:	881b      	ldrh	r3, [r3, #0]
 8005ed4:	b29b      	uxth	r3, r3
 8005ed6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005eda:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ede:	b29a      	uxth	r2, r3
 8005ee0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005ee2:	801a      	strh	r2, [r3, #0]
 8005ee4:	e04d      	b.n	8005f82 <USB_EPStartXfer+0xcfa>
 8005ee6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005eea:	085b      	lsrs	r3, r3, #1
 8005eec:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005ef0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ef4:	f003 0301 	and.w	r3, r3, #1
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d004      	beq.n	8005f06 <USB_EPStartXfer+0xc7e>
 8005efc:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8005f00:	3301      	adds	r3, #1
 8005f02:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005f06:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005f08:	881b      	ldrh	r3, [r3, #0]
 8005f0a:	b29a      	uxth	r2, r3
 8005f0c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8005f10:	b29b      	uxth	r3, r3
 8005f12:	029b      	lsls	r3, r3, #10
 8005f14:	b29b      	uxth	r3, r3
 8005f16:	4313      	orrs	r3, r2
 8005f18:	b29a      	uxth	r2, r3
 8005f1a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005f1c:	801a      	strh	r2, [r3, #0]
 8005f1e:	e030      	b.n	8005f82 <USB_EPStartXfer+0xcfa>
 8005f20:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f24:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	785b      	ldrb	r3, [r3, #1]
 8005f2c:	2b01      	cmp	r3, #1
 8005f2e:	d128      	bne.n	8005f82 <USB_EPStartXfer+0xcfa>
 8005f30:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f34:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005f3e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f42:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005f4c:	b29b      	uxth	r3, r3
 8005f4e:	461a      	mov	r2, r3
 8005f50:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005f54:	4413      	add	r3, r2
 8005f56:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005f5a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f5e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	781b      	ldrb	r3, [r3, #0]
 8005f66:	011a      	lsls	r2, r3, #4
 8005f68:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005f6c:	4413      	add	r3, r2
 8005f6e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005f72:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005f76:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f7a:	b29a      	uxth	r2, r3
 8005f7c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005f80:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005f82:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f86:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	891b      	ldrh	r3, [r3, #8]
 8005f8e:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005f92:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f96:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	6959      	ldr	r1, [r3, #20]
 8005f9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005fa2:	b29b      	uxth	r3, r3
 8005fa4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005fa8:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005fac:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005fb0:	6800      	ldr	r0, [r0, #0]
 8005fb2:	f000 fe58 	bl	8006c66 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8005fb6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005fba:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005fbe:	681a      	ldr	r2, [r3, #0]
 8005fc0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005fc4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	781b      	ldrb	r3, [r3, #0]
 8005fcc:	009b      	lsls	r3, r3, #2
 8005fce:	4413      	add	r3, r2
 8005fd0:	881b      	ldrh	r3, [r3, #0]
 8005fd2:	b29b      	uxth	r3, r3
 8005fd4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005fd8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005fdc:	817b      	strh	r3, [r7, #10]
 8005fde:	897b      	ldrh	r3, [r7, #10]
 8005fe0:	f083 0310 	eor.w	r3, r3, #16
 8005fe4:	817b      	strh	r3, [r7, #10]
 8005fe6:	897b      	ldrh	r3, [r7, #10]
 8005fe8:	f083 0320 	eor.w	r3, r3, #32
 8005fec:	817b      	strh	r3, [r7, #10]
 8005fee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ff2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005ff6:	681a      	ldr	r2, [r3, #0]
 8005ff8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ffc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	781b      	ldrb	r3, [r3, #0]
 8006004:	009b      	lsls	r3, r3, #2
 8006006:	441a      	add	r2, r3
 8006008:	897b      	ldrh	r3, [r7, #10]
 800600a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800600e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006012:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006016:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800601a:	b29b      	uxth	r3, r3
 800601c:	8013      	strh	r3, [r2, #0]
 800601e:	f000 bcde 	b.w	80069de <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8006022:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006026:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	7b1b      	ldrb	r3, [r3, #12]
 800602e:	2b00      	cmp	r3, #0
 8006030:	f040 80bb 	bne.w	80061aa <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8006034:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006038:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	699a      	ldr	r2, [r3, #24]
 8006040:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006044:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	691b      	ldr	r3, [r3, #16]
 800604c:	429a      	cmp	r2, r3
 800604e:	d917      	bls.n	8006080 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8006050:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006054:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	691b      	ldr	r3, [r3, #16]
 800605c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 8006060:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006064:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	699a      	ldr	r2, [r3, #24]
 800606c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006070:	1ad2      	subs	r2, r2, r3
 8006072:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006076:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	619a      	str	r2, [r3, #24]
 800607e:	e00e      	b.n	800609e <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8006080:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006084:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	699b      	ldr	r3, [r3, #24]
 800608c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 8006090:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006094:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	2200      	movs	r2, #0
 800609c:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800609e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060a2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80060ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060b0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80060ba:	b29b      	uxth	r3, r3
 80060bc:	461a      	mov	r2, r3
 80060be:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80060c2:	4413      	add	r3, r2
 80060c4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80060c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060cc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	781b      	ldrb	r3, [r3, #0]
 80060d4:	011a      	lsls	r2, r3, #4
 80060d6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80060da:	4413      	add	r3, r2
 80060dc:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80060e0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80060e4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80060e8:	881b      	ldrh	r3, [r3, #0]
 80060ea:	b29b      	uxth	r3, r3
 80060ec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80060f0:	b29a      	uxth	r2, r3
 80060f2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80060f6:	801a      	strh	r2, [r3, #0]
 80060f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80060fc:	2b3e      	cmp	r3, #62	@ 0x3e
 80060fe:	d924      	bls.n	800614a <USB_EPStartXfer+0xec2>
 8006100:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006104:	095b      	lsrs	r3, r3, #5
 8006106:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800610a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800610e:	f003 031f 	and.w	r3, r3, #31
 8006112:	2b00      	cmp	r3, #0
 8006114:	d104      	bne.n	8006120 <USB_EPStartXfer+0xe98>
 8006116:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800611a:	3b01      	subs	r3, #1
 800611c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006120:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006124:	881b      	ldrh	r3, [r3, #0]
 8006126:	b29a      	uxth	r2, r3
 8006128:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800612c:	b29b      	uxth	r3, r3
 800612e:	029b      	lsls	r3, r3, #10
 8006130:	b29b      	uxth	r3, r3
 8006132:	4313      	orrs	r3, r2
 8006134:	b29b      	uxth	r3, r3
 8006136:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800613a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800613e:	b29a      	uxth	r2, r3
 8006140:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006144:	801a      	strh	r2, [r3, #0]
 8006146:	f000 bc10 	b.w	800696a <USB_EPStartXfer+0x16e2>
 800614a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800614e:	2b00      	cmp	r3, #0
 8006150:	d10c      	bne.n	800616c <USB_EPStartXfer+0xee4>
 8006152:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006156:	881b      	ldrh	r3, [r3, #0]
 8006158:	b29b      	uxth	r3, r3
 800615a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800615e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006162:	b29a      	uxth	r2, r3
 8006164:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006168:	801a      	strh	r2, [r3, #0]
 800616a:	e3fe      	b.n	800696a <USB_EPStartXfer+0x16e2>
 800616c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006170:	085b      	lsrs	r3, r3, #1
 8006172:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006176:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800617a:	f003 0301 	and.w	r3, r3, #1
 800617e:	2b00      	cmp	r3, #0
 8006180:	d004      	beq.n	800618c <USB_EPStartXfer+0xf04>
 8006182:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8006186:	3301      	adds	r3, #1
 8006188:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800618c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006190:	881b      	ldrh	r3, [r3, #0]
 8006192:	b29a      	uxth	r2, r3
 8006194:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8006198:	b29b      	uxth	r3, r3
 800619a:	029b      	lsls	r3, r3, #10
 800619c:	b29b      	uxth	r3, r3
 800619e:	4313      	orrs	r3, r2
 80061a0:	b29a      	uxth	r2, r3
 80061a2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80061a6:	801a      	strh	r2, [r3, #0]
 80061a8:	e3df      	b.n	800696a <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80061aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80061ae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	78db      	ldrb	r3, [r3, #3]
 80061b6:	2b02      	cmp	r3, #2
 80061b8:	f040 8218 	bne.w	80065ec <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80061bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80061c0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	785b      	ldrb	r3, [r3, #1]
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	f040 809d 	bne.w	8006308 <USB_EPStartXfer+0x1080>
 80061ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80061d2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80061dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80061e0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80061ea:	b29b      	uxth	r3, r3
 80061ec:	461a      	mov	r2, r3
 80061ee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80061f2:	4413      	add	r3, r2
 80061f4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80061f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80061fc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	781b      	ldrb	r3, [r3, #0]
 8006204:	011a      	lsls	r2, r3, #4
 8006206:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800620a:	4413      	add	r3, r2
 800620c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006210:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006214:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006218:	881b      	ldrh	r3, [r3, #0]
 800621a:	b29b      	uxth	r3, r3
 800621c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006220:	b29a      	uxth	r2, r3
 8006222:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006226:	801a      	strh	r2, [r3, #0]
 8006228:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800622c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	691b      	ldr	r3, [r3, #16]
 8006234:	2b3e      	cmp	r3, #62	@ 0x3e
 8006236:	d92b      	bls.n	8006290 <USB_EPStartXfer+0x1008>
 8006238:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800623c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	691b      	ldr	r3, [r3, #16]
 8006244:	095b      	lsrs	r3, r3, #5
 8006246:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800624a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800624e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	691b      	ldr	r3, [r3, #16]
 8006256:	f003 031f 	and.w	r3, r3, #31
 800625a:	2b00      	cmp	r3, #0
 800625c:	d104      	bne.n	8006268 <USB_EPStartXfer+0xfe0>
 800625e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006262:	3b01      	subs	r3, #1
 8006264:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006268:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800626c:	881b      	ldrh	r3, [r3, #0]
 800626e:	b29a      	uxth	r2, r3
 8006270:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006274:	b29b      	uxth	r3, r3
 8006276:	029b      	lsls	r3, r3, #10
 8006278:	b29b      	uxth	r3, r3
 800627a:	4313      	orrs	r3, r2
 800627c:	b29b      	uxth	r3, r3
 800627e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006282:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006286:	b29a      	uxth	r2, r3
 8006288:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800628c:	801a      	strh	r2, [r3, #0]
 800628e:	e070      	b.n	8006372 <USB_EPStartXfer+0x10ea>
 8006290:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006294:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	691b      	ldr	r3, [r3, #16]
 800629c:	2b00      	cmp	r3, #0
 800629e:	d10c      	bne.n	80062ba <USB_EPStartXfer+0x1032>
 80062a0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80062a4:	881b      	ldrh	r3, [r3, #0]
 80062a6:	b29b      	uxth	r3, r3
 80062a8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80062ac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80062b0:	b29a      	uxth	r2, r3
 80062b2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80062b6:	801a      	strh	r2, [r3, #0]
 80062b8:	e05b      	b.n	8006372 <USB_EPStartXfer+0x10ea>
 80062ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062be:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	691b      	ldr	r3, [r3, #16]
 80062c6:	085b      	lsrs	r3, r3, #1
 80062c8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80062cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062d0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	691b      	ldr	r3, [r3, #16]
 80062d8:	f003 0301 	and.w	r3, r3, #1
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d004      	beq.n	80062ea <USB_EPStartXfer+0x1062>
 80062e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80062e4:	3301      	adds	r3, #1
 80062e6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80062ea:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80062ee:	881b      	ldrh	r3, [r3, #0]
 80062f0:	b29a      	uxth	r2, r3
 80062f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80062f6:	b29b      	uxth	r3, r3
 80062f8:	029b      	lsls	r3, r3, #10
 80062fa:	b29b      	uxth	r3, r3
 80062fc:	4313      	orrs	r3, r2
 80062fe:	b29a      	uxth	r2, r3
 8006300:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006304:	801a      	strh	r2, [r3, #0]
 8006306:	e034      	b.n	8006372 <USB_EPStartXfer+0x10ea>
 8006308:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800630c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	785b      	ldrb	r3, [r3, #1]
 8006314:	2b01      	cmp	r3, #1
 8006316:	d12c      	bne.n	8006372 <USB_EPStartXfer+0x10ea>
 8006318:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800631c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006326:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800632a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006334:	b29b      	uxth	r3, r3
 8006336:	461a      	mov	r2, r3
 8006338:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800633c:	4413      	add	r3, r2
 800633e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006342:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006346:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	781b      	ldrb	r3, [r3, #0]
 800634e:	011a      	lsls	r2, r3, #4
 8006350:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8006354:	4413      	add	r3, r2
 8006356:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800635a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800635e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006362:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	691b      	ldr	r3, [r3, #16]
 800636a:	b29a      	uxth	r2, r3
 800636c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8006370:	801a      	strh	r2, [r3, #0]
 8006372:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006376:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8006380:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006384:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	785b      	ldrb	r3, [r3, #1]
 800638c:	2b00      	cmp	r3, #0
 800638e:	f040 809d 	bne.w	80064cc <USB_EPStartXfer+0x1244>
 8006392:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006396:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80063a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063a4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80063ae:	b29b      	uxth	r3, r3
 80063b0:	461a      	mov	r2, r3
 80063b2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80063b6:	4413      	add	r3, r2
 80063b8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80063bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063c0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	781b      	ldrb	r3, [r3, #0]
 80063c8:	011a      	lsls	r2, r3, #4
 80063ca:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80063ce:	4413      	add	r3, r2
 80063d0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80063d4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80063d8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80063dc:	881b      	ldrh	r3, [r3, #0]
 80063de:	b29b      	uxth	r3, r3
 80063e0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80063e4:	b29a      	uxth	r2, r3
 80063e6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80063ea:	801a      	strh	r2, [r3, #0]
 80063ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063f0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	691b      	ldr	r3, [r3, #16]
 80063f8:	2b3e      	cmp	r3, #62	@ 0x3e
 80063fa:	d92b      	bls.n	8006454 <USB_EPStartXfer+0x11cc>
 80063fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006400:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	691b      	ldr	r3, [r3, #16]
 8006408:	095b      	lsrs	r3, r3, #5
 800640a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800640e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006412:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	691b      	ldr	r3, [r3, #16]
 800641a:	f003 031f 	and.w	r3, r3, #31
 800641e:	2b00      	cmp	r3, #0
 8006420:	d104      	bne.n	800642c <USB_EPStartXfer+0x11a4>
 8006422:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006426:	3b01      	subs	r3, #1
 8006428:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800642c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006430:	881b      	ldrh	r3, [r3, #0]
 8006432:	b29a      	uxth	r2, r3
 8006434:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006438:	b29b      	uxth	r3, r3
 800643a:	029b      	lsls	r3, r3, #10
 800643c:	b29b      	uxth	r3, r3
 800643e:	4313      	orrs	r3, r2
 8006440:	b29b      	uxth	r3, r3
 8006442:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006446:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800644a:	b29a      	uxth	r2, r3
 800644c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006450:	801a      	strh	r2, [r3, #0]
 8006452:	e069      	b.n	8006528 <USB_EPStartXfer+0x12a0>
 8006454:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006458:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	691b      	ldr	r3, [r3, #16]
 8006460:	2b00      	cmp	r3, #0
 8006462:	d10c      	bne.n	800647e <USB_EPStartXfer+0x11f6>
 8006464:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006468:	881b      	ldrh	r3, [r3, #0]
 800646a:	b29b      	uxth	r3, r3
 800646c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006470:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006474:	b29a      	uxth	r2, r3
 8006476:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800647a:	801a      	strh	r2, [r3, #0]
 800647c:	e054      	b.n	8006528 <USB_EPStartXfer+0x12a0>
 800647e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006482:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	691b      	ldr	r3, [r3, #16]
 800648a:	085b      	lsrs	r3, r3, #1
 800648c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006490:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006494:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	691b      	ldr	r3, [r3, #16]
 800649c:	f003 0301 	and.w	r3, r3, #1
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d004      	beq.n	80064ae <USB_EPStartXfer+0x1226>
 80064a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80064a8:	3301      	adds	r3, #1
 80064aa:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80064ae:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80064b2:	881b      	ldrh	r3, [r3, #0]
 80064b4:	b29a      	uxth	r2, r3
 80064b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80064ba:	b29b      	uxth	r3, r3
 80064bc:	029b      	lsls	r3, r3, #10
 80064be:	b29b      	uxth	r3, r3
 80064c0:	4313      	orrs	r3, r2
 80064c2:	b29a      	uxth	r2, r3
 80064c4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80064c8:	801a      	strh	r2, [r3, #0]
 80064ca:	e02d      	b.n	8006528 <USB_EPStartXfer+0x12a0>
 80064cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80064d0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	785b      	ldrb	r3, [r3, #1]
 80064d8:	2b01      	cmp	r3, #1
 80064da:	d125      	bne.n	8006528 <USB_EPStartXfer+0x12a0>
 80064dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80064e0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80064ea:	b29b      	uxth	r3, r3
 80064ec:	461a      	mov	r2, r3
 80064ee:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80064f2:	4413      	add	r3, r2
 80064f4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80064f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80064fc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	781b      	ldrb	r3, [r3, #0]
 8006504:	011a      	lsls	r2, r3, #4
 8006506:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800650a:	4413      	add	r3, r2
 800650c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006510:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006514:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006518:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	691b      	ldr	r3, [r3, #16]
 8006520:	b29a      	uxth	r2, r3
 8006522:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006526:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8006528:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800652c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	69db      	ldr	r3, [r3, #28]
 8006534:	2b00      	cmp	r3, #0
 8006536:	f000 8218 	beq.w	800696a <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800653a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800653e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006542:	681a      	ldr	r2, [r3, #0]
 8006544:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006548:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	781b      	ldrb	r3, [r3, #0]
 8006550:	009b      	lsls	r3, r3, #2
 8006552:	4413      	add	r3, r2
 8006554:	881b      	ldrh	r3, [r3, #0]
 8006556:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800655a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800655e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006562:	2b00      	cmp	r3, #0
 8006564:	d005      	beq.n	8006572 <USB_EPStartXfer+0x12ea>
 8006566:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800656a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800656e:	2b00      	cmp	r3, #0
 8006570:	d10d      	bne.n	800658e <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006572:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8006576:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800657a:	2b00      	cmp	r3, #0
 800657c:	f040 81f5 	bne.w	800696a <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006580:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8006584:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006588:	2b00      	cmp	r3, #0
 800658a:	f040 81ee 	bne.w	800696a <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800658e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006592:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006596:	681a      	ldr	r2, [r3, #0]
 8006598:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800659c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	781b      	ldrb	r3, [r3, #0]
 80065a4:	009b      	lsls	r3, r3, #2
 80065a6:	4413      	add	r3, r2
 80065a8:	881b      	ldrh	r3, [r3, #0]
 80065aa:	b29b      	uxth	r3, r3
 80065ac:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80065b0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80065b4:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 80065b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80065bc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80065c0:	681a      	ldr	r2, [r3, #0]
 80065c2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80065c6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	781b      	ldrb	r3, [r3, #0]
 80065ce:	009b      	lsls	r3, r3, #2
 80065d0:	441a      	add	r2, r3
 80065d2:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 80065d6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80065da:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80065de:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80065e2:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80065e6:	b29b      	uxth	r3, r3
 80065e8:	8013      	strh	r3, [r2, #0]
 80065ea:	e1be      	b.n	800696a <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80065ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80065f0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	78db      	ldrb	r3, [r3, #3]
 80065f8:	2b01      	cmp	r3, #1
 80065fa:	f040 81b4 	bne.w	8006966 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 80065fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006602:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	699a      	ldr	r2, [r3, #24]
 800660a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800660e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	691b      	ldr	r3, [r3, #16]
 8006616:	429a      	cmp	r2, r3
 8006618:	d917      	bls.n	800664a <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 800661a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800661e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	691b      	ldr	r3, [r3, #16]
 8006626:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 800662a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800662e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	699a      	ldr	r2, [r3, #24]
 8006636:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800663a:	1ad2      	subs	r2, r2, r3
 800663c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006640:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	619a      	str	r2, [r3, #24]
 8006648:	e00e      	b.n	8006668 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 800664a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800664e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	699b      	ldr	r3, [r3, #24]
 8006656:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 800665a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800665e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	2200      	movs	r2, #0
 8006666:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8006668:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800666c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	785b      	ldrb	r3, [r3, #1]
 8006674:	2b00      	cmp	r3, #0
 8006676:	f040 8085 	bne.w	8006784 <USB_EPStartXfer+0x14fc>
 800667a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800667e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006688:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800668c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006696:	b29b      	uxth	r3, r3
 8006698:	461a      	mov	r2, r3
 800669a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800669e:	4413      	add	r3, r2
 80066a0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80066a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80066a8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	781b      	ldrb	r3, [r3, #0]
 80066b0:	011a      	lsls	r2, r3, #4
 80066b2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80066b6:	4413      	add	r3, r2
 80066b8:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80066bc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80066c0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80066c4:	881b      	ldrh	r3, [r3, #0]
 80066c6:	b29b      	uxth	r3, r3
 80066c8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80066cc:	b29a      	uxth	r2, r3
 80066ce:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80066d2:	801a      	strh	r2, [r3, #0]
 80066d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80066d8:	2b3e      	cmp	r3, #62	@ 0x3e
 80066da:	d923      	bls.n	8006724 <USB_EPStartXfer+0x149c>
 80066dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80066e0:	095b      	lsrs	r3, r3, #5
 80066e2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80066e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80066ea:	f003 031f 	and.w	r3, r3, #31
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d104      	bne.n	80066fc <USB_EPStartXfer+0x1474>
 80066f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80066f6:	3b01      	subs	r3, #1
 80066f8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80066fc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006700:	881b      	ldrh	r3, [r3, #0]
 8006702:	b29a      	uxth	r2, r3
 8006704:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006708:	b29b      	uxth	r3, r3
 800670a:	029b      	lsls	r3, r3, #10
 800670c:	b29b      	uxth	r3, r3
 800670e:	4313      	orrs	r3, r2
 8006710:	b29b      	uxth	r3, r3
 8006712:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006716:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800671a:	b29a      	uxth	r2, r3
 800671c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006720:	801a      	strh	r2, [r3, #0]
 8006722:	e060      	b.n	80067e6 <USB_EPStartXfer+0x155e>
 8006724:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006728:	2b00      	cmp	r3, #0
 800672a:	d10c      	bne.n	8006746 <USB_EPStartXfer+0x14be>
 800672c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006730:	881b      	ldrh	r3, [r3, #0]
 8006732:	b29b      	uxth	r3, r3
 8006734:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006738:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800673c:	b29a      	uxth	r2, r3
 800673e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006742:	801a      	strh	r2, [r3, #0]
 8006744:	e04f      	b.n	80067e6 <USB_EPStartXfer+0x155e>
 8006746:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800674a:	085b      	lsrs	r3, r3, #1
 800674c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8006750:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006754:	f003 0301 	and.w	r3, r3, #1
 8006758:	2b00      	cmp	r3, #0
 800675a:	d004      	beq.n	8006766 <USB_EPStartXfer+0x14de>
 800675c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006760:	3301      	adds	r3, #1
 8006762:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8006766:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800676a:	881b      	ldrh	r3, [r3, #0]
 800676c:	b29a      	uxth	r2, r3
 800676e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006772:	b29b      	uxth	r3, r3
 8006774:	029b      	lsls	r3, r3, #10
 8006776:	b29b      	uxth	r3, r3
 8006778:	4313      	orrs	r3, r2
 800677a:	b29a      	uxth	r2, r3
 800677c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006780:	801a      	strh	r2, [r3, #0]
 8006782:	e030      	b.n	80067e6 <USB_EPStartXfer+0x155e>
 8006784:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006788:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	785b      	ldrb	r3, [r3, #1]
 8006790:	2b01      	cmp	r3, #1
 8006792:	d128      	bne.n	80067e6 <USB_EPStartXfer+0x155e>
 8006794:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006798:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80067a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80067a6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80067b0:	b29b      	uxth	r3, r3
 80067b2:	461a      	mov	r2, r3
 80067b4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80067b8:	4413      	add	r3, r2
 80067ba:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80067be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80067c2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	781b      	ldrb	r3, [r3, #0]
 80067ca:	011a      	lsls	r2, r3, #4
 80067cc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80067d0:	4413      	add	r3, r2
 80067d2:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80067d6:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80067da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80067de:	b29a      	uxth	r2, r3
 80067e0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80067e4:	801a      	strh	r2, [r3, #0]
 80067e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80067ea:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80067f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80067f8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	785b      	ldrb	r3, [r3, #1]
 8006800:	2b00      	cmp	r3, #0
 8006802:	f040 8085 	bne.w	8006910 <USB_EPStartXfer+0x1688>
 8006806:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800680a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8006814:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006818:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006822:	b29b      	uxth	r3, r3
 8006824:	461a      	mov	r2, r3
 8006826:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800682a:	4413      	add	r3, r2
 800682c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8006830:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006834:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	781b      	ldrb	r3, [r3, #0]
 800683c:	011a      	lsls	r2, r3, #4
 800683e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8006842:	4413      	add	r3, r2
 8006844:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006848:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800684c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006850:	881b      	ldrh	r3, [r3, #0]
 8006852:	b29b      	uxth	r3, r3
 8006854:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006858:	b29a      	uxth	r2, r3
 800685a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800685e:	801a      	strh	r2, [r3, #0]
 8006860:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006864:	2b3e      	cmp	r3, #62	@ 0x3e
 8006866:	d923      	bls.n	80068b0 <USB_EPStartXfer+0x1628>
 8006868:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800686c:	095b      	lsrs	r3, r3, #5
 800686e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006872:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006876:	f003 031f 	and.w	r3, r3, #31
 800687a:	2b00      	cmp	r3, #0
 800687c:	d104      	bne.n	8006888 <USB_EPStartXfer+0x1600>
 800687e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006882:	3b01      	subs	r3, #1
 8006884:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006888:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800688c:	881b      	ldrh	r3, [r3, #0]
 800688e:	b29a      	uxth	r2, r3
 8006890:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006894:	b29b      	uxth	r3, r3
 8006896:	029b      	lsls	r3, r3, #10
 8006898:	b29b      	uxth	r3, r3
 800689a:	4313      	orrs	r3, r2
 800689c:	b29b      	uxth	r3, r3
 800689e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80068a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80068a6:	b29a      	uxth	r2, r3
 80068a8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80068ac:	801a      	strh	r2, [r3, #0]
 80068ae:	e05c      	b.n	800696a <USB_EPStartXfer+0x16e2>
 80068b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d10c      	bne.n	80068d2 <USB_EPStartXfer+0x164a>
 80068b8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80068bc:	881b      	ldrh	r3, [r3, #0]
 80068be:	b29b      	uxth	r3, r3
 80068c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80068c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80068c8:	b29a      	uxth	r2, r3
 80068ca:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80068ce:	801a      	strh	r2, [r3, #0]
 80068d0:	e04b      	b.n	800696a <USB_EPStartXfer+0x16e2>
 80068d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80068d6:	085b      	lsrs	r3, r3, #1
 80068d8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80068dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80068e0:	f003 0301 	and.w	r3, r3, #1
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d004      	beq.n	80068f2 <USB_EPStartXfer+0x166a>
 80068e8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80068ec:	3301      	adds	r3, #1
 80068ee:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80068f2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80068f6:	881b      	ldrh	r3, [r3, #0]
 80068f8:	b29a      	uxth	r2, r3
 80068fa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80068fe:	b29b      	uxth	r3, r3
 8006900:	029b      	lsls	r3, r3, #10
 8006902:	b29b      	uxth	r3, r3
 8006904:	4313      	orrs	r3, r2
 8006906:	b29a      	uxth	r2, r3
 8006908:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800690c:	801a      	strh	r2, [r3, #0]
 800690e:	e02c      	b.n	800696a <USB_EPStartXfer+0x16e2>
 8006910:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006914:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	785b      	ldrb	r3, [r3, #1]
 800691c:	2b01      	cmp	r3, #1
 800691e:	d124      	bne.n	800696a <USB_EPStartXfer+0x16e2>
 8006920:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006924:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800692e:	b29b      	uxth	r3, r3
 8006930:	461a      	mov	r2, r3
 8006932:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006936:	4413      	add	r3, r2
 8006938:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800693c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006940:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	781b      	ldrb	r3, [r3, #0]
 8006948:	011a      	lsls	r2, r3, #4
 800694a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800694e:	4413      	add	r3, r2
 8006950:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006954:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006958:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800695c:	b29a      	uxth	r2, r3
 800695e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8006962:	801a      	strh	r2, [r3, #0]
 8006964:	e001      	b.n	800696a <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 8006966:	2301      	movs	r3, #1
 8006968:	e03a      	b.n	80069e0 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800696a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800696e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006972:	681a      	ldr	r2, [r3, #0]
 8006974:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006978:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	781b      	ldrb	r3, [r3, #0]
 8006980:	009b      	lsls	r3, r3, #2
 8006982:	4413      	add	r3, r2
 8006984:	881b      	ldrh	r3, [r3, #0]
 8006986:	b29b      	uxth	r3, r3
 8006988:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800698c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006990:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8006994:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8006998:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800699c:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80069a0:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80069a4:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80069a8:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80069ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80069b0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80069b4:	681a      	ldr	r2, [r3, #0]
 80069b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80069ba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	781b      	ldrb	r3, [r3, #0]
 80069c2:	009b      	lsls	r3, r3, #2
 80069c4:	441a      	add	r2, r3
 80069c6:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80069ca:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80069ce:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80069d2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80069d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80069da:	b29b      	uxth	r3, r3
 80069dc:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80069de:	2300      	movs	r3, #0
}
 80069e0:	4618      	mov	r0, r3
 80069e2:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 80069e6:	46bd      	mov	sp, r7
 80069e8:	bd80      	pop	{r7, pc}

080069ea <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80069ea:	b480      	push	{r7}
 80069ec:	b085      	sub	sp, #20
 80069ee:	af00      	add	r7, sp, #0
 80069f0:	6078      	str	r0, [r7, #4]
 80069f2:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80069f4:	683b      	ldr	r3, [r7, #0]
 80069f6:	785b      	ldrb	r3, [r3, #1]
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d020      	beq.n	8006a3e <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80069fc:	687a      	ldr	r2, [r7, #4]
 80069fe:	683b      	ldr	r3, [r7, #0]
 8006a00:	781b      	ldrb	r3, [r3, #0]
 8006a02:	009b      	lsls	r3, r3, #2
 8006a04:	4413      	add	r3, r2
 8006a06:	881b      	ldrh	r3, [r3, #0]
 8006a08:	b29b      	uxth	r3, r3
 8006a0a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006a0e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006a12:	81bb      	strh	r3, [r7, #12]
 8006a14:	89bb      	ldrh	r3, [r7, #12]
 8006a16:	f083 0310 	eor.w	r3, r3, #16
 8006a1a:	81bb      	strh	r3, [r7, #12]
 8006a1c:	687a      	ldr	r2, [r7, #4]
 8006a1e:	683b      	ldr	r3, [r7, #0]
 8006a20:	781b      	ldrb	r3, [r3, #0]
 8006a22:	009b      	lsls	r3, r3, #2
 8006a24:	441a      	add	r2, r3
 8006a26:	89bb      	ldrh	r3, [r7, #12]
 8006a28:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006a2c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006a30:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006a34:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006a38:	b29b      	uxth	r3, r3
 8006a3a:	8013      	strh	r3, [r2, #0]
 8006a3c:	e01f      	b.n	8006a7e <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8006a3e:	687a      	ldr	r2, [r7, #4]
 8006a40:	683b      	ldr	r3, [r7, #0]
 8006a42:	781b      	ldrb	r3, [r3, #0]
 8006a44:	009b      	lsls	r3, r3, #2
 8006a46:	4413      	add	r3, r2
 8006a48:	881b      	ldrh	r3, [r3, #0]
 8006a4a:	b29b      	uxth	r3, r3
 8006a4c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006a50:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006a54:	81fb      	strh	r3, [r7, #14]
 8006a56:	89fb      	ldrh	r3, [r7, #14]
 8006a58:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8006a5c:	81fb      	strh	r3, [r7, #14]
 8006a5e:	687a      	ldr	r2, [r7, #4]
 8006a60:	683b      	ldr	r3, [r7, #0]
 8006a62:	781b      	ldrb	r3, [r3, #0]
 8006a64:	009b      	lsls	r3, r3, #2
 8006a66:	441a      	add	r2, r3
 8006a68:	89fb      	ldrh	r3, [r7, #14]
 8006a6a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006a6e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006a72:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006a76:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006a7a:	b29b      	uxth	r3, r3
 8006a7c:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006a7e:	2300      	movs	r3, #0
}
 8006a80:	4618      	mov	r0, r3
 8006a82:	3714      	adds	r7, #20
 8006a84:	46bd      	mov	sp, r7
 8006a86:	bc80      	pop	{r7}
 8006a88:	4770      	bx	lr

08006a8a <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006a8a:	b480      	push	{r7}
 8006a8c:	b087      	sub	sp, #28
 8006a8e:	af00      	add	r7, sp, #0
 8006a90:	6078      	str	r0, [r7, #4]
 8006a92:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006a94:	683b      	ldr	r3, [r7, #0]
 8006a96:	7b1b      	ldrb	r3, [r3, #12]
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	f040 809d 	bne.w	8006bd8 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8006a9e:	683b      	ldr	r3, [r7, #0]
 8006aa0:	785b      	ldrb	r3, [r3, #1]
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d04c      	beq.n	8006b40 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006aa6:	687a      	ldr	r2, [r7, #4]
 8006aa8:	683b      	ldr	r3, [r7, #0]
 8006aaa:	781b      	ldrb	r3, [r3, #0]
 8006aac:	009b      	lsls	r3, r3, #2
 8006aae:	4413      	add	r3, r2
 8006ab0:	881b      	ldrh	r3, [r3, #0]
 8006ab2:	823b      	strh	r3, [r7, #16]
 8006ab4:	8a3b      	ldrh	r3, [r7, #16]
 8006ab6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d01b      	beq.n	8006af6 <USB_EPClearStall+0x6c>
 8006abe:	687a      	ldr	r2, [r7, #4]
 8006ac0:	683b      	ldr	r3, [r7, #0]
 8006ac2:	781b      	ldrb	r3, [r3, #0]
 8006ac4:	009b      	lsls	r3, r3, #2
 8006ac6:	4413      	add	r3, r2
 8006ac8:	881b      	ldrh	r3, [r3, #0]
 8006aca:	b29b      	uxth	r3, r3
 8006acc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006ad0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006ad4:	81fb      	strh	r3, [r7, #14]
 8006ad6:	687a      	ldr	r2, [r7, #4]
 8006ad8:	683b      	ldr	r3, [r7, #0]
 8006ada:	781b      	ldrb	r3, [r3, #0]
 8006adc:	009b      	lsls	r3, r3, #2
 8006ade:	441a      	add	r2, r3
 8006ae0:	89fb      	ldrh	r3, [r7, #14]
 8006ae2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006ae6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006aea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006aee:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006af2:	b29b      	uxth	r3, r3
 8006af4:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006af6:	683b      	ldr	r3, [r7, #0]
 8006af8:	78db      	ldrb	r3, [r3, #3]
 8006afa:	2b01      	cmp	r3, #1
 8006afc:	d06c      	beq.n	8006bd8 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006afe:	687a      	ldr	r2, [r7, #4]
 8006b00:	683b      	ldr	r3, [r7, #0]
 8006b02:	781b      	ldrb	r3, [r3, #0]
 8006b04:	009b      	lsls	r3, r3, #2
 8006b06:	4413      	add	r3, r2
 8006b08:	881b      	ldrh	r3, [r3, #0]
 8006b0a:	b29b      	uxth	r3, r3
 8006b0c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006b10:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006b14:	81bb      	strh	r3, [r7, #12]
 8006b16:	89bb      	ldrh	r3, [r7, #12]
 8006b18:	f083 0320 	eor.w	r3, r3, #32
 8006b1c:	81bb      	strh	r3, [r7, #12]
 8006b1e:	687a      	ldr	r2, [r7, #4]
 8006b20:	683b      	ldr	r3, [r7, #0]
 8006b22:	781b      	ldrb	r3, [r3, #0]
 8006b24:	009b      	lsls	r3, r3, #2
 8006b26:	441a      	add	r2, r3
 8006b28:	89bb      	ldrh	r3, [r7, #12]
 8006b2a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006b2e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006b32:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006b36:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006b3a:	b29b      	uxth	r3, r3
 8006b3c:	8013      	strh	r3, [r2, #0]
 8006b3e:	e04b      	b.n	8006bd8 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006b40:	687a      	ldr	r2, [r7, #4]
 8006b42:	683b      	ldr	r3, [r7, #0]
 8006b44:	781b      	ldrb	r3, [r3, #0]
 8006b46:	009b      	lsls	r3, r3, #2
 8006b48:	4413      	add	r3, r2
 8006b4a:	881b      	ldrh	r3, [r3, #0]
 8006b4c:	82fb      	strh	r3, [r7, #22]
 8006b4e:	8afb      	ldrh	r3, [r7, #22]
 8006b50:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d01b      	beq.n	8006b90 <USB_EPClearStall+0x106>
 8006b58:	687a      	ldr	r2, [r7, #4]
 8006b5a:	683b      	ldr	r3, [r7, #0]
 8006b5c:	781b      	ldrb	r3, [r3, #0]
 8006b5e:	009b      	lsls	r3, r3, #2
 8006b60:	4413      	add	r3, r2
 8006b62:	881b      	ldrh	r3, [r3, #0]
 8006b64:	b29b      	uxth	r3, r3
 8006b66:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006b6a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006b6e:	82bb      	strh	r3, [r7, #20]
 8006b70:	687a      	ldr	r2, [r7, #4]
 8006b72:	683b      	ldr	r3, [r7, #0]
 8006b74:	781b      	ldrb	r3, [r3, #0]
 8006b76:	009b      	lsls	r3, r3, #2
 8006b78:	441a      	add	r2, r3
 8006b7a:	8abb      	ldrh	r3, [r7, #20]
 8006b7c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006b80:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006b84:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006b88:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006b8c:	b29b      	uxth	r3, r3
 8006b8e:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006b90:	687a      	ldr	r2, [r7, #4]
 8006b92:	683b      	ldr	r3, [r7, #0]
 8006b94:	781b      	ldrb	r3, [r3, #0]
 8006b96:	009b      	lsls	r3, r3, #2
 8006b98:	4413      	add	r3, r2
 8006b9a:	881b      	ldrh	r3, [r3, #0]
 8006b9c:	b29b      	uxth	r3, r3
 8006b9e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006ba2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006ba6:	827b      	strh	r3, [r7, #18]
 8006ba8:	8a7b      	ldrh	r3, [r7, #18]
 8006baa:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8006bae:	827b      	strh	r3, [r7, #18]
 8006bb0:	8a7b      	ldrh	r3, [r7, #18]
 8006bb2:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8006bb6:	827b      	strh	r3, [r7, #18]
 8006bb8:	687a      	ldr	r2, [r7, #4]
 8006bba:	683b      	ldr	r3, [r7, #0]
 8006bbc:	781b      	ldrb	r3, [r3, #0]
 8006bbe:	009b      	lsls	r3, r3, #2
 8006bc0:	441a      	add	r2, r3
 8006bc2:	8a7b      	ldrh	r3, [r7, #18]
 8006bc4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006bc8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006bcc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006bd0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006bd4:	b29b      	uxth	r3, r3
 8006bd6:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8006bd8:	2300      	movs	r3, #0
}
 8006bda:	4618      	mov	r0, r3
 8006bdc:	371c      	adds	r7, #28
 8006bde:	46bd      	mov	sp, r7
 8006be0:	bc80      	pop	{r7}
 8006be2:	4770      	bx	lr

08006be4 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8006be4:	b480      	push	{r7}
 8006be6:	b083      	sub	sp, #12
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	6078      	str	r0, [r7, #4]
 8006bec:	460b      	mov	r3, r1
 8006bee:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8006bf0:	78fb      	ldrb	r3, [r7, #3]
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d103      	bne.n	8006bfe <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	2280      	movs	r2, #128	@ 0x80
 8006bfa:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8006bfe:	2300      	movs	r3, #0
}
 8006c00:	4618      	mov	r0, r3
 8006c02:	370c      	adds	r7, #12
 8006c04:	46bd      	mov	sp, r7
 8006c06:	bc80      	pop	{r7}
 8006c08:	4770      	bx	lr

08006c0a <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8006c0a:	b480      	push	{r7}
 8006c0c:	b083      	sub	sp, #12
 8006c0e:	af00      	add	r7, sp, #0
 8006c10:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006c12:	2300      	movs	r3, #0
}
 8006c14:	4618      	mov	r0, r3
 8006c16:	370c      	adds	r7, #12
 8006c18:	46bd      	mov	sp, r7
 8006c1a:	bc80      	pop	{r7}
 8006c1c:	4770      	bx	lr

08006c1e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8006c1e:	b480      	push	{r7}
 8006c20:	b083      	sub	sp, #12
 8006c22:	af00      	add	r7, sp, #0
 8006c24:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006c26:	2300      	movs	r3, #0
}
 8006c28:	4618      	mov	r0, r3
 8006c2a:	370c      	adds	r7, #12
 8006c2c:	46bd      	mov	sp, r7
 8006c2e:	bc80      	pop	{r7}
 8006c30:	4770      	bx	lr

08006c32 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8006c32:	b480      	push	{r7}
 8006c34:	b085      	sub	sp, #20
 8006c36:	af00      	add	r7, sp, #0
 8006c38:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8006c40:	b29b      	uxth	r3, r3
 8006c42:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8006c44:	68fb      	ldr	r3, [r7, #12]
}
 8006c46:	4618      	mov	r0, r3
 8006c48:	3714      	adds	r7, #20
 8006c4a:	46bd      	mov	sp, r7
 8006c4c:	bc80      	pop	{r7}
 8006c4e:	4770      	bx	lr

08006c50 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8006c50:	b480      	push	{r7}
 8006c52:	b083      	sub	sp, #12
 8006c54:	af00      	add	r7, sp, #0
 8006c56:	6078      	str	r0, [r7, #4]
 8006c58:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8006c5a:	2300      	movs	r3, #0
}
 8006c5c:	4618      	mov	r0, r3
 8006c5e:	370c      	adds	r7, #12
 8006c60:	46bd      	mov	sp, r7
 8006c62:	bc80      	pop	{r7}
 8006c64:	4770      	bx	lr

08006c66 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006c66:	b480      	push	{r7}
 8006c68:	b08b      	sub	sp, #44	@ 0x2c
 8006c6a:	af00      	add	r7, sp, #0
 8006c6c:	60f8      	str	r0, [r7, #12]
 8006c6e:	60b9      	str	r1, [r7, #8]
 8006c70:	4611      	mov	r1, r2
 8006c72:	461a      	mov	r2, r3
 8006c74:	460b      	mov	r3, r1
 8006c76:	80fb      	strh	r3, [r7, #6]
 8006c78:	4613      	mov	r3, r2
 8006c7a:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8006c7c:	88bb      	ldrh	r3, [r7, #4]
 8006c7e:	3301      	adds	r3, #1
 8006c80:	085b      	lsrs	r3, r3, #1
 8006c82:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006c88:	68bb      	ldr	r3, [r7, #8]
 8006c8a:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006c8c:	88fb      	ldrh	r3, [r7, #6]
 8006c8e:	005a      	lsls	r2, r3, #1
 8006c90:	697b      	ldr	r3, [r7, #20]
 8006c92:	4413      	add	r3, r2
 8006c94:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006c98:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8006c9a:	69bb      	ldr	r3, [r7, #24]
 8006c9c:	627b      	str	r3, [r7, #36]	@ 0x24
 8006c9e:	e01f      	b.n	8006ce0 <USB_WritePMA+0x7a>
  {
    WrVal = pBuf[0];
 8006ca0:	69fb      	ldr	r3, [r7, #28]
 8006ca2:	781b      	ldrb	r3, [r3, #0]
 8006ca4:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8006ca6:	69fb      	ldr	r3, [r7, #28]
 8006ca8:	3301      	adds	r3, #1
 8006caa:	781b      	ldrb	r3, [r3, #0]
 8006cac:	b21b      	sxth	r3, r3
 8006cae:	021b      	lsls	r3, r3, #8
 8006cb0:	b21a      	sxth	r2, r3
 8006cb2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006cb6:	4313      	orrs	r3, r2
 8006cb8:	b21b      	sxth	r3, r3
 8006cba:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8006cbc:	6a3b      	ldr	r3, [r7, #32]
 8006cbe:	8a7a      	ldrh	r2, [r7, #18]
 8006cc0:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8006cc2:	6a3b      	ldr	r3, [r7, #32]
 8006cc4:	3302      	adds	r3, #2
 8006cc6:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 8006cc8:	6a3b      	ldr	r3, [r7, #32]
 8006cca:	3302      	adds	r3, #2
 8006ccc:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 8006cce:	69fb      	ldr	r3, [r7, #28]
 8006cd0:	3301      	adds	r3, #1
 8006cd2:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8006cd4:	69fb      	ldr	r3, [r7, #28]
 8006cd6:	3301      	adds	r3, #1
 8006cd8:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8006cda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cdc:	3b01      	subs	r3, #1
 8006cde:	627b      	str	r3, [r7, #36]	@ 0x24
 8006ce0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d1dc      	bne.n	8006ca0 <USB_WritePMA+0x3a>
  }
}
 8006ce6:	bf00      	nop
 8006ce8:	bf00      	nop
 8006cea:	372c      	adds	r7, #44	@ 0x2c
 8006cec:	46bd      	mov	sp, r7
 8006cee:	bc80      	pop	{r7}
 8006cf0:	4770      	bx	lr

08006cf2 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006cf2:	b480      	push	{r7}
 8006cf4:	b08b      	sub	sp, #44	@ 0x2c
 8006cf6:	af00      	add	r7, sp, #0
 8006cf8:	60f8      	str	r0, [r7, #12]
 8006cfa:	60b9      	str	r1, [r7, #8]
 8006cfc:	4611      	mov	r1, r2
 8006cfe:	461a      	mov	r2, r3
 8006d00:	460b      	mov	r3, r1
 8006d02:	80fb      	strh	r3, [r7, #6]
 8006d04:	4613      	mov	r3, r2
 8006d06:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8006d08:	88bb      	ldrh	r3, [r7, #4]
 8006d0a:	085b      	lsrs	r3, r3, #1
 8006d0c:	b29b      	uxth	r3, r3
 8006d0e:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006d14:	68bb      	ldr	r3, [r7, #8]
 8006d16:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006d18:	88fb      	ldrh	r3, [r7, #6]
 8006d1a:	005a      	lsls	r2, r3, #1
 8006d1c:	697b      	ldr	r3, [r7, #20]
 8006d1e:	4413      	add	r3, r2
 8006d20:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006d24:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8006d26:	69bb      	ldr	r3, [r7, #24]
 8006d28:	627b      	str	r3, [r7, #36]	@ 0x24
 8006d2a:	e01b      	b.n	8006d64 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8006d2c:	6a3b      	ldr	r3, [r7, #32]
 8006d2e:	881b      	ldrh	r3, [r3, #0]
 8006d30:	b29b      	uxth	r3, r3
 8006d32:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8006d34:	6a3b      	ldr	r3, [r7, #32]
 8006d36:	3302      	adds	r3, #2
 8006d38:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8006d3a:	693b      	ldr	r3, [r7, #16]
 8006d3c:	b2da      	uxtb	r2, r3
 8006d3e:	69fb      	ldr	r3, [r7, #28]
 8006d40:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006d42:	69fb      	ldr	r3, [r7, #28]
 8006d44:	3301      	adds	r3, #1
 8006d46:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8006d48:	693b      	ldr	r3, [r7, #16]
 8006d4a:	0a1b      	lsrs	r3, r3, #8
 8006d4c:	b2da      	uxtb	r2, r3
 8006d4e:	69fb      	ldr	r3, [r7, #28]
 8006d50:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006d52:	69fb      	ldr	r3, [r7, #28]
 8006d54:	3301      	adds	r3, #1
 8006d56:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8006d58:	6a3b      	ldr	r3, [r7, #32]
 8006d5a:	3302      	adds	r3, #2
 8006d5c:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 8006d5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d60:	3b01      	subs	r3, #1
 8006d62:	627b      	str	r3, [r7, #36]	@ 0x24
 8006d64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d1e0      	bne.n	8006d2c <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8006d6a:	88bb      	ldrh	r3, [r7, #4]
 8006d6c:	f003 0301 	and.w	r3, r3, #1
 8006d70:	b29b      	uxth	r3, r3
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d007      	beq.n	8006d86 <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 8006d76:	6a3b      	ldr	r3, [r7, #32]
 8006d78:	881b      	ldrh	r3, [r3, #0]
 8006d7a:	b29b      	uxth	r3, r3
 8006d7c:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8006d7e:	693b      	ldr	r3, [r7, #16]
 8006d80:	b2da      	uxtb	r2, r3
 8006d82:	69fb      	ldr	r3, [r7, #28]
 8006d84:	701a      	strb	r2, [r3, #0]
  }
}
 8006d86:	bf00      	nop
 8006d88:	372c      	adds	r7, #44	@ 0x2c
 8006d8a:	46bd      	mov	sp, r7
 8006d8c:	bc80      	pop	{r7}
 8006d8e:	4770      	bx	lr

08006d90 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006d90:	b580      	push	{r7, lr}
 8006d92:	b084      	sub	sp, #16
 8006d94:	af00      	add	r7, sp, #0
 8006d96:	6078      	str	r0, [r7, #4]
 8006d98:	460b      	mov	r3, r1
 8006d9a:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8006d9c:	2300      	movs	r3, #0
 8006d9e:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	7c1b      	ldrb	r3, [r3, #16]
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d115      	bne.n	8006dd4 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006da8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006dac:	2202      	movs	r2, #2
 8006dae:	2181      	movs	r1, #129	@ 0x81
 8006db0:	6878      	ldr	r0, [r7, #4]
 8006db2:	f001 fe82 	bl	8008aba <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	2201      	movs	r2, #1
 8006dba:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006dbc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006dc0:	2202      	movs	r2, #2
 8006dc2:	2101      	movs	r1, #1
 8006dc4:	6878      	ldr	r0, [r7, #4]
 8006dc6:	f001 fe78 	bl	8008aba <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	2201      	movs	r2, #1
 8006dce:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
 8006dd2:	e012      	b.n	8006dfa <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006dd4:	2340      	movs	r3, #64	@ 0x40
 8006dd6:	2202      	movs	r2, #2
 8006dd8:	2181      	movs	r1, #129	@ 0x81
 8006dda:	6878      	ldr	r0, [r7, #4]
 8006ddc:	f001 fe6d 	bl	8008aba <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	2201      	movs	r2, #1
 8006de4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006de6:	2340      	movs	r3, #64	@ 0x40
 8006de8:	2202      	movs	r2, #2
 8006dea:	2101      	movs	r1, #1
 8006dec:	6878      	ldr	r0, [r7, #4]
 8006dee:	f001 fe64 	bl	8008aba <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	2201      	movs	r2, #1
 8006df6:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006dfa:	2308      	movs	r3, #8
 8006dfc:	2203      	movs	r2, #3
 8006dfe:	2182      	movs	r1, #130	@ 0x82
 8006e00:	6878      	ldr	r0, [r7, #4]
 8006e02:	f001 fe5a 	bl	8008aba <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	2201      	movs	r2, #1
 8006e0a:	641a      	str	r2, [r3, #64]	@ 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006e0c:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8006e10:	f001 ff7a 	bl	8008d08 <USBD_static_malloc>
 8006e14:	4602      	mov	r2, r0
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8

  if (pdev->pClassData == NULL)
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d102      	bne.n	8006e2c <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8006e26:	2301      	movs	r3, #1
 8006e28:	73fb      	strb	r3, [r7, #15]
 8006e2a:	e026      	b.n	8006e7a <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006e32:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8006e3e:	68bb      	ldr	r3, [r7, #8]
 8006e40:	2200      	movs	r2, #0
 8006e42:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    hcdc->RxState = 0U;
 8006e46:	68bb      	ldr	r3, [r7, #8]
 8006e48:	2200      	movs	r2, #0
 8006e4a:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	7c1b      	ldrb	r3, [r3, #16]
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d109      	bne.n	8006e6a <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006e56:	68bb      	ldr	r3, [r7, #8]
 8006e58:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006e5c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006e60:	2101      	movs	r1, #1
 8006e62:	6878      	ldr	r0, [r7, #4]
 8006e64:	f001 ff19 	bl	8008c9a <USBD_LL_PrepareReceive>
 8006e68:	e007      	b.n	8006e7a <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006e6a:	68bb      	ldr	r3, [r7, #8]
 8006e6c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006e70:	2340      	movs	r3, #64	@ 0x40
 8006e72:	2101      	movs	r1, #1
 8006e74:	6878      	ldr	r0, [r7, #4]
 8006e76:	f001 ff10 	bl	8008c9a <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8006e7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e7c:	4618      	mov	r0, r3
 8006e7e:	3710      	adds	r7, #16
 8006e80:	46bd      	mov	sp, r7
 8006e82:	bd80      	pop	{r7, pc}

08006e84 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006e84:	b580      	push	{r7, lr}
 8006e86:	b084      	sub	sp, #16
 8006e88:	af00      	add	r7, sp, #0
 8006e8a:	6078      	str	r0, [r7, #4]
 8006e8c:	460b      	mov	r3, r1
 8006e8e:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8006e90:	2300      	movs	r3, #0
 8006e92:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8006e94:	2181      	movs	r1, #129	@ 0x81
 8006e96:	6878      	ldr	r0, [r7, #4]
 8006e98:	f001 fe35 	bl	8008b06 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	2200      	movs	r2, #0
 8006ea0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8006ea2:	2101      	movs	r1, #1
 8006ea4:	6878      	ldr	r0, [r7, #4]
 8006ea6:	f001 fe2e 	bl	8008b06 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	2200      	movs	r2, #0
 8006eae:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8006eb2:	2182      	movs	r1, #130	@ 0x82
 8006eb4:	6878      	ldr	r0, [r7, #4]
 8006eb6:	f001 fe26 	bl	8008b06 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	2200      	movs	r2, #0
 8006ebe:	641a      	str	r2, [r3, #64]	@ 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d00e      	beq.n	8006ee8 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8006ed0:	685b      	ldr	r3, [r3, #4]
 8006ed2:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006eda:	4618      	mov	r0, r3
 8006edc:	f001 ff20 	bl	8008d20 <USBD_static_free>
    pdev->pClassData = NULL;
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	2200      	movs	r2, #0
 8006ee4:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  }

  return ret;
 8006ee8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006eea:	4618      	mov	r0, r3
 8006eec:	3710      	adds	r7, #16
 8006eee:	46bd      	mov	sp, r7
 8006ef0:	bd80      	pop	{r7, pc}

08006ef2 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8006ef2:	b580      	push	{r7, lr}
 8006ef4:	b086      	sub	sp, #24
 8006ef6:	af00      	add	r7, sp, #0
 8006ef8:	6078      	str	r0, [r7, #4]
 8006efa:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006f02:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8006f04:	2300      	movs	r3, #0
 8006f06:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8006f08:	2300      	movs	r3, #0
 8006f0a:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8006f0c:	2300      	movs	r3, #0
 8006f0e:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006f10:	683b      	ldr	r3, [r7, #0]
 8006f12:	781b      	ldrb	r3, [r3, #0]
 8006f14:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d039      	beq.n	8006f90 <USBD_CDC_Setup+0x9e>
 8006f1c:	2b20      	cmp	r3, #32
 8006f1e:	d17f      	bne.n	8007020 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8006f20:	683b      	ldr	r3, [r7, #0]
 8006f22:	88db      	ldrh	r3, [r3, #6]
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d029      	beq.n	8006f7c <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8006f28:	683b      	ldr	r3, [r7, #0]
 8006f2a:	781b      	ldrb	r3, [r3, #0]
 8006f2c:	b25b      	sxtb	r3, r3
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	da11      	bge.n	8006f56 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8006f38:	689b      	ldr	r3, [r3, #8]
 8006f3a:	683a      	ldr	r2, [r7, #0]
 8006f3c:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8006f3e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006f40:	683a      	ldr	r2, [r7, #0]
 8006f42:	88d2      	ldrh	r2, [r2, #6]
 8006f44:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006f46:	6939      	ldr	r1, [r7, #16]
 8006f48:	683b      	ldr	r3, [r7, #0]
 8006f4a:	88db      	ldrh	r3, [r3, #6]
 8006f4c:	461a      	mov	r2, r3
 8006f4e:	6878      	ldr	r0, [r7, #4]
 8006f50:	f001 fa06 	bl	8008360 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8006f54:	e06b      	b.n	800702e <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8006f56:	683b      	ldr	r3, [r7, #0]
 8006f58:	785a      	ldrb	r2, [r3, #1]
 8006f5a:	693b      	ldr	r3, [r7, #16]
 8006f5c:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8006f60:	683b      	ldr	r3, [r7, #0]
 8006f62:	88db      	ldrh	r3, [r3, #6]
 8006f64:	b2da      	uxtb	r2, r3
 8006f66:	693b      	ldr	r3, [r7, #16]
 8006f68:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006f6c:	6939      	ldr	r1, [r7, #16]
 8006f6e:	683b      	ldr	r3, [r7, #0]
 8006f70:	88db      	ldrh	r3, [r3, #6]
 8006f72:	461a      	mov	r2, r3
 8006f74:	6878      	ldr	r0, [r7, #4]
 8006f76:	f001 fa21 	bl	80083bc <USBD_CtlPrepareRx>
      break;
 8006f7a:	e058      	b.n	800702e <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8006f82:	689b      	ldr	r3, [r3, #8]
 8006f84:	683a      	ldr	r2, [r7, #0]
 8006f86:	7850      	ldrb	r0, [r2, #1]
 8006f88:	2200      	movs	r2, #0
 8006f8a:	6839      	ldr	r1, [r7, #0]
 8006f8c:	4798      	blx	r3
      break;
 8006f8e:	e04e      	b.n	800702e <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006f90:	683b      	ldr	r3, [r7, #0]
 8006f92:	785b      	ldrb	r3, [r3, #1]
 8006f94:	2b0b      	cmp	r3, #11
 8006f96:	d02e      	beq.n	8006ff6 <USBD_CDC_Setup+0x104>
 8006f98:	2b0b      	cmp	r3, #11
 8006f9a:	dc38      	bgt.n	800700e <USBD_CDC_Setup+0x11c>
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d002      	beq.n	8006fa6 <USBD_CDC_Setup+0xb4>
 8006fa0:	2b0a      	cmp	r3, #10
 8006fa2:	d014      	beq.n	8006fce <USBD_CDC_Setup+0xdc>
 8006fa4:	e033      	b.n	800700e <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006fac:	2b03      	cmp	r3, #3
 8006fae:	d107      	bne.n	8006fc0 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8006fb0:	f107 030c 	add.w	r3, r7, #12
 8006fb4:	2202      	movs	r2, #2
 8006fb6:	4619      	mov	r1, r3
 8006fb8:	6878      	ldr	r0, [r7, #4]
 8006fba:	f001 f9d1 	bl	8008360 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006fbe:	e02e      	b.n	800701e <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8006fc0:	6839      	ldr	r1, [r7, #0]
 8006fc2:	6878      	ldr	r0, [r7, #4]
 8006fc4:	f001 f962 	bl	800828c <USBD_CtlError>
            ret = USBD_FAIL;
 8006fc8:	2302      	movs	r3, #2
 8006fca:	75fb      	strb	r3, [r7, #23]
          break;
 8006fcc:	e027      	b.n	800701e <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006fd4:	2b03      	cmp	r3, #3
 8006fd6:	d107      	bne.n	8006fe8 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8006fd8:	f107 030f 	add.w	r3, r7, #15
 8006fdc:	2201      	movs	r2, #1
 8006fde:	4619      	mov	r1, r3
 8006fe0:	6878      	ldr	r0, [r7, #4]
 8006fe2:	f001 f9bd 	bl	8008360 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006fe6:	e01a      	b.n	800701e <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8006fe8:	6839      	ldr	r1, [r7, #0]
 8006fea:	6878      	ldr	r0, [r7, #4]
 8006fec:	f001 f94e 	bl	800828c <USBD_CtlError>
            ret = USBD_FAIL;
 8006ff0:	2302      	movs	r3, #2
 8006ff2:	75fb      	strb	r3, [r7, #23]
          break;
 8006ff4:	e013      	b.n	800701e <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006ffc:	2b03      	cmp	r3, #3
 8006ffe:	d00d      	beq.n	800701c <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8007000:	6839      	ldr	r1, [r7, #0]
 8007002:	6878      	ldr	r0, [r7, #4]
 8007004:	f001 f942 	bl	800828c <USBD_CtlError>
            ret = USBD_FAIL;
 8007008:	2302      	movs	r3, #2
 800700a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800700c:	e006      	b.n	800701c <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 800700e:	6839      	ldr	r1, [r7, #0]
 8007010:	6878      	ldr	r0, [r7, #4]
 8007012:	f001 f93b 	bl	800828c <USBD_CtlError>
          ret = USBD_FAIL;
 8007016:	2302      	movs	r3, #2
 8007018:	75fb      	strb	r3, [r7, #23]
          break;
 800701a:	e000      	b.n	800701e <USBD_CDC_Setup+0x12c>
          break;
 800701c:	bf00      	nop
      }
      break;
 800701e:	e006      	b.n	800702e <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8007020:	6839      	ldr	r1, [r7, #0]
 8007022:	6878      	ldr	r0, [r7, #4]
 8007024:	f001 f932 	bl	800828c <USBD_CtlError>
      ret = USBD_FAIL;
 8007028:	2302      	movs	r3, #2
 800702a:	75fb      	strb	r3, [r7, #23]
      break;
 800702c:	bf00      	nop
  }

  return ret;
 800702e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007030:	4618      	mov	r0, r3
 8007032:	3718      	adds	r7, #24
 8007034:	46bd      	mov	sp, r7
 8007036:	bd80      	pop	{r7, pc}

08007038 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007038:	b580      	push	{r7, lr}
 800703a:	b084      	sub	sp, #16
 800703c:	af00      	add	r7, sp, #0
 800703e:	6078      	str	r0, [r7, #4]
 8007040:	460b      	mov	r3, r1
 8007042:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800704a:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8007052:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800705a:	2b00      	cmp	r3, #0
 800705c:	d03a      	beq.n	80070d4 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800705e:	78fa      	ldrb	r2, [r7, #3]
 8007060:	6879      	ldr	r1, [r7, #4]
 8007062:	4613      	mov	r3, r2
 8007064:	009b      	lsls	r3, r3, #2
 8007066:	4413      	add	r3, r2
 8007068:	009b      	lsls	r3, r3, #2
 800706a:	440b      	add	r3, r1
 800706c:	331c      	adds	r3, #28
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	2b00      	cmp	r3, #0
 8007072:	d029      	beq.n	80070c8 <USBD_CDC_DataIn+0x90>
 8007074:	78fa      	ldrb	r2, [r7, #3]
 8007076:	6879      	ldr	r1, [r7, #4]
 8007078:	4613      	mov	r3, r2
 800707a:	009b      	lsls	r3, r3, #2
 800707c:	4413      	add	r3, r2
 800707e:	009b      	lsls	r3, r3, #2
 8007080:	440b      	add	r3, r1
 8007082:	331c      	adds	r3, #28
 8007084:	681a      	ldr	r2, [r3, #0]
 8007086:	78f9      	ldrb	r1, [r7, #3]
 8007088:	68b8      	ldr	r0, [r7, #8]
 800708a:	460b      	mov	r3, r1
 800708c:	009b      	lsls	r3, r3, #2
 800708e:	440b      	add	r3, r1
 8007090:	00db      	lsls	r3, r3, #3
 8007092:	4403      	add	r3, r0
 8007094:	3320      	adds	r3, #32
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	fbb2 f1f3 	udiv	r1, r2, r3
 800709c:	fb01 f303 	mul.w	r3, r1, r3
 80070a0:	1ad3      	subs	r3, r2, r3
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d110      	bne.n	80070c8 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 80070a6:	78fa      	ldrb	r2, [r7, #3]
 80070a8:	6879      	ldr	r1, [r7, #4]
 80070aa:	4613      	mov	r3, r2
 80070ac:	009b      	lsls	r3, r3, #2
 80070ae:	4413      	add	r3, r2
 80070b0:	009b      	lsls	r3, r3, #2
 80070b2:	440b      	add	r3, r1
 80070b4:	331c      	adds	r3, #28
 80070b6:	2200      	movs	r2, #0
 80070b8:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80070ba:	78f9      	ldrb	r1, [r7, #3]
 80070bc:	2300      	movs	r3, #0
 80070be:	2200      	movs	r2, #0
 80070c0:	6878      	ldr	r0, [r7, #4]
 80070c2:	f001 fdc7 	bl	8008c54 <USBD_LL_Transmit>
 80070c6:	e003      	b.n	80070d0 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	2200      	movs	r2, #0
 80070cc:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }
    return USBD_OK;
 80070d0:	2300      	movs	r3, #0
 80070d2:	e000      	b.n	80070d6 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 80070d4:	2302      	movs	r3, #2
  }
}
 80070d6:	4618      	mov	r0, r3
 80070d8:	3710      	adds	r7, #16
 80070da:	46bd      	mov	sp, r7
 80070dc:	bd80      	pop	{r7, pc}

080070de <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80070de:	b580      	push	{r7, lr}
 80070e0:	b084      	sub	sp, #16
 80070e2:	af00      	add	r7, sp, #0
 80070e4:	6078      	str	r0, [r7, #4]
 80070e6:	460b      	mov	r3, r1
 80070e8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80070f0:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80070f2:	78fb      	ldrb	r3, [r7, #3]
 80070f4:	4619      	mov	r1, r3
 80070f6:	6878      	ldr	r0, [r7, #4]
 80070f8:	f001 fdf2 	bl	8008ce0 <USBD_LL_GetRxDataSize>
 80070fc:	4602      	mov	r2, r0
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800710a:	2b00      	cmp	r3, #0
 800710c:	d00d      	beq.n	800712a <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007114:	68db      	ldr	r3, [r3, #12]
 8007116:	68fa      	ldr	r2, [r7, #12]
 8007118:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800711c:	68fa      	ldr	r2, [r7, #12]
 800711e:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8007122:	4611      	mov	r1, r2
 8007124:	4798      	blx	r3

    return USBD_OK;
 8007126:	2300      	movs	r3, #0
 8007128:	e000      	b.n	800712c <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 800712a:	2302      	movs	r3, #2
  }
}
 800712c:	4618      	mov	r0, r3
 800712e:	3710      	adds	r7, #16
 8007130:	46bd      	mov	sp, r7
 8007132:	bd80      	pop	{r7, pc}

08007134 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007134:	b580      	push	{r7, lr}
 8007136:	b084      	sub	sp, #16
 8007138:	af00      	add	r7, sp, #0
 800713a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007142:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800714a:	2b00      	cmp	r3, #0
 800714c:	d014      	beq.n	8007178 <USBD_CDC_EP0_RxReady+0x44>
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8007154:	2bff      	cmp	r3, #255	@ 0xff
 8007156:	d00f      	beq.n	8007178 <USBD_CDC_EP0_RxReady+0x44>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800715e:	689b      	ldr	r3, [r3, #8]
 8007160:	68fa      	ldr	r2, [r7, #12]
 8007162:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8007166:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8007168:	68fa      	ldr	r2, [r7, #12]
 800716a:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800716e:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	22ff      	movs	r2, #255	@ 0xff
 8007174:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200

  }
  return USBD_OK;
 8007178:	2300      	movs	r3, #0
}
 800717a:	4618      	mov	r0, r3
 800717c:	3710      	adds	r7, #16
 800717e:	46bd      	mov	sp, r7
 8007180:	bd80      	pop	{r7, pc}
	...

08007184 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007184:	b480      	push	{r7}
 8007186:	b083      	sub	sp, #12
 8007188:	af00      	add	r7, sp, #0
 800718a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	2243      	movs	r2, #67	@ 0x43
 8007190:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8007192:	4b03      	ldr	r3, [pc, #12]	@ (80071a0 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8007194:	4618      	mov	r0, r3
 8007196:	370c      	adds	r7, #12
 8007198:	46bd      	mov	sp, r7
 800719a:	bc80      	pop	{r7}
 800719c:	4770      	bx	lr
 800719e:	bf00      	nop
 80071a0:	20000094 	.word	0x20000094

080071a4 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80071a4:	b480      	push	{r7}
 80071a6:	b083      	sub	sp, #12
 80071a8:	af00      	add	r7, sp, #0
 80071aa:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	2243      	movs	r2, #67	@ 0x43
 80071b0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 80071b2:	4b03      	ldr	r3, [pc, #12]	@ (80071c0 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80071b4:	4618      	mov	r0, r3
 80071b6:	370c      	adds	r7, #12
 80071b8:	46bd      	mov	sp, r7
 80071ba:	bc80      	pop	{r7}
 80071bc:	4770      	bx	lr
 80071be:	bf00      	nop
 80071c0:	20000050 	.word	0x20000050

080071c4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80071c4:	b480      	push	{r7}
 80071c6:	b083      	sub	sp, #12
 80071c8:	af00      	add	r7, sp, #0
 80071ca:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	2243      	movs	r2, #67	@ 0x43
 80071d0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 80071d2:	4b03      	ldr	r3, [pc, #12]	@ (80071e0 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80071d4:	4618      	mov	r0, r3
 80071d6:	370c      	adds	r7, #12
 80071d8:	46bd      	mov	sp, r7
 80071da:	bc80      	pop	{r7}
 80071dc:	4770      	bx	lr
 80071de:	bf00      	nop
 80071e0:	200000d8 	.word	0x200000d8

080071e4 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80071e4:	b480      	push	{r7}
 80071e6:	b083      	sub	sp, #12
 80071e8:	af00      	add	r7, sp, #0
 80071ea:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	220a      	movs	r2, #10
 80071f0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 80071f2:	4b03      	ldr	r3, [pc, #12]	@ (8007200 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80071f4:	4618      	mov	r0, r3
 80071f6:	370c      	adds	r7, #12
 80071f8:	46bd      	mov	sp, r7
 80071fa:	bc80      	pop	{r7}
 80071fc:	4770      	bx	lr
 80071fe:	bf00      	nop
 8007200:	2000000c 	.word	0x2000000c

08007204 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8007204:	b480      	push	{r7}
 8007206:	b085      	sub	sp, #20
 8007208:	af00      	add	r7, sp, #0
 800720a:	6078      	str	r0, [r7, #4]
 800720c:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800720e:	2302      	movs	r3, #2
 8007210:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8007212:	683b      	ldr	r3, [r7, #0]
 8007214:	2b00      	cmp	r3, #0
 8007216:	d005      	beq.n	8007224 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	683a      	ldr	r2, [r7, #0]
 800721c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    ret = USBD_OK;
 8007220:	2300      	movs	r3, #0
 8007222:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8007224:	7bfb      	ldrb	r3, [r7, #15]
}
 8007226:	4618      	mov	r0, r3
 8007228:	3714      	adds	r7, #20
 800722a:	46bd      	mov	sp, r7
 800722c:	bc80      	pop	{r7}
 800722e:	4770      	bx	lr

08007230 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8007230:	b480      	push	{r7}
 8007232:	b087      	sub	sp, #28
 8007234:	af00      	add	r7, sp, #0
 8007236:	60f8      	str	r0, [r7, #12]
 8007238:	60b9      	str	r1, [r7, #8]
 800723a:	4613      	mov	r3, r2
 800723c:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007244:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8007246:	697b      	ldr	r3, [r7, #20]
 8007248:	68ba      	ldr	r2, [r7, #8]
 800724a:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800724e:	88fa      	ldrh	r2, [r7, #6]
 8007250:	697b      	ldr	r3, [r7, #20]
 8007252:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return USBD_OK;
 8007256:	2300      	movs	r3, #0
}
 8007258:	4618      	mov	r0, r3
 800725a:	371c      	adds	r7, #28
 800725c:	46bd      	mov	sp, r7
 800725e:	bc80      	pop	{r7}
 8007260:	4770      	bx	lr

08007262 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8007262:	b480      	push	{r7}
 8007264:	b085      	sub	sp, #20
 8007266:	af00      	add	r7, sp, #0
 8007268:	6078      	str	r0, [r7, #4]
 800726a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007272:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	683a      	ldr	r2, [r7, #0]
 8007278:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return USBD_OK;
 800727c:	2300      	movs	r3, #0
}
 800727e:	4618      	mov	r0, r3
 8007280:	3714      	adds	r7, #20
 8007282:	46bd      	mov	sp, r7
 8007284:	bc80      	pop	{r7}
 8007286:	4770      	bx	lr

08007288 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8007288:	b580      	push	{r7, lr}
 800728a:	b084      	sub	sp, #16
 800728c:	af00      	add	r7, sp, #0
 800728e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007296:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d01c      	beq.n	80072dc <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d115      	bne.n	80072d8 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	2201      	movs	r2, #1
 80072b0:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	f8d3 2210 	ldr.w	r2, [r3, #528]	@ 0x210
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
                       (uint16_t)hcdc->TxLength);
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80072ca:	b29b      	uxth	r3, r3
 80072cc:	2181      	movs	r1, #129	@ 0x81
 80072ce:	6878      	ldr	r0, [r7, #4]
 80072d0:	f001 fcc0 	bl	8008c54 <USBD_LL_Transmit>

      return USBD_OK;
 80072d4:	2300      	movs	r3, #0
 80072d6:	e002      	b.n	80072de <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 80072d8:	2301      	movs	r3, #1
 80072da:	e000      	b.n	80072de <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 80072dc:	2302      	movs	r3, #2
  }
}
 80072de:	4618      	mov	r0, r3
 80072e0:	3710      	adds	r7, #16
 80072e2:	46bd      	mov	sp, r7
 80072e4:	bd80      	pop	{r7, pc}

080072e6 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80072e6:	b580      	push	{r7, lr}
 80072e8:	b084      	sub	sp, #16
 80072ea:	af00      	add	r7, sp, #0
 80072ec:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80072f4:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d017      	beq.n	8007330 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	7c1b      	ldrb	r3, [r3, #16]
 8007304:	2b00      	cmp	r3, #0
 8007306:	d109      	bne.n	800731c <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800730e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007312:	2101      	movs	r1, #1
 8007314:	6878      	ldr	r0, [r7, #4]
 8007316:	f001 fcc0 	bl	8008c9a <USBD_LL_PrepareReceive>
 800731a:	e007      	b.n	800732c <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007322:	2340      	movs	r3, #64	@ 0x40
 8007324:	2101      	movs	r1, #1
 8007326:	6878      	ldr	r0, [r7, #4]
 8007328:	f001 fcb7 	bl	8008c9a <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800732c:	2300      	movs	r3, #0
 800732e:	e000      	b.n	8007332 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8007330:	2302      	movs	r3, #2
  }
}
 8007332:	4618      	mov	r0, r3
 8007334:	3710      	adds	r7, #16
 8007336:	46bd      	mov	sp, r7
 8007338:	bd80      	pop	{r7, pc}

0800733a <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800733a:	b580      	push	{r7, lr}
 800733c:	b084      	sub	sp, #16
 800733e:	af00      	add	r7, sp, #0
 8007340:	60f8      	str	r0, [r7, #12]
 8007342:	60b9      	str	r1, [r7, #8]
 8007344:	4613      	mov	r3, r2
 8007346:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	2b00      	cmp	r3, #0
 800734c:	d101      	bne.n	8007352 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800734e:	2302      	movs	r3, #2
 8007350:	e01a      	b.n	8007388 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007358:	2b00      	cmp	r3, #0
 800735a:	d003      	beq.n	8007364 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	2200      	movs	r2, #0
 8007360:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007364:	68bb      	ldr	r3, [r7, #8]
 8007366:	2b00      	cmp	r3, #0
 8007368:	d003      	beq.n	8007372 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	68ba      	ldr	r2, [r7, #8]
 800736e:	f8c3 22b0 	str.w	r2, [r3, #688]	@ 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	2201      	movs	r2, #1
 8007376:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	79fa      	ldrb	r2, [r7, #7]
 800737e:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8007380:	68f8      	ldr	r0, [r7, #12]
 8007382:	f001 fb25 	bl	80089d0 <USBD_LL_Init>

  return USBD_OK;
 8007386:	2300      	movs	r3, #0
}
 8007388:	4618      	mov	r0, r3
 800738a:	3710      	adds	r7, #16
 800738c:	46bd      	mov	sp, r7
 800738e:	bd80      	pop	{r7, pc}

08007390 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007390:	b480      	push	{r7}
 8007392:	b085      	sub	sp, #20
 8007394:	af00      	add	r7, sp, #0
 8007396:	6078      	str	r0, [r7, #4]
 8007398:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800739a:	2300      	movs	r3, #0
 800739c:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 800739e:	683b      	ldr	r3, [r7, #0]
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d006      	beq.n	80073b2 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	683a      	ldr	r2, [r7, #0]
 80073a8:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
    status = USBD_OK;
 80073ac:	2300      	movs	r3, #0
 80073ae:	73fb      	strb	r3, [r7, #15]
 80073b0:	e001      	b.n	80073b6 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 80073b2:	2302      	movs	r3, #2
 80073b4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80073b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80073b8:	4618      	mov	r0, r3
 80073ba:	3714      	adds	r7, #20
 80073bc:	46bd      	mov	sp, r7
 80073be:	bc80      	pop	{r7}
 80073c0:	4770      	bx	lr

080073c2 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 80073c2:	b580      	push	{r7, lr}
 80073c4:	b082      	sub	sp, #8
 80073c6:	af00      	add	r7, sp, #0
 80073c8:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80073ca:	6878      	ldr	r0, [r7, #4]
 80073cc:	f001 fb5a 	bl	8008a84 <USBD_LL_Start>

  return USBD_OK;
 80073d0:	2300      	movs	r3, #0
}
 80073d2:	4618      	mov	r0, r3
 80073d4:	3708      	adds	r7, #8
 80073d6:	46bd      	mov	sp, r7
 80073d8:	bd80      	pop	{r7, pc}

080073da <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80073da:	b480      	push	{r7}
 80073dc:	b083      	sub	sp, #12
 80073de:	af00      	add	r7, sp, #0
 80073e0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80073e2:	2300      	movs	r3, #0
}
 80073e4:	4618      	mov	r0, r3
 80073e6:	370c      	adds	r7, #12
 80073e8:	46bd      	mov	sp, r7
 80073ea:	bc80      	pop	{r7}
 80073ec:	4770      	bx	lr

080073ee <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80073ee:	b580      	push	{r7, lr}
 80073f0:	b084      	sub	sp, #16
 80073f2:	af00      	add	r7, sp, #0
 80073f4:	6078      	str	r0, [r7, #4]
 80073f6:	460b      	mov	r3, r1
 80073f8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80073fa:	2302      	movs	r3, #2
 80073fc:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007404:	2b00      	cmp	r3, #0
 8007406:	d00c      	beq.n	8007422 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	78fa      	ldrb	r2, [r7, #3]
 8007412:	4611      	mov	r1, r2
 8007414:	6878      	ldr	r0, [r7, #4]
 8007416:	4798      	blx	r3
 8007418:	4603      	mov	r3, r0
 800741a:	2b00      	cmp	r3, #0
 800741c:	d101      	bne.n	8007422 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800741e:	2300      	movs	r3, #0
 8007420:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8007422:	7bfb      	ldrb	r3, [r7, #15]
}
 8007424:	4618      	mov	r0, r3
 8007426:	3710      	adds	r7, #16
 8007428:	46bd      	mov	sp, r7
 800742a:	bd80      	pop	{r7, pc}

0800742c <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800742c:	b580      	push	{r7, lr}
 800742e:	b082      	sub	sp, #8
 8007430:	af00      	add	r7, sp, #0
 8007432:	6078      	str	r0, [r7, #4]
 8007434:	460b      	mov	r3, r1
 8007436:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800743e:	685b      	ldr	r3, [r3, #4]
 8007440:	78fa      	ldrb	r2, [r7, #3]
 8007442:	4611      	mov	r1, r2
 8007444:	6878      	ldr	r0, [r7, #4]
 8007446:	4798      	blx	r3

  return USBD_OK;
 8007448:	2300      	movs	r3, #0
}
 800744a:	4618      	mov	r0, r3
 800744c:	3708      	adds	r7, #8
 800744e:	46bd      	mov	sp, r7
 8007450:	bd80      	pop	{r7, pc}

08007452 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007452:	b580      	push	{r7, lr}
 8007454:	b082      	sub	sp, #8
 8007456:	af00      	add	r7, sp, #0
 8007458:	6078      	str	r0, [r7, #4]
 800745a:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8007462:	6839      	ldr	r1, [r7, #0]
 8007464:	4618      	mov	r0, r3
 8007466:	f000 fed8 	bl	800821a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	2201      	movs	r2, #1
 800746e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8007478:	461a      	mov	r2, r3
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8007486:	f003 031f 	and.w	r3, r3, #31
 800748a:	2b02      	cmp	r3, #2
 800748c:	d016      	beq.n	80074bc <USBD_LL_SetupStage+0x6a>
 800748e:	2b02      	cmp	r3, #2
 8007490:	d81c      	bhi.n	80074cc <USBD_LL_SetupStage+0x7a>
 8007492:	2b00      	cmp	r3, #0
 8007494:	d002      	beq.n	800749c <USBD_LL_SetupStage+0x4a>
 8007496:	2b01      	cmp	r3, #1
 8007498:	d008      	beq.n	80074ac <USBD_LL_SetupStage+0x5a>
 800749a:	e017      	b.n	80074cc <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 80074a2:	4619      	mov	r1, r3
 80074a4:	6878      	ldr	r0, [r7, #4]
 80074a6:	f000 f9cb 	bl	8007840 <USBD_StdDevReq>
      break;
 80074aa:	e01a      	b.n	80074e2 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 80074b2:	4619      	mov	r1, r3
 80074b4:	6878      	ldr	r0, [r7, #4]
 80074b6:	f000 fa2d 	bl	8007914 <USBD_StdItfReq>
      break;
 80074ba:	e012      	b.n	80074e2 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 80074c2:	4619      	mov	r1, r3
 80074c4:	6878      	ldr	r0, [r7, #4]
 80074c6:	f000 fa6d 	bl	80079a4 <USBD_StdEPReq>
      break;
 80074ca:	e00a      	b.n	80074e2 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 80074d2:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80074d6:	b2db      	uxtb	r3, r3
 80074d8:	4619      	mov	r1, r3
 80074da:	6878      	ldr	r0, [r7, #4]
 80074dc:	f001 fb32 	bl	8008b44 <USBD_LL_StallEP>
      break;
 80074e0:	bf00      	nop
  }

  return USBD_OK;
 80074e2:	2300      	movs	r3, #0
}
 80074e4:	4618      	mov	r0, r3
 80074e6:	3708      	adds	r7, #8
 80074e8:	46bd      	mov	sp, r7
 80074ea:	bd80      	pop	{r7, pc}

080074ec <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80074ec:	b580      	push	{r7, lr}
 80074ee:	b086      	sub	sp, #24
 80074f0:	af00      	add	r7, sp, #0
 80074f2:	60f8      	str	r0, [r7, #12]
 80074f4:	460b      	mov	r3, r1
 80074f6:	607a      	str	r2, [r7, #4]
 80074f8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80074fa:	7afb      	ldrb	r3, [r7, #11]
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d14b      	bne.n	8007598 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8007506:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800750e:	2b03      	cmp	r3, #3
 8007510:	d134      	bne.n	800757c <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8007512:	697b      	ldr	r3, [r7, #20]
 8007514:	68da      	ldr	r2, [r3, #12]
 8007516:	697b      	ldr	r3, [r7, #20]
 8007518:	691b      	ldr	r3, [r3, #16]
 800751a:	429a      	cmp	r2, r3
 800751c:	d919      	bls.n	8007552 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800751e:	697b      	ldr	r3, [r7, #20]
 8007520:	68da      	ldr	r2, [r3, #12]
 8007522:	697b      	ldr	r3, [r7, #20]
 8007524:	691b      	ldr	r3, [r3, #16]
 8007526:	1ad2      	subs	r2, r2, r3
 8007528:	697b      	ldr	r3, [r7, #20]
 800752a:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800752c:	697b      	ldr	r3, [r7, #20]
 800752e:	68da      	ldr	r2, [r3, #12]
 8007530:	697b      	ldr	r3, [r7, #20]
 8007532:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8007534:	429a      	cmp	r2, r3
 8007536:	d203      	bcs.n	8007540 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007538:	697b      	ldr	r3, [r7, #20]
 800753a:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800753c:	b29b      	uxth	r3, r3
 800753e:	e002      	b.n	8007546 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007540:	697b      	ldr	r3, [r7, #20]
 8007542:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8007544:	b29b      	uxth	r3, r3
 8007546:	461a      	mov	r2, r3
 8007548:	6879      	ldr	r1, [r7, #4]
 800754a:	68f8      	ldr	r0, [r7, #12]
 800754c:	f000 ff54 	bl	80083f8 <USBD_CtlContinueRx>
 8007550:	e038      	b.n	80075c4 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007558:	691b      	ldr	r3, [r3, #16]
 800755a:	2b00      	cmp	r3, #0
 800755c:	d00a      	beq.n	8007574 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007564:	2b03      	cmp	r3, #3
 8007566:	d105      	bne.n	8007574 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800756e:	691b      	ldr	r3, [r3, #16]
 8007570:	68f8      	ldr	r0, [r7, #12]
 8007572:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8007574:	68f8      	ldr	r0, [r7, #12]
 8007576:	f000 ff51 	bl	800841c <USBD_CtlSendStatus>
 800757a:	e023      	b.n	80075c4 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8007582:	2b05      	cmp	r3, #5
 8007584:	d11e      	bne.n	80075c4 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	2200      	movs	r2, #0
 800758a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
        USBD_LL_StallEP(pdev, 0U);
 800758e:	2100      	movs	r1, #0
 8007590:	68f8      	ldr	r0, [r7, #12]
 8007592:	f001 fad7 	bl	8008b44 <USBD_LL_StallEP>
 8007596:	e015      	b.n	80075c4 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800759e:	699b      	ldr	r3, [r3, #24]
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d00d      	beq.n	80075c0 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80075aa:	2b03      	cmp	r3, #3
 80075ac:	d108      	bne.n	80075c0 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80075b4:	699b      	ldr	r3, [r3, #24]
 80075b6:	7afa      	ldrb	r2, [r7, #11]
 80075b8:	4611      	mov	r1, r2
 80075ba:	68f8      	ldr	r0, [r7, #12]
 80075bc:	4798      	blx	r3
 80075be:	e001      	b.n	80075c4 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80075c0:	2302      	movs	r3, #2
 80075c2:	e000      	b.n	80075c6 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 80075c4:	2300      	movs	r3, #0
}
 80075c6:	4618      	mov	r0, r3
 80075c8:	3718      	adds	r7, #24
 80075ca:	46bd      	mov	sp, r7
 80075cc:	bd80      	pop	{r7, pc}

080075ce <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80075ce:	b580      	push	{r7, lr}
 80075d0:	b086      	sub	sp, #24
 80075d2:	af00      	add	r7, sp, #0
 80075d4:	60f8      	str	r0, [r7, #12]
 80075d6:	460b      	mov	r3, r1
 80075d8:	607a      	str	r2, [r7, #4]
 80075da:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80075dc:	7afb      	ldrb	r3, [r7, #11]
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d17f      	bne.n	80076e2 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	3314      	adds	r3, #20
 80075e6:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80075ee:	2b02      	cmp	r3, #2
 80075f0:	d15c      	bne.n	80076ac <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 80075f2:	697b      	ldr	r3, [r7, #20]
 80075f4:	68da      	ldr	r2, [r3, #12]
 80075f6:	697b      	ldr	r3, [r7, #20]
 80075f8:	691b      	ldr	r3, [r3, #16]
 80075fa:	429a      	cmp	r2, r3
 80075fc:	d915      	bls.n	800762a <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 80075fe:	697b      	ldr	r3, [r7, #20]
 8007600:	68da      	ldr	r2, [r3, #12]
 8007602:	697b      	ldr	r3, [r7, #20]
 8007604:	691b      	ldr	r3, [r3, #16]
 8007606:	1ad2      	subs	r2, r2, r3
 8007608:	697b      	ldr	r3, [r7, #20]
 800760a:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800760c:	697b      	ldr	r3, [r7, #20]
 800760e:	68db      	ldr	r3, [r3, #12]
 8007610:	b29b      	uxth	r3, r3
 8007612:	461a      	mov	r2, r3
 8007614:	6879      	ldr	r1, [r7, #4]
 8007616:	68f8      	ldr	r0, [r7, #12]
 8007618:	f000 febe 	bl	8008398 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800761c:	2300      	movs	r3, #0
 800761e:	2200      	movs	r2, #0
 8007620:	2100      	movs	r1, #0
 8007622:	68f8      	ldr	r0, [r7, #12]
 8007624:	f001 fb39 	bl	8008c9a <USBD_LL_PrepareReceive>
 8007628:	e04e      	b.n	80076c8 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800762a:	697b      	ldr	r3, [r7, #20]
 800762c:	689b      	ldr	r3, [r3, #8]
 800762e:	697a      	ldr	r2, [r7, #20]
 8007630:	6912      	ldr	r2, [r2, #16]
 8007632:	fbb3 f1f2 	udiv	r1, r3, r2
 8007636:	fb01 f202 	mul.w	r2, r1, r2
 800763a:	1a9b      	subs	r3, r3, r2
 800763c:	2b00      	cmp	r3, #0
 800763e:	d11c      	bne.n	800767a <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8007640:	697b      	ldr	r3, [r7, #20]
 8007642:	689a      	ldr	r2, [r3, #8]
 8007644:	697b      	ldr	r3, [r7, #20]
 8007646:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8007648:	429a      	cmp	r2, r3
 800764a:	d316      	bcc.n	800767a <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800764c:	697b      	ldr	r3, [r7, #20]
 800764e:	689a      	ldr	r2, [r3, #8]
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007656:	429a      	cmp	r2, r3
 8007658:	d20f      	bcs.n	800767a <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800765a:	2200      	movs	r2, #0
 800765c:	2100      	movs	r1, #0
 800765e:	68f8      	ldr	r0, [r7, #12]
 8007660:	f000 fe9a 	bl	8008398 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	2200      	movs	r2, #0
 8007668:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800766c:	2300      	movs	r3, #0
 800766e:	2200      	movs	r2, #0
 8007670:	2100      	movs	r1, #0
 8007672:	68f8      	ldr	r0, [r7, #12]
 8007674:	f001 fb11 	bl	8008c9a <USBD_LL_PrepareReceive>
 8007678:	e026      	b.n	80076c8 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007680:	68db      	ldr	r3, [r3, #12]
 8007682:	2b00      	cmp	r3, #0
 8007684:	d00a      	beq.n	800769c <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800768c:	2b03      	cmp	r3, #3
 800768e:	d105      	bne.n	800769c <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007696:	68db      	ldr	r3, [r3, #12]
 8007698:	68f8      	ldr	r0, [r7, #12]
 800769a:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800769c:	2180      	movs	r1, #128	@ 0x80
 800769e:	68f8      	ldr	r0, [r7, #12]
 80076a0:	f001 fa50 	bl	8008b44 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80076a4:	68f8      	ldr	r0, [r7, #12]
 80076a6:	f000 fecc 	bl	8008442 <USBD_CtlReceiveStatus>
 80076aa:	e00d      	b.n	80076c8 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80076b2:	2b04      	cmp	r3, #4
 80076b4:	d004      	beq.n	80076c0 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d103      	bne.n	80076c8 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 80076c0:	2180      	movs	r1, #128	@ 0x80
 80076c2:	68f8      	ldr	r0, [r7, #12]
 80076c4:	f001 fa3e 	bl	8008b44 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 80076ce:	2b01      	cmp	r3, #1
 80076d0:	d11d      	bne.n	800770e <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 80076d2:	68f8      	ldr	r0, [r7, #12]
 80076d4:	f7ff fe81 	bl	80073da <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	2200      	movs	r2, #0
 80076dc:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 80076e0:	e015      	b.n	800770e <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80076e8:	695b      	ldr	r3, [r3, #20]
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d00d      	beq.n	800770a <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 80076f4:	2b03      	cmp	r3, #3
 80076f6:	d108      	bne.n	800770a <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80076fe:	695b      	ldr	r3, [r3, #20]
 8007700:	7afa      	ldrb	r2, [r7, #11]
 8007702:	4611      	mov	r1, r2
 8007704:	68f8      	ldr	r0, [r7, #12]
 8007706:	4798      	blx	r3
 8007708:	e001      	b.n	800770e <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800770a:	2302      	movs	r3, #2
 800770c:	e000      	b.n	8007710 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800770e:	2300      	movs	r3, #0
}
 8007710:	4618      	mov	r0, r3
 8007712:	3718      	adds	r7, #24
 8007714:	46bd      	mov	sp, r7
 8007716:	bd80      	pop	{r7, pc}

08007718 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007718:	b580      	push	{r7, lr}
 800771a:	b082      	sub	sp, #8
 800771c:	af00      	add	r7, sp, #0
 800771e:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007720:	2340      	movs	r3, #64	@ 0x40
 8007722:	2200      	movs	r2, #0
 8007724:	2100      	movs	r1, #0
 8007726:	6878      	ldr	r0, [r7, #4]
 8007728:	f001 f9c7 	bl	8008aba <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	2201      	movs	r2, #1
 8007730:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	2240      	movs	r2, #64	@ 0x40
 8007738:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800773c:	2340      	movs	r3, #64	@ 0x40
 800773e:	2200      	movs	r2, #0
 8007740:	2180      	movs	r1, #128	@ 0x80
 8007742:	6878      	ldr	r0, [r7, #4]
 8007744:	f001 f9b9 	bl	8008aba <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	2201      	movs	r2, #1
 800774c:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	2240      	movs	r2, #64	@ 0x40
 8007752:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	2201      	movs	r2, #1
 8007758:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	2200      	movs	r2, #0
 8007760:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	2200      	movs	r2, #0
 8007768:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	2200      	movs	r2, #0
 800776e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClassData)
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007778:	2b00      	cmp	r3, #0
 800777a:	d009      	beq.n	8007790 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007782:	685b      	ldr	r3, [r3, #4]
 8007784:	687a      	ldr	r2, [r7, #4]
 8007786:	6852      	ldr	r2, [r2, #4]
 8007788:	b2d2      	uxtb	r2, r2
 800778a:	4611      	mov	r1, r2
 800778c:	6878      	ldr	r0, [r7, #4]
 800778e:	4798      	blx	r3
  }

  return USBD_OK;
 8007790:	2300      	movs	r3, #0
}
 8007792:	4618      	mov	r0, r3
 8007794:	3708      	adds	r7, #8
 8007796:	46bd      	mov	sp, r7
 8007798:	bd80      	pop	{r7, pc}

0800779a <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800779a:	b480      	push	{r7}
 800779c:	b083      	sub	sp, #12
 800779e:	af00      	add	r7, sp, #0
 80077a0:	6078      	str	r0, [r7, #4]
 80077a2:	460b      	mov	r3, r1
 80077a4:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	78fa      	ldrb	r2, [r7, #3]
 80077aa:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80077ac:	2300      	movs	r3, #0
}
 80077ae:	4618      	mov	r0, r3
 80077b0:	370c      	adds	r7, #12
 80077b2:	46bd      	mov	sp, r7
 80077b4:	bc80      	pop	{r7}
 80077b6:	4770      	bx	lr

080077b8 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80077b8:	b480      	push	{r7}
 80077ba:	b083      	sub	sp, #12
 80077bc:	af00      	add	r7, sp, #0
 80077be:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	f893 229c 	ldrb.w	r2, [r3, #668]	@ 0x29c
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	2204      	movs	r2, #4
 80077d0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 80077d4:	2300      	movs	r3, #0
}
 80077d6:	4618      	mov	r0, r3
 80077d8:	370c      	adds	r7, #12
 80077da:	46bd      	mov	sp, r7
 80077dc:	bc80      	pop	{r7}
 80077de:	4770      	bx	lr

080077e0 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80077e0:	b480      	push	{r7}
 80077e2:	b083      	sub	sp, #12
 80077e4:	af00      	add	r7, sp, #0
 80077e6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80077ee:	2b04      	cmp	r3, #4
 80077f0:	d105      	bne.n	80077fe <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	f893 229d 	ldrb.w	r2, [r3, #669]	@ 0x29d
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 80077fe:	2300      	movs	r3, #0
}
 8007800:	4618      	mov	r0, r3
 8007802:	370c      	adds	r7, #12
 8007804:	46bd      	mov	sp, r7
 8007806:	bc80      	pop	{r7}
 8007808:	4770      	bx	lr

0800780a <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800780a:	b580      	push	{r7, lr}
 800780c:	b082      	sub	sp, #8
 800780e:	af00      	add	r7, sp, #0
 8007810:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007818:	2b03      	cmp	r3, #3
 800781a:	d10b      	bne.n	8007834 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007822:	69db      	ldr	r3, [r3, #28]
 8007824:	2b00      	cmp	r3, #0
 8007826:	d005      	beq.n	8007834 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800782e:	69db      	ldr	r3, [r3, #28]
 8007830:	6878      	ldr	r0, [r7, #4]
 8007832:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007834:	2300      	movs	r3, #0
}
 8007836:	4618      	mov	r0, r3
 8007838:	3708      	adds	r7, #8
 800783a:	46bd      	mov	sp, r7
 800783c:	bd80      	pop	{r7, pc}
	...

08007840 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8007840:	b580      	push	{r7, lr}
 8007842:	b084      	sub	sp, #16
 8007844:	af00      	add	r7, sp, #0
 8007846:	6078      	str	r0, [r7, #4]
 8007848:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800784a:	2300      	movs	r3, #0
 800784c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800784e:	683b      	ldr	r3, [r7, #0]
 8007850:	781b      	ldrb	r3, [r3, #0]
 8007852:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007856:	2b40      	cmp	r3, #64	@ 0x40
 8007858:	d005      	beq.n	8007866 <USBD_StdDevReq+0x26>
 800785a:	2b40      	cmp	r3, #64	@ 0x40
 800785c:	d84f      	bhi.n	80078fe <USBD_StdDevReq+0xbe>
 800785e:	2b00      	cmp	r3, #0
 8007860:	d009      	beq.n	8007876 <USBD_StdDevReq+0x36>
 8007862:	2b20      	cmp	r3, #32
 8007864:	d14b      	bne.n	80078fe <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800786c:	689b      	ldr	r3, [r3, #8]
 800786e:	6839      	ldr	r1, [r7, #0]
 8007870:	6878      	ldr	r0, [r7, #4]
 8007872:	4798      	blx	r3
      break;
 8007874:	e048      	b.n	8007908 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007876:	683b      	ldr	r3, [r7, #0]
 8007878:	785b      	ldrb	r3, [r3, #1]
 800787a:	2b09      	cmp	r3, #9
 800787c:	d839      	bhi.n	80078f2 <USBD_StdDevReq+0xb2>
 800787e:	a201      	add	r2, pc, #4	@ (adr r2, 8007884 <USBD_StdDevReq+0x44>)
 8007880:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007884:	080078d5 	.word	0x080078d5
 8007888:	080078e9 	.word	0x080078e9
 800788c:	080078f3 	.word	0x080078f3
 8007890:	080078df 	.word	0x080078df
 8007894:	080078f3 	.word	0x080078f3
 8007898:	080078b7 	.word	0x080078b7
 800789c:	080078ad 	.word	0x080078ad
 80078a0:	080078f3 	.word	0x080078f3
 80078a4:	080078cb 	.word	0x080078cb
 80078a8:	080078c1 	.word	0x080078c1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80078ac:	6839      	ldr	r1, [r7, #0]
 80078ae:	6878      	ldr	r0, [r7, #4]
 80078b0:	f000 f9dc 	bl	8007c6c <USBD_GetDescriptor>
          break;
 80078b4:	e022      	b.n	80078fc <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80078b6:	6839      	ldr	r1, [r7, #0]
 80078b8:	6878      	ldr	r0, [r7, #4]
 80078ba:	f000 fb3f 	bl	8007f3c <USBD_SetAddress>
          break;
 80078be:	e01d      	b.n	80078fc <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 80078c0:	6839      	ldr	r1, [r7, #0]
 80078c2:	6878      	ldr	r0, [r7, #4]
 80078c4:	f000 fb7e 	bl	8007fc4 <USBD_SetConfig>
          break;
 80078c8:	e018      	b.n	80078fc <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80078ca:	6839      	ldr	r1, [r7, #0]
 80078cc:	6878      	ldr	r0, [r7, #4]
 80078ce:	f000 fc07 	bl	80080e0 <USBD_GetConfig>
          break;
 80078d2:	e013      	b.n	80078fc <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80078d4:	6839      	ldr	r1, [r7, #0]
 80078d6:	6878      	ldr	r0, [r7, #4]
 80078d8:	f000 fc37 	bl	800814a <USBD_GetStatus>
          break;
 80078dc:	e00e      	b.n	80078fc <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80078de:	6839      	ldr	r1, [r7, #0]
 80078e0:	6878      	ldr	r0, [r7, #4]
 80078e2:	f000 fc65 	bl	80081b0 <USBD_SetFeature>
          break;
 80078e6:	e009      	b.n	80078fc <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80078e8:	6839      	ldr	r1, [r7, #0]
 80078ea:	6878      	ldr	r0, [r7, #4]
 80078ec:	f000 fc74 	bl	80081d8 <USBD_ClrFeature>
          break;
 80078f0:	e004      	b.n	80078fc <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 80078f2:	6839      	ldr	r1, [r7, #0]
 80078f4:	6878      	ldr	r0, [r7, #4]
 80078f6:	f000 fcc9 	bl	800828c <USBD_CtlError>
          break;
 80078fa:	bf00      	nop
      }
      break;
 80078fc:	e004      	b.n	8007908 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 80078fe:	6839      	ldr	r1, [r7, #0]
 8007900:	6878      	ldr	r0, [r7, #4]
 8007902:	f000 fcc3 	bl	800828c <USBD_CtlError>
      break;
 8007906:	bf00      	nop
  }

  return ret;
 8007908:	7bfb      	ldrb	r3, [r7, #15]
}
 800790a:	4618      	mov	r0, r3
 800790c:	3710      	adds	r7, #16
 800790e:	46bd      	mov	sp, r7
 8007910:	bd80      	pop	{r7, pc}
 8007912:	bf00      	nop

08007914 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8007914:	b580      	push	{r7, lr}
 8007916:	b084      	sub	sp, #16
 8007918:	af00      	add	r7, sp, #0
 800791a:	6078      	str	r0, [r7, #4]
 800791c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800791e:	2300      	movs	r3, #0
 8007920:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007922:	683b      	ldr	r3, [r7, #0]
 8007924:	781b      	ldrb	r3, [r3, #0]
 8007926:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800792a:	2b40      	cmp	r3, #64	@ 0x40
 800792c:	d005      	beq.n	800793a <USBD_StdItfReq+0x26>
 800792e:	2b40      	cmp	r3, #64	@ 0x40
 8007930:	d82e      	bhi.n	8007990 <USBD_StdItfReq+0x7c>
 8007932:	2b00      	cmp	r3, #0
 8007934:	d001      	beq.n	800793a <USBD_StdItfReq+0x26>
 8007936:	2b20      	cmp	r3, #32
 8007938:	d12a      	bne.n	8007990 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007940:	3b01      	subs	r3, #1
 8007942:	2b02      	cmp	r3, #2
 8007944:	d81d      	bhi.n	8007982 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007946:	683b      	ldr	r3, [r7, #0]
 8007948:	889b      	ldrh	r3, [r3, #4]
 800794a:	b2db      	uxtb	r3, r3
 800794c:	2b01      	cmp	r3, #1
 800794e:	d813      	bhi.n	8007978 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007956:	689b      	ldr	r3, [r3, #8]
 8007958:	6839      	ldr	r1, [r7, #0]
 800795a:	6878      	ldr	r0, [r7, #4]
 800795c:	4798      	blx	r3
 800795e:	4603      	mov	r3, r0
 8007960:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007962:	683b      	ldr	r3, [r7, #0]
 8007964:	88db      	ldrh	r3, [r3, #6]
 8007966:	2b00      	cmp	r3, #0
 8007968:	d110      	bne.n	800798c <USBD_StdItfReq+0x78>
 800796a:	7bfb      	ldrb	r3, [r7, #15]
 800796c:	2b00      	cmp	r3, #0
 800796e:	d10d      	bne.n	800798c <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8007970:	6878      	ldr	r0, [r7, #4]
 8007972:	f000 fd53 	bl	800841c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007976:	e009      	b.n	800798c <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8007978:	6839      	ldr	r1, [r7, #0]
 800797a:	6878      	ldr	r0, [r7, #4]
 800797c:	f000 fc86 	bl	800828c <USBD_CtlError>
          break;
 8007980:	e004      	b.n	800798c <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8007982:	6839      	ldr	r1, [r7, #0]
 8007984:	6878      	ldr	r0, [r7, #4]
 8007986:	f000 fc81 	bl	800828c <USBD_CtlError>
          break;
 800798a:	e000      	b.n	800798e <USBD_StdItfReq+0x7a>
          break;
 800798c:	bf00      	nop
      }
      break;
 800798e:	e004      	b.n	800799a <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8007990:	6839      	ldr	r1, [r7, #0]
 8007992:	6878      	ldr	r0, [r7, #4]
 8007994:	f000 fc7a 	bl	800828c <USBD_CtlError>
      break;
 8007998:	bf00      	nop
  }

  return USBD_OK;
 800799a:	2300      	movs	r3, #0
}
 800799c:	4618      	mov	r0, r3
 800799e:	3710      	adds	r7, #16
 80079a0:	46bd      	mov	sp, r7
 80079a2:	bd80      	pop	{r7, pc}

080079a4 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 80079a4:	b580      	push	{r7, lr}
 80079a6:	b084      	sub	sp, #16
 80079a8:	af00      	add	r7, sp, #0
 80079aa:	6078      	str	r0, [r7, #4]
 80079ac:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80079ae:	2300      	movs	r3, #0
 80079b0:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 80079b2:	683b      	ldr	r3, [r7, #0]
 80079b4:	889b      	ldrh	r3, [r3, #4]
 80079b6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80079b8:	683b      	ldr	r3, [r7, #0]
 80079ba:	781b      	ldrb	r3, [r3, #0]
 80079bc:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80079c0:	2b40      	cmp	r3, #64	@ 0x40
 80079c2:	d007      	beq.n	80079d4 <USBD_StdEPReq+0x30>
 80079c4:	2b40      	cmp	r3, #64	@ 0x40
 80079c6:	f200 8146 	bhi.w	8007c56 <USBD_StdEPReq+0x2b2>
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d00a      	beq.n	80079e4 <USBD_StdEPReq+0x40>
 80079ce:	2b20      	cmp	r3, #32
 80079d0:	f040 8141 	bne.w	8007c56 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80079da:	689b      	ldr	r3, [r3, #8]
 80079dc:	6839      	ldr	r1, [r7, #0]
 80079de:	6878      	ldr	r0, [r7, #4]
 80079e0:	4798      	blx	r3
      break;
 80079e2:	e13d      	b.n	8007c60 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 80079e4:	683b      	ldr	r3, [r7, #0]
 80079e6:	781b      	ldrb	r3, [r3, #0]
 80079e8:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80079ec:	2b20      	cmp	r3, #32
 80079ee:	d10a      	bne.n	8007a06 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80079f6:	689b      	ldr	r3, [r3, #8]
 80079f8:	6839      	ldr	r1, [r7, #0]
 80079fa:	6878      	ldr	r0, [r7, #4]
 80079fc:	4798      	blx	r3
 80079fe:	4603      	mov	r3, r0
 8007a00:	73fb      	strb	r3, [r7, #15]

        return ret;
 8007a02:	7bfb      	ldrb	r3, [r7, #15]
 8007a04:	e12d      	b.n	8007c62 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8007a06:	683b      	ldr	r3, [r7, #0]
 8007a08:	785b      	ldrb	r3, [r3, #1]
 8007a0a:	2b03      	cmp	r3, #3
 8007a0c:	d007      	beq.n	8007a1e <USBD_StdEPReq+0x7a>
 8007a0e:	2b03      	cmp	r3, #3
 8007a10:	f300 811b 	bgt.w	8007c4a <USBD_StdEPReq+0x2a6>
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d072      	beq.n	8007afe <USBD_StdEPReq+0x15a>
 8007a18:	2b01      	cmp	r3, #1
 8007a1a:	d03a      	beq.n	8007a92 <USBD_StdEPReq+0xee>
 8007a1c:	e115      	b.n	8007c4a <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007a24:	2b02      	cmp	r3, #2
 8007a26:	d002      	beq.n	8007a2e <USBD_StdEPReq+0x8a>
 8007a28:	2b03      	cmp	r3, #3
 8007a2a:	d015      	beq.n	8007a58 <USBD_StdEPReq+0xb4>
 8007a2c:	e02b      	b.n	8007a86 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007a2e:	7bbb      	ldrb	r3, [r7, #14]
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d00c      	beq.n	8007a4e <USBD_StdEPReq+0xaa>
 8007a34:	7bbb      	ldrb	r3, [r7, #14]
 8007a36:	2b80      	cmp	r3, #128	@ 0x80
 8007a38:	d009      	beq.n	8007a4e <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8007a3a:	7bbb      	ldrb	r3, [r7, #14]
 8007a3c:	4619      	mov	r1, r3
 8007a3e:	6878      	ldr	r0, [r7, #4]
 8007a40:	f001 f880 	bl	8008b44 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8007a44:	2180      	movs	r1, #128	@ 0x80
 8007a46:	6878      	ldr	r0, [r7, #4]
 8007a48:	f001 f87c 	bl	8008b44 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007a4c:	e020      	b.n	8007a90 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8007a4e:	6839      	ldr	r1, [r7, #0]
 8007a50:	6878      	ldr	r0, [r7, #4]
 8007a52:	f000 fc1b 	bl	800828c <USBD_CtlError>
              break;
 8007a56:	e01b      	b.n	8007a90 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007a58:	683b      	ldr	r3, [r7, #0]
 8007a5a:	885b      	ldrh	r3, [r3, #2]
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d10e      	bne.n	8007a7e <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8007a60:	7bbb      	ldrb	r3, [r7, #14]
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d00b      	beq.n	8007a7e <USBD_StdEPReq+0xda>
 8007a66:	7bbb      	ldrb	r3, [r7, #14]
 8007a68:	2b80      	cmp	r3, #128	@ 0x80
 8007a6a:	d008      	beq.n	8007a7e <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007a6c:	683b      	ldr	r3, [r7, #0]
 8007a6e:	88db      	ldrh	r3, [r3, #6]
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d104      	bne.n	8007a7e <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8007a74:	7bbb      	ldrb	r3, [r7, #14]
 8007a76:	4619      	mov	r1, r3
 8007a78:	6878      	ldr	r0, [r7, #4]
 8007a7a:	f001 f863 	bl	8008b44 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8007a7e:	6878      	ldr	r0, [r7, #4]
 8007a80:	f000 fccc 	bl	800841c <USBD_CtlSendStatus>

              break;
 8007a84:	e004      	b.n	8007a90 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8007a86:	6839      	ldr	r1, [r7, #0]
 8007a88:	6878      	ldr	r0, [r7, #4]
 8007a8a:	f000 fbff 	bl	800828c <USBD_CtlError>
              break;
 8007a8e:	bf00      	nop
          }
          break;
 8007a90:	e0e0      	b.n	8007c54 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007a98:	2b02      	cmp	r3, #2
 8007a9a:	d002      	beq.n	8007aa2 <USBD_StdEPReq+0xfe>
 8007a9c:	2b03      	cmp	r3, #3
 8007a9e:	d015      	beq.n	8007acc <USBD_StdEPReq+0x128>
 8007aa0:	e026      	b.n	8007af0 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007aa2:	7bbb      	ldrb	r3, [r7, #14]
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d00c      	beq.n	8007ac2 <USBD_StdEPReq+0x11e>
 8007aa8:	7bbb      	ldrb	r3, [r7, #14]
 8007aaa:	2b80      	cmp	r3, #128	@ 0x80
 8007aac:	d009      	beq.n	8007ac2 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8007aae:	7bbb      	ldrb	r3, [r7, #14]
 8007ab0:	4619      	mov	r1, r3
 8007ab2:	6878      	ldr	r0, [r7, #4]
 8007ab4:	f001 f846 	bl	8008b44 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8007ab8:	2180      	movs	r1, #128	@ 0x80
 8007aba:	6878      	ldr	r0, [r7, #4]
 8007abc:	f001 f842 	bl	8008b44 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007ac0:	e01c      	b.n	8007afc <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8007ac2:	6839      	ldr	r1, [r7, #0]
 8007ac4:	6878      	ldr	r0, [r7, #4]
 8007ac6:	f000 fbe1 	bl	800828c <USBD_CtlError>
              break;
 8007aca:	e017      	b.n	8007afc <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007acc:	683b      	ldr	r3, [r7, #0]
 8007ace:	885b      	ldrh	r3, [r3, #2]
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d112      	bne.n	8007afa <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007ad4:	7bbb      	ldrb	r3, [r7, #14]
 8007ad6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d004      	beq.n	8007ae8 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8007ade:	7bbb      	ldrb	r3, [r7, #14]
 8007ae0:	4619      	mov	r1, r3
 8007ae2:	6878      	ldr	r0, [r7, #4]
 8007ae4:	f001 f84d 	bl	8008b82 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8007ae8:	6878      	ldr	r0, [r7, #4]
 8007aea:	f000 fc97 	bl	800841c <USBD_CtlSendStatus>
              }
              break;
 8007aee:	e004      	b.n	8007afa <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8007af0:	6839      	ldr	r1, [r7, #0]
 8007af2:	6878      	ldr	r0, [r7, #4]
 8007af4:	f000 fbca 	bl	800828c <USBD_CtlError>
              break;
 8007af8:	e000      	b.n	8007afc <USBD_StdEPReq+0x158>
              break;
 8007afa:	bf00      	nop
          }
          break;
 8007afc:	e0aa      	b.n	8007c54 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007b04:	2b02      	cmp	r3, #2
 8007b06:	d002      	beq.n	8007b0e <USBD_StdEPReq+0x16a>
 8007b08:	2b03      	cmp	r3, #3
 8007b0a:	d032      	beq.n	8007b72 <USBD_StdEPReq+0x1ce>
 8007b0c:	e097      	b.n	8007c3e <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007b0e:	7bbb      	ldrb	r3, [r7, #14]
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d007      	beq.n	8007b24 <USBD_StdEPReq+0x180>
 8007b14:	7bbb      	ldrb	r3, [r7, #14]
 8007b16:	2b80      	cmp	r3, #128	@ 0x80
 8007b18:	d004      	beq.n	8007b24 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8007b1a:	6839      	ldr	r1, [r7, #0]
 8007b1c:	6878      	ldr	r0, [r7, #4]
 8007b1e:	f000 fbb5 	bl	800828c <USBD_CtlError>
                break;
 8007b22:	e091      	b.n	8007c48 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007b24:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	da0b      	bge.n	8007b44 <USBD_StdEPReq+0x1a0>
 8007b2c:	7bbb      	ldrb	r3, [r7, #14]
 8007b2e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007b32:	4613      	mov	r3, r2
 8007b34:	009b      	lsls	r3, r3, #2
 8007b36:	4413      	add	r3, r2
 8007b38:	009b      	lsls	r3, r3, #2
 8007b3a:	3310      	adds	r3, #16
 8007b3c:	687a      	ldr	r2, [r7, #4]
 8007b3e:	4413      	add	r3, r2
 8007b40:	3304      	adds	r3, #4
 8007b42:	e00b      	b.n	8007b5c <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007b44:	7bbb      	ldrb	r3, [r7, #14]
 8007b46:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007b4a:	4613      	mov	r3, r2
 8007b4c:	009b      	lsls	r3, r3, #2
 8007b4e:	4413      	add	r3, r2
 8007b50:	009b      	lsls	r3, r3, #2
 8007b52:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007b56:	687a      	ldr	r2, [r7, #4]
 8007b58:	4413      	add	r3, r2
 8007b5a:	3304      	adds	r3, #4
 8007b5c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007b5e:	68bb      	ldr	r3, [r7, #8]
 8007b60:	2200      	movs	r2, #0
 8007b62:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007b64:	68bb      	ldr	r3, [r7, #8]
 8007b66:	2202      	movs	r2, #2
 8007b68:	4619      	mov	r1, r3
 8007b6a:	6878      	ldr	r0, [r7, #4]
 8007b6c:	f000 fbf8 	bl	8008360 <USBD_CtlSendData>
              break;
 8007b70:	e06a      	b.n	8007c48 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007b72:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	da11      	bge.n	8007b9e <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007b7a:	7bbb      	ldrb	r3, [r7, #14]
 8007b7c:	f003 020f 	and.w	r2, r3, #15
 8007b80:	6879      	ldr	r1, [r7, #4]
 8007b82:	4613      	mov	r3, r2
 8007b84:	009b      	lsls	r3, r3, #2
 8007b86:	4413      	add	r3, r2
 8007b88:	009b      	lsls	r3, r3, #2
 8007b8a:	440b      	add	r3, r1
 8007b8c:	3318      	adds	r3, #24
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d117      	bne.n	8007bc4 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8007b94:	6839      	ldr	r1, [r7, #0]
 8007b96:	6878      	ldr	r0, [r7, #4]
 8007b98:	f000 fb78 	bl	800828c <USBD_CtlError>
                  break;
 8007b9c:	e054      	b.n	8007c48 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007b9e:	7bbb      	ldrb	r3, [r7, #14]
 8007ba0:	f003 020f 	and.w	r2, r3, #15
 8007ba4:	6879      	ldr	r1, [r7, #4]
 8007ba6:	4613      	mov	r3, r2
 8007ba8:	009b      	lsls	r3, r3, #2
 8007baa:	4413      	add	r3, r2
 8007bac:	009b      	lsls	r3, r3, #2
 8007bae:	440b      	add	r3, r1
 8007bb0:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d104      	bne.n	8007bc4 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8007bba:	6839      	ldr	r1, [r7, #0]
 8007bbc:	6878      	ldr	r0, [r7, #4]
 8007bbe:	f000 fb65 	bl	800828c <USBD_CtlError>
                  break;
 8007bc2:	e041      	b.n	8007c48 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007bc4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	da0b      	bge.n	8007be4 <USBD_StdEPReq+0x240>
 8007bcc:	7bbb      	ldrb	r3, [r7, #14]
 8007bce:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007bd2:	4613      	mov	r3, r2
 8007bd4:	009b      	lsls	r3, r3, #2
 8007bd6:	4413      	add	r3, r2
 8007bd8:	009b      	lsls	r3, r3, #2
 8007bda:	3310      	adds	r3, #16
 8007bdc:	687a      	ldr	r2, [r7, #4]
 8007bde:	4413      	add	r3, r2
 8007be0:	3304      	adds	r3, #4
 8007be2:	e00b      	b.n	8007bfc <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007be4:	7bbb      	ldrb	r3, [r7, #14]
 8007be6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007bea:	4613      	mov	r3, r2
 8007bec:	009b      	lsls	r3, r3, #2
 8007bee:	4413      	add	r3, r2
 8007bf0:	009b      	lsls	r3, r3, #2
 8007bf2:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007bf6:	687a      	ldr	r2, [r7, #4]
 8007bf8:	4413      	add	r3, r2
 8007bfa:	3304      	adds	r3, #4
 8007bfc:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007bfe:	7bbb      	ldrb	r3, [r7, #14]
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d002      	beq.n	8007c0a <USBD_StdEPReq+0x266>
 8007c04:	7bbb      	ldrb	r3, [r7, #14]
 8007c06:	2b80      	cmp	r3, #128	@ 0x80
 8007c08:	d103      	bne.n	8007c12 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8007c0a:	68bb      	ldr	r3, [r7, #8]
 8007c0c:	2200      	movs	r2, #0
 8007c0e:	601a      	str	r2, [r3, #0]
 8007c10:	e00e      	b.n	8007c30 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8007c12:	7bbb      	ldrb	r3, [r7, #14]
 8007c14:	4619      	mov	r1, r3
 8007c16:	6878      	ldr	r0, [r7, #4]
 8007c18:	f000 ffd2 	bl	8008bc0 <USBD_LL_IsStallEP>
 8007c1c:	4603      	mov	r3, r0
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d003      	beq.n	8007c2a <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8007c22:	68bb      	ldr	r3, [r7, #8]
 8007c24:	2201      	movs	r2, #1
 8007c26:	601a      	str	r2, [r3, #0]
 8007c28:	e002      	b.n	8007c30 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8007c2a:	68bb      	ldr	r3, [r7, #8]
 8007c2c:	2200      	movs	r2, #0
 8007c2e:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007c30:	68bb      	ldr	r3, [r7, #8]
 8007c32:	2202      	movs	r2, #2
 8007c34:	4619      	mov	r1, r3
 8007c36:	6878      	ldr	r0, [r7, #4]
 8007c38:	f000 fb92 	bl	8008360 <USBD_CtlSendData>
              break;
 8007c3c:	e004      	b.n	8007c48 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8007c3e:	6839      	ldr	r1, [r7, #0]
 8007c40:	6878      	ldr	r0, [r7, #4]
 8007c42:	f000 fb23 	bl	800828c <USBD_CtlError>
              break;
 8007c46:	bf00      	nop
          }
          break;
 8007c48:	e004      	b.n	8007c54 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8007c4a:	6839      	ldr	r1, [r7, #0]
 8007c4c:	6878      	ldr	r0, [r7, #4]
 8007c4e:	f000 fb1d 	bl	800828c <USBD_CtlError>
          break;
 8007c52:	bf00      	nop
      }
      break;
 8007c54:	e004      	b.n	8007c60 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8007c56:	6839      	ldr	r1, [r7, #0]
 8007c58:	6878      	ldr	r0, [r7, #4]
 8007c5a:	f000 fb17 	bl	800828c <USBD_CtlError>
      break;
 8007c5e:	bf00      	nop
  }

  return ret;
 8007c60:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c62:	4618      	mov	r0, r3
 8007c64:	3710      	adds	r7, #16
 8007c66:	46bd      	mov	sp, r7
 8007c68:	bd80      	pop	{r7, pc}
	...

08007c6c <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8007c6c:	b580      	push	{r7, lr}
 8007c6e:	b084      	sub	sp, #16
 8007c70:	af00      	add	r7, sp, #0
 8007c72:	6078      	str	r0, [r7, #4]
 8007c74:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007c76:	2300      	movs	r3, #0
 8007c78:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007c7a:	2300      	movs	r3, #0
 8007c7c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007c7e:	2300      	movs	r3, #0
 8007c80:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007c82:	683b      	ldr	r3, [r7, #0]
 8007c84:	885b      	ldrh	r3, [r3, #2]
 8007c86:	0a1b      	lsrs	r3, r3, #8
 8007c88:	b29b      	uxth	r3, r3
 8007c8a:	3b01      	subs	r3, #1
 8007c8c:	2b06      	cmp	r3, #6
 8007c8e:	f200 8128 	bhi.w	8007ee2 <USBD_GetDescriptor+0x276>
 8007c92:	a201      	add	r2, pc, #4	@ (adr r2, 8007c98 <USBD_GetDescriptor+0x2c>)
 8007c94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c98:	08007cb5 	.word	0x08007cb5
 8007c9c:	08007ccd 	.word	0x08007ccd
 8007ca0:	08007d0d 	.word	0x08007d0d
 8007ca4:	08007ee3 	.word	0x08007ee3
 8007ca8:	08007ee3 	.word	0x08007ee3
 8007cac:	08007e83 	.word	0x08007e83
 8007cb0:	08007eaf 	.word	0x08007eaf
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	687a      	ldr	r2, [r7, #4]
 8007cbe:	7c12      	ldrb	r2, [r2, #16]
 8007cc0:	f107 0108 	add.w	r1, r7, #8
 8007cc4:	4610      	mov	r0, r2
 8007cc6:	4798      	blx	r3
 8007cc8:	60f8      	str	r0, [r7, #12]
      break;
 8007cca:	e112      	b.n	8007ef2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	7c1b      	ldrb	r3, [r3, #16]
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d10d      	bne.n	8007cf0 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007cda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007cdc:	f107 0208 	add.w	r2, r7, #8
 8007ce0:	4610      	mov	r0, r2
 8007ce2:	4798      	blx	r3
 8007ce4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	3301      	adds	r3, #1
 8007cea:	2202      	movs	r2, #2
 8007cec:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007cee:	e100      	b.n	8007ef2 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007cf6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007cf8:	f107 0208 	add.w	r2, r7, #8
 8007cfc:	4610      	mov	r0, r2
 8007cfe:	4798      	blx	r3
 8007d00:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	3301      	adds	r3, #1
 8007d06:	2202      	movs	r2, #2
 8007d08:	701a      	strb	r2, [r3, #0]
      break;
 8007d0a:	e0f2      	b.n	8007ef2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007d0c:	683b      	ldr	r3, [r7, #0]
 8007d0e:	885b      	ldrh	r3, [r3, #2]
 8007d10:	b2db      	uxtb	r3, r3
 8007d12:	2b05      	cmp	r3, #5
 8007d14:	f200 80ac 	bhi.w	8007e70 <USBD_GetDescriptor+0x204>
 8007d18:	a201      	add	r2, pc, #4	@ (adr r2, 8007d20 <USBD_GetDescriptor+0xb4>)
 8007d1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d1e:	bf00      	nop
 8007d20:	08007d39 	.word	0x08007d39
 8007d24:	08007d6d 	.word	0x08007d6d
 8007d28:	08007da1 	.word	0x08007da1
 8007d2c:	08007dd5 	.word	0x08007dd5
 8007d30:	08007e09 	.word	0x08007e09
 8007d34:	08007e3d 	.word	0x08007e3d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007d3e:	685b      	ldr	r3, [r3, #4]
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d00b      	beq.n	8007d5c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007d4a:	685b      	ldr	r3, [r3, #4]
 8007d4c:	687a      	ldr	r2, [r7, #4]
 8007d4e:	7c12      	ldrb	r2, [r2, #16]
 8007d50:	f107 0108 	add.w	r1, r7, #8
 8007d54:	4610      	mov	r0, r2
 8007d56:	4798      	blx	r3
 8007d58:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007d5a:	e091      	b.n	8007e80 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007d5c:	6839      	ldr	r1, [r7, #0]
 8007d5e:	6878      	ldr	r0, [r7, #4]
 8007d60:	f000 fa94 	bl	800828c <USBD_CtlError>
            err++;
 8007d64:	7afb      	ldrb	r3, [r7, #11]
 8007d66:	3301      	adds	r3, #1
 8007d68:	72fb      	strb	r3, [r7, #11]
          break;
 8007d6a:	e089      	b.n	8007e80 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007d72:	689b      	ldr	r3, [r3, #8]
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d00b      	beq.n	8007d90 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007d7e:	689b      	ldr	r3, [r3, #8]
 8007d80:	687a      	ldr	r2, [r7, #4]
 8007d82:	7c12      	ldrb	r2, [r2, #16]
 8007d84:	f107 0108 	add.w	r1, r7, #8
 8007d88:	4610      	mov	r0, r2
 8007d8a:	4798      	blx	r3
 8007d8c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007d8e:	e077      	b.n	8007e80 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007d90:	6839      	ldr	r1, [r7, #0]
 8007d92:	6878      	ldr	r0, [r7, #4]
 8007d94:	f000 fa7a 	bl	800828c <USBD_CtlError>
            err++;
 8007d98:	7afb      	ldrb	r3, [r7, #11]
 8007d9a:	3301      	adds	r3, #1
 8007d9c:	72fb      	strb	r3, [r7, #11]
          break;
 8007d9e:	e06f      	b.n	8007e80 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007da6:	68db      	ldr	r3, [r3, #12]
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d00b      	beq.n	8007dc4 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007db2:	68db      	ldr	r3, [r3, #12]
 8007db4:	687a      	ldr	r2, [r7, #4]
 8007db6:	7c12      	ldrb	r2, [r2, #16]
 8007db8:	f107 0108 	add.w	r1, r7, #8
 8007dbc:	4610      	mov	r0, r2
 8007dbe:	4798      	blx	r3
 8007dc0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007dc2:	e05d      	b.n	8007e80 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007dc4:	6839      	ldr	r1, [r7, #0]
 8007dc6:	6878      	ldr	r0, [r7, #4]
 8007dc8:	f000 fa60 	bl	800828c <USBD_CtlError>
            err++;
 8007dcc:	7afb      	ldrb	r3, [r7, #11]
 8007dce:	3301      	adds	r3, #1
 8007dd0:	72fb      	strb	r3, [r7, #11]
          break;
 8007dd2:	e055      	b.n	8007e80 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007dda:	691b      	ldr	r3, [r3, #16]
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d00b      	beq.n	8007df8 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007de6:	691b      	ldr	r3, [r3, #16]
 8007de8:	687a      	ldr	r2, [r7, #4]
 8007dea:	7c12      	ldrb	r2, [r2, #16]
 8007dec:	f107 0108 	add.w	r1, r7, #8
 8007df0:	4610      	mov	r0, r2
 8007df2:	4798      	blx	r3
 8007df4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007df6:	e043      	b.n	8007e80 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007df8:	6839      	ldr	r1, [r7, #0]
 8007dfa:	6878      	ldr	r0, [r7, #4]
 8007dfc:	f000 fa46 	bl	800828c <USBD_CtlError>
            err++;
 8007e00:	7afb      	ldrb	r3, [r7, #11]
 8007e02:	3301      	adds	r3, #1
 8007e04:	72fb      	strb	r3, [r7, #11]
          break;
 8007e06:	e03b      	b.n	8007e80 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007e0e:	695b      	ldr	r3, [r3, #20]
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d00b      	beq.n	8007e2c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007e1a:	695b      	ldr	r3, [r3, #20]
 8007e1c:	687a      	ldr	r2, [r7, #4]
 8007e1e:	7c12      	ldrb	r2, [r2, #16]
 8007e20:	f107 0108 	add.w	r1, r7, #8
 8007e24:	4610      	mov	r0, r2
 8007e26:	4798      	blx	r3
 8007e28:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007e2a:	e029      	b.n	8007e80 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007e2c:	6839      	ldr	r1, [r7, #0]
 8007e2e:	6878      	ldr	r0, [r7, #4]
 8007e30:	f000 fa2c 	bl	800828c <USBD_CtlError>
            err++;
 8007e34:	7afb      	ldrb	r3, [r7, #11]
 8007e36:	3301      	adds	r3, #1
 8007e38:	72fb      	strb	r3, [r7, #11]
          break;
 8007e3a:	e021      	b.n	8007e80 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007e42:	699b      	ldr	r3, [r3, #24]
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d00b      	beq.n	8007e60 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007e4e:	699b      	ldr	r3, [r3, #24]
 8007e50:	687a      	ldr	r2, [r7, #4]
 8007e52:	7c12      	ldrb	r2, [r2, #16]
 8007e54:	f107 0108 	add.w	r1, r7, #8
 8007e58:	4610      	mov	r0, r2
 8007e5a:	4798      	blx	r3
 8007e5c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007e5e:	e00f      	b.n	8007e80 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007e60:	6839      	ldr	r1, [r7, #0]
 8007e62:	6878      	ldr	r0, [r7, #4]
 8007e64:	f000 fa12 	bl	800828c <USBD_CtlError>
            err++;
 8007e68:	7afb      	ldrb	r3, [r7, #11]
 8007e6a:	3301      	adds	r3, #1
 8007e6c:	72fb      	strb	r3, [r7, #11]
          break;
 8007e6e:	e007      	b.n	8007e80 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8007e70:	6839      	ldr	r1, [r7, #0]
 8007e72:	6878      	ldr	r0, [r7, #4]
 8007e74:	f000 fa0a 	bl	800828c <USBD_CtlError>
          err++;
 8007e78:	7afb      	ldrb	r3, [r7, #11]
 8007e7a:	3301      	adds	r3, #1
 8007e7c:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8007e7e:	e038      	b.n	8007ef2 <USBD_GetDescriptor+0x286>
 8007e80:	e037      	b.n	8007ef2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	7c1b      	ldrb	r3, [r3, #16]
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d109      	bne.n	8007e9e <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007e90:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007e92:	f107 0208 	add.w	r2, r7, #8
 8007e96:	4610      	mov	r0, r2
 8007e98:	4798      	blx	r3
 8007e9a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007e9c:	e029      	b.n	8007ef2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007e9e:	6839      	ldr	r1, [r7, #0]
 8007ea0:	6878      	ldr	r0, [r7, #4]
 8007ea2:	f000 f9f3 	bl	800828c <USBD_CtlError>
        err++;
 8007ea6:	7afb      	ldrb	r3, [r7, #11]
 8007ea8:	3301      	adds	r3, #1
 8007eaa:	72fb      	strb	r3, [r7, #11]
      break;
 8007eac:	e021      	b.n	8007ef2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	7c1b      	ldrb	r3, [r3, #16]
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d10d      	bne.n	8007ed2 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007ebc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ebe:	f107 0208 	add.w	r2, r7, #8
 8007ec2:	4610      	mov	r0, r2
 8007ec4:	4798      	blx	r3
 8007ec6:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	3301      	adds	r3, #1
 8007ecc:	2207      	movs	r2, #7
 8007ece:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007ed0:	e00f      	b.n	8007ef2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007ed2:	6839      	ldr	r1, [r7, #0]
 8007ed4:	6878      	ldr	r0, [r7, #4]
 8007ed6:	f000 f9d9 	bl	800828c <USBD_CtlError>
        err++;
 8007eda:	7afb      	ldrb	r3, [r7, #11]
 8007edc:	3301      	adds	r3, #1
 8007ede:	72fb      	strb	r3, [r7, #11]
      break;
 8007ee0:	e007      	b.n	8007ef2 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007ee2:	6839      	ldr	r1, [r7, #0]
 8007ee4:	6878      	ldr	r0, [r7, #4]
 8007ee6:	f000 f9d1 	bl	800828c <USBD_CtlError>
      err++;
 8007eea:	7afb      	ldrb	r3, [r7, #11]
 8007eec:	3301      	adds	r3, #1
 8007eee:	72fb      	strb	r3, [r7, #11]
      break;
 8007ef0:	bf00      	nop
  }

  if (err != 0U)
 8007ef2:	7afb      	ldrb	r3, [r7, #11]
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d11c      	bne.n	8007f32 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8007ef8:	893b      	ldrh	r3, [r7, #8]
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d011      	beq.n	8007f22 <USBD_GetDescriptor+0x2b6>
 8007efe:	683b      	ldr	r3, [r7, #0]
 8007f00:	88db      	ldrh	r3, [r3, #6]
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d00d      	beq.n	8007f22 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8007f06:	683b      	ldr	r3, [r7, #0]
 8007f08:	88da      	ldrh	r2, [r3, #6]
 8007f0a:	893b      	ldrh	r3, [r7, #8]
 8007f0c:	4293      	cmp	r3, r2
 8007f0e:	bf28      	it	cs
 8007f10:	4613      	movcs	r3, r2
 8007f12:	b29b      	uxth	r3, r3
 8007f14:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007f16:	893b      	ldrh	r3, [r7, #8]
 8007f18:	461a      	mov	r2, r3
 8007f1a:	68f9      	ldr	r1, [r7, #12]
 8007f1c:	6878      	ldr	r0, [r7, #4]
 8007f1e:	f000 fa1f 	bl	8008360 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8007f22:	683b      	ldr	r3, [r7, #0]
 8007f24:	88db      	ldrh	r3, [r3, #6]
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d104      	bne.n	8007f34 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8007f2a:	6878      	ldr	r0, [r7, #4]
 8007f2c:	f000 fa76 	bl	800841c <USBD_CtlSendStatus>
 8007f30:	e000      	b.n	8007f34 <USBD_GetDescriptor+0x2c8>
    return;
 8007f32:	bf00      	nop
    }
  }
}
 8007f34:	3710      	adds	r7, #16
 8007f36:	46bd      	mov	sp, r7
 8007f38:	bd80      	pop	{r7, pc}
 8007f3a:	bf00      	nop

08007f3c <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007f3c:	b580      	push	{r7, lr}
 8007f3e:	b084      	sub	sp, #16
 8007f40:	af00      	add	r7, sp, #0
 8007f42:	6078      	str	r0, [r7, #4]
 8007f44:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007f46:	683b      	ldr	r3, [r7, #0]
 8007f48:	889b      	ldrh	r3, [r3, #4]
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d130      	bne.n	8007fb0 <USBD_SetAddress+0x74>
 8007f4e:	683b      	ldr	r3, [r7, #0]
 8007f50:	88db      	ldrh	r3, [r3, #6]
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d12c      	bne.n	8007fb0 <USBD_SetAddress+0x74>
 8007f56:	683b      	ldr	r3, [r7, #0]
 8007f58:	885b      	ldrh	r3, [r3, #2]
 8007f5a:	2b7f      	cmp	r3, #127	@ 0x7f
 8007f5c:	d828      	bhi.n	8007fb0 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007f5e:	683b      	ldr	r3, [r7, #0]
 8007f60:	885b      	ldrh	r3, [r3, #2]
 8007f62:	b2db      	uxtb	r3, r3
 8007f64:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007f68:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007f70:	2b03      	cmp	r3, #3
 8007f72:	d104      	bne.n	8007f7e <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8007f74:	6839      	ldr	r1, [r7, #0]
 8007f76:	6878      	ldr	r0, [r7, #4]
 8007f78:	f000 f988 	bl	800828c <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f7c:	e01d      	b.n	8007fba <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	7bfa      	ldrb	r2, [r7, #15]
 8007f82:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007f86:	7bfb      	ldrb	r3, [r7, #15]
 8007f88:	4619      	mov	r1, r3
 8007f8a:	6878      	ldr	r0, [r7, #4]
 8007f8c:	f000 fe43 	bl	8008c16 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8007f90:	6878      	ldr	r0, [r7, #4]
 8007f92:	f000 fa43 	bl	800841c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007f96:	7bfb      	ldrb	r3, [r7, #15]
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d004      	beq.n	8007fa6 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	2202      	movs	r2, #2
 8007fa0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007fa4:	e009      	b.n	8007fba <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	2201      	movs	r2, #1
 8007faa:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007fae:	e004      	b.n	8007fba <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007fb0:	6839      	ldr	r1, [r7, #0]
 8007fb2:	6878      	ldr	r0, [r7, #4]
 8007fb4:	f000 f96a 	bl	800828c <USBD_CtlError>
  }
}
 8007fb8:	bf00      	nop
 8007fba:	bf00      	nop
 8007fbc:	3710      	adds	r7, #16
 8007fbe:	46bd      	mov	sp, r7
 8007fc0:	bd80      	pop	{r7, pc}
	...

08007fc4 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007fc4:	b580      	push	{r7, lr}
 8007fc6:	b082      	sub	sp, #8
 8007fc8:	af00      	add	r7, sp, #0
 8007fca:	6078      	str	r0, [r7, #4]
 8007fcc:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007fce:	683b      	ldr	r3, [r7, #0]
 8007fd0:	885b      	ldrh	r3, [r3, #2]
 8007fd2:	b2da      	uxtb	r2, r3
 8007fd4:	4b41      	ldr	r3, [pc, #260]	@ (80080dc <USBD_SetConfig+0x118>)
 8007fd6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007fd8:	4b40      	ldr	r3, [pc, #256]	@ (80080dc <USBD_SetConfig+0x118>)
 8007fda:	781b      	ldrb	r3, [r3, #0]
 8007fdc:	2b01      	cmp	r3, #1
 8007fde:	d904      	bls.n	8007fea <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8007fe0:	6839      	ldr	r1, [r7, #0]
 8007fe2:	6878      	ldr	r0, [r7, #4]
 8007fe4:	f000 f952 	bl	800828c <USBD_CtlError>
 8007fe8:	e075      	b.n	80080d6 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007ff0:	2b02      	cmp	r3, #2
 8007ff2:	d002      	beq.n	8007ffa <USBD_SetConfig+0x36>
 8007ff4:	2b03      	cmp	r3, #3
 8007ff6:	d023      	beq.n	8008040 <USBD_SetConfig+0x7c>
 8007ff8:	e062      	b.n	80080c0 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8007ffa:	4b38      	ldr	r3, [pc, #224]	@ (80080dc <USBD_SetConfig+0x118>)
 8007ffc:	781b      	ldrb	r3, [r3, #0]
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d01a      	beq.n	8008038 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8008002:	4b36      	ldr	r3, [pc, #216]	@ (80080dc <USBD_SetConfig+0x118>)
 8008004:	781b      	ldrb	r3, [r3, #0]
 8008006:	461a      	mov	r2, r3
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	2203      	movs	r2, #3
 8008010:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008014:	4b31      	ldr	r3, [pc, #196]	@ (80080dc <USBD_SetConfig+0x118>)
 8008016:	781b      	ldrb	r3, [r3, #0]
 8008018:	4619      	mov	r1, r3
 800801a:	6878      	ldr	r0, [r7, #4]
 800801c:	f7ff f9e7 	bl	80073ee <USBD_SetClassConfig>
 8008020:	4603      	mov	r3, r0
 8008022:	2b02      	cmp	r3, #2
 8008024:	d104      	bne.n	8008030 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8008026:	6839      	ldr	r1, [r7, #0]
 8008028:	6878      	ldr	r0, [r7, #4]
 800802a:	f000 f92f 	bl	800828c <USBD_CtlError>
            return;
 800802e:	e052      	b.n	80080d6 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8008030:	6878      	ldr	r0, [r7, #4]
 8008032:	f000 f9f3 	bl	800841c <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8008036:	e04e      	b.n	80080d6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008038:	6878      	ldr	r0, [r7, #4]
 800803a:	f000 f9ef 	bl	800841c <USBD_CtlSendStatus>
        break;
 800803e:	e04a      	b.n	80080d6 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8008040:	4b26      	ldr	r3, [pc, #152]	@ (80080dc <USBD_SetConfig+0x118>)
 8008042:	781b      	ldrb	r3, [r3, #0]
 8008044:	2b00      	cmp	r3, #0
 8008046:	d112      	bne.n	800806e <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	2202      	movs	r2, #2
 800804c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          pdev->dev_config = cfgidx;
 8008050:	4b22      	ldr	r3, [pc, #136]	@ (80080dc <USBD_SetConfig+0x118>)
 8008052:	781b      	ldrb	r3, [r3, #0]
 8008054:	461a      	mov	r2, r3
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800805a:	4b20      	ldr	r3, [pc, #128]	@ (80080dc <USBD_SetConfig+0x118>)
 800805c:	781b      	ldrb	r3, [r3, #0]
 800805e:	4619      	mov	r1, r3
 8008060:	6878      	ldr	r0, [r7, #4]
 8008062:	f7ff f9e3 	bl	800742c <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8008066:	6878      	ldr	r0, [r7, #4]
 8008068:	f000 f9d8 	bl	800841c <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800806c:	e033      	b.n	80080d6 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800806e:	4b1b      	ldr	r3, [pc, #108]	@ (80080dc <USBD_SetConfig+0x118>)
 8008070:	781b      	ldrb	r3, [r3, #0]
 8008072:	461a      	mov	r2, r3
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	685b      	ldr	r3, [r3, #4]
 8008078:	429a      	cmp	r2, r3
 800807a:	d01d      	beq.n	80080b8 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	685b      	ldr	r3, [r3, #4]
 8008080:	b2db      	uxtb	r3, r3
 8008082:	4619      	mov	r1, r3
 8008084:	6878      	ldr	r0, [r7, #4]
 8008086:	f7ff f9d1 	bl	800742c <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800808a:	4b14      	ldr	r3, [pc, #80]	@ (80080dc <USBD_SetConfig+0x118>)
 800808c:	781b      	ldrb	r3, [r3, #0]
 800808e:	461a      	mov	r2, r3
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008094:	4b11      	ldr	r3, [pc, #68]	@ (80080dc <USBD_SetConfig+0x118>)
 8008096:	781b      	ldrb	r3, [r3, #0]
 8008098:	4619      	mov	r1, r3
 800809a:	6878      	ldr	r0, [r7, #4]
 800809c:	f7ff f9a7 	bl	80073ee <USBD_SetClassConfig>
 80080a0:	4603      	mov	r3, r0
 80080a2:	2b02      	cmp	r3, #2
 80080a4:	d104      	bne.n	80080b0 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 80080a6:	6839      	ldr	r1, [r7, #0]
 80080a8:	6878      	ldr	r0, [r7, #4]
 80080aa:	f000 f8ef 	bl	800828c <USBD_CtlError>
            return;
 80080ae:	e012      	b.n	80080d6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80080b0:	6878      	ldr	r0, [r7, #4]
 80080b2:	f000 f9b3 	bl	800841c <USBD_CtlSendStatus>
        break;
 80080b6:	e00e      	b.n	80080d6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80080b8:	6878      	ldr	r0, [r7, #4]
 80080ba:	f000 f9af 	bl	800841c <USBD_CtlSendStatus>
        break;
 80080be:	e00a      	b.n	80080d6 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 80080c0:	6839      	ldr	r1, [r7, #0]
 80080c2:	6878      	ldr	r0, [r7, #4]
 80080c4:	f000 f8e2 	bl	800828c <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 80080c8:	4b04      	ldr	r3, [pc, #16]	@ (80080dc <USBD_SetConfig+0x118>)
 80080ca:	781b      	ldrb	r3, [r3, #0]
 80080cc:	4619      	mov	r1, r3
 80080ce:	6878      	ldr	r0, [r7, #4]
 80080d0:	f7ff f9ac 	bl	800742c <USBD_ClrClassConfig>
        break;
 80080d4:	bf00      	nop
    }
  }
}
 80080d6:	3708      	adds	r7, #8
 80080d8:	46bd      	mov	sp, r7
 80080da:	bd80      	pop	{r7, pc}
 80080dc:	20000258 	.word	0x20000258

080080e0 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80080e0:	b580      	push	{r7, lr}
 80080e2:	b082      	sub	sp, #8
 80080e4:	af00      	add	r7, sp, #0
 80080e6:	6078      	str	r0, [r7, #4]
 80080e8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80080ea:	683b      	ldr	r3, [r7, #0]
 80080ec:	88db      	ldrh	r3, [r3, #6]
 80080ee:	2b01      	cmp	r3, #1
 80080f0:	d004      	beq.n	80080fc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80080f2:	6839      	ldr	r1, [r7, #0]
 80080f4:	6878      	ldr	r0, [r7, #4]
 80080f6:	f000 f8c9 	bl	800828c <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80080fa:	e022      	b.n	8008142 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008102:	2b02      	cmp	r3, #2
 8008104:	dc02      	bgt.n	800810c <USBD_GetConfig+0x2c>
 8008106:	2b00      	cmp	r3, #0
 8008108:	dc03      	bgt.n	8008112 <USBD_GetConfig+0x32>
 800810a:	e015      	b.n	8008138 <USBD_GetConfig+0x58>
 800810c:	2b03      	cmp	r3, #3
 800810e:	d00b      	beq.n	8008128 <USBD_GetConfig+0x48>
 8008110:	e012      	b.n	8008138 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	2200      	movs	r2, #0
 8008116:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	3308      	adds	r3, #8
 800811c:	2201      	movs	r2, #1
 800811e:	4619      	mov	r1, r3
 8008120:	6878      	ldr	r0, [r7, #4]
 8008122:	f000 f91d 	bl	8008360 <USBD_CtlSendData>
        break;
 8008126:	e00c      	b.n	8008142 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	3304      	adds	r3, #4
 800812c:	2201      	movs	r2, #1
 800812e:	4619      	mov	r1, r3
 8008130:	6878      	ldr	r0, [r7, #4]
 8008132:	f000 f915 	bl	8008360 <USBD_CtlSendData>
        break;
 8008136:	e004      	b.n	8008142 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8008138:	6839      	ldr	r1, [r7, #0]
 800813a:	6878      	ldr	r0, [r7, #4]
 800813c:	f000 f8a6 	bl	800828c <USBD_CtlError>
        break;
 8008140:	bf00      	nop
}
 8008142:	bf00      	nop
 8008144:	3708      	adds	r7, #8
 8008146:	46bd      	mov	sp, r7
 8008148:	bd80      	pop	{r7, pc}

0800814a <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800814a:	b580      	push	{r7, lr}
 800814c:	b082      	sub	sp, #8
 800814e:	af00      	add	r7, sp, #0
 8008150:	6078      	str	r0, [r7, #4]
 8008152:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800815a:	3b01      	subs	r3, #1
 800815c:	2b02      	cmp	r3, #2
 800815e:	d81e      	bhi.n	800819e <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008160:	683b      	ldr	r3, [r7, #0]
 8008162:	88db      	ldrh	r3, [r3, #6]
 8008164:	2b02      	cmp	r3, #2
 8008166:	d004      	beq.n	8008172 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8008168:	6839      	ldr	r1, [r7, #0]
 800816a:	6878      	ldr	r0, [r7, #4]
 800816c:	f000 f88e 	bl	800828c <USBD_CtlError>
        break;
 8008170:	e01a      	b.n	80081a8 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	2201      	movs	r2, #1
 8008176:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800817e:	2b00      	cmp	r3, #0
 8008180:	d005      	beq.n	800818e <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	68db      	ldr	r3, [r3, #12]
 8008186:	f043 0202 	orr.w	r2, r3, #2
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	330c      	adds	r3, #12
 8008192:	2202      	movs	r2, #2
 8008194:	4619      	mov	r1, r3
 8008196:	6878      	ldr	r0, [r7, #4]
 8008198:	f000 f8e2 	bl	8008360 <USBD_CtlSendData>
      break;
 800819c:	e004      	b.n	80081a8 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800819e:	6839      	ldr	r1, [r7, #0]
 80081a0:	6878      	ldr	r0, [r7, #4]
 80081a2:	f000 f873 	bl	800828c <USBD_CtlError>
      break;
 80081a6:	bf00      	nop
  }
}
 80081a8:	bf00      	nop
 80081aa:	3708      	adds	r7, #8
 80081ac:	46bd      	mov	sp, r7
 80081ae:	bd80      	pop	{r7, pc}

080081b0 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80081b0:	b580      	push	{r7, lr}
 80081b2:	b082      	sub	sp, #8
 80081b4:	af00      	add	r7, sp, #0
 80081b6:	6078      	str	r0, [r7, #4]
 80081b8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80081ba:	683b      	ldr	r3, [r7, #0]
 80081bc:	885b      	ldrh	r3, [r3, #2]
 80081be:	2b01      	cmp	r3, #1
 80081c0:	d106      	bne.n	80081d0 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	2201      	movs	r2, #1
 80081c6:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    USBD_CtlSendStatus(pdev);
 80081ca:	6878      	ldr	r0, [r7, #4]
 80081cc:	f000 f926 	bl	800841c <USBD_CtlSendStatus>
  }
}
 80081d0:	bf00      	nop
 80081d2:	3708      	adds	r7, #8
 80081d4:	46bd      	mov	sp, r7
 80081d6:	bd80      	pop	{r7, pc}

080081d8 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80081d8:	b580      	push	{r7, lr}
 80081da:	b082      	sub	sp, #8
 80081dc:	af00      	add	r7, sp, #0
 80081de:	6078      	str	r0, [r7, #4]
 80081e0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80081e8:	3b01      	subs	r3, #1
 80081ea:	2b02      	cmp	r3, #2
 80081ec:	d80b      	bhi.n	8008206 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80081ee:	683b      	ldr	r3, [r7, #0]
 80081f0:	885b      	ldrh	r3, [r3, #2]
 80081f2:	2b01      	cmp	r3, #1
 80081f4:	d10c      	bne.n	8008210 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	2200      	movs	r2, #0
 80081fa:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        USBD_CtlSendStatus(pdev);
 80081fe:	6878      	ldr	r0, [r7, #4]
 8008200:	f000 f90c 	bl	800841c <USBD_CtlSendStatus>
      }
      break;
 8008204:	e004      	b.n	8008210 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8008206:	6839      	ldr	r1, [r7, #0]
 8008208:	6878      	ldr	r0, [r7, #4]
 800820a:	f000 f83f 	bl	800828c <USBD_CtlError>
      break;
 800820e:	e000      	b.n	8008212 <USBD_ClrFeature+0x3a>
      break;
 8008210:	bf00      	nop
  }
}
 8008212:	bf00      	nop
 8008214:	3708      	adds	r7, #8
 8008216:	46bd      	mov	sp, r7
 8008218:	bd80      	pop	{r7, pc}

0800821a <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800821a:	b480      	push	{r7}
 800821c:	b083      	sub	sp, #12
 800821e:	af00      	add	r7, sp, #0
 8008220:	6078      	str	r0, [r7, #4]
 8008222:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8008224:	683b      	ldr	r3, [r7, #0]
 8008226:	781a      	ldrb	r2, [r3, #0]
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800822c:	683b      	ldr	r3, [r7, #0]
 800822e:	785a      	ldrb	r2, [r3, #1]
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8008234:	683b      	ldr	r3, [r7, #0]
 8008236:	3302      	adds	r3, #2
 8008238:	781b      	ldrb	r3, [r3, #0]
 800823a:	461a      	mov	r2, r3
 800823c:	683b      	ldr	r3, [r7, #0]
 800823e:	3303      	adds	r3, #3
 8008240:	781b      	ldrb	r3, [r3, #0]
 8008242:	021b      	lsls	r3, r3, #8
 8008244:	b29b      	uxth	r3, r3
 8008246:	4413      	add	r3, r2
 8008248:	b29a      	uxth	r2, r3
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800824e:	683b      	ldr	r3, [r7, #0]
 8008250:	3304      	adds	r3, #4
 8008252:	781b      	ldrb	r3, [r3, #0]
 8008254:	461a      	mov	r2, r3
 8008256:	683b      	ldr	r3, [r7, #0]
 8008258:	3305      	adds	r3, #5
 800825a:	781b      	ldrb	r3, [r3, #0]
 800825c:	021b      	lsls	r3, r3, #8
 800825e:	b29b      	uxth	r3, r3
 8008260:	4413      	add	r3, r2
 8008262:	b29a      	uxth	r2, r3
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8008268:	683b      	ldr	r3, [r7, #0]
 800826a:	3306      	adds	r3, #6
 800826c:	781b      	ldrb	r3, [r3, #0]
 800826e:	461a      	mov	r2, r3
 8008270:	683b      	ldr	r3, [r7, #0]
 8008272:	3307      	adds	r3, #7
 8008274:	781b      	ldrb	r3, [r3, #0]
 8008276:	021b      	lsls	r3, r3, #8
 8008278:	b29b      	uxth	r3, r3
 800827a:	4413      	add	r3, r2
 800827c:	b29a      	uxth	r2, r3
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	80da      	strh	r2, [r3, #6]

}
 8008282:	bf00      	nop
 8008284:	370c      	adds	r7, #12
 8008286:	46bd      	mov	sp, r7
 8008288:	bc80      	pop	{r7}
 800828a:	4770      	bx	lr

0800828c <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800828c:	b580      	push	{r7, lr}
 800828e:	b082      	sub	sp, #8
 8008290:	af00      	add	r7, sp, #0
 8008292:	6078      	str	r0, [r7, #4]
 8008294:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8008296:	2180      	movs	r1, #128	@ 0x80
 8008298:	6878      	ldr	r0, [r7, #4]
 800829a:	f000 fc53 	bl	8008b44 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800829e:	2100      	movs	r1, #0
 80082a0:	6878      	ldr	r0, [r7, #4]
 80082a2:	f000 fc4f 	bl	8008b44 <USBD_LL_StallEP>
}
 80082a6:	bf00      	nop
 80082a8:	3708      	adds	r7, #8
 80082aa:	46bd      	mov	sp, r7
 80082ac:	bd80      	pop	{r7, pc}

080082ae <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80082ae:	b580      	push	{r7, lr}
 80082b0:	b086      	sub	sp, #24
 80082b2:	af00      	add	r7, sp, #0
 80082b4:	60f8      	str	r0, [r7, #12]
 80082b6:	60b9      	str	r1, [r7, #8]
 80082b8:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80082ba:	2300      	movs	r3, #0
 80082bc:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d032      	beq.n	800832a <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 80082c4:	68f8      	ldr	r0, [r7, #12]
 80082c6:	f000 f834 	bl	8008332 <USBD_GetLen>
 80082ca:	4603      	mov	r3, r0
 80082cc:	3301      	adds	r3, #1
 80082ce:	b29b      	uxth	r3, r3
 80082d0:	005b      	lsls	r3, r3, #1
 80082d2:	b29a      	uxth	r2, r3
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 80082d8:	7dfb      	ldrb	r3, [r7, #23]
 80082da:	1c5a      	adds	r2, r3, #1
 80082dc:	75fa      	strb	r2, [r7, #23]
 80082de:	461a      	mov	r2, r3
 80082e0:	68bb      	ldr	r3, [r7, #8]
 80082e2:	4413      	add	r3, r2
 80082e4:	687a      	ldr	r2, [r7, #4]
 80082e6:	7812      	ldrb	r2, [r2, #0]
 80082e8:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 80082ea:	7dfb      	ldrb	r3, [r7, #23]
 80082ec:	1c5a      	adds	r2, r3, #1
 80082ee:	75fa      	strb	r2, [r7, #23]
 80082f0:	461a      	mov	r2, r3
 80082f2:	68bb      	ldr	r3, [r7, #8]
 80082f4:	4413      	add	r3, r2
 80082f6:	2203      	movs	r2, #3
 80082f8:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 80082fa:	e012      	b.n	8008322 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	1c5a      	adds	r2, r3, #1
 8008300:	60fa      	str	r2, [r7, #12]
 8008302:	7dfa      	ldrb	r2, [r7, #23]
 8008304:	1c51      	adds	r1, r2, #1
 8008306:	75f9      	strb	r1, [r7, #23]
 8008308:	4611      	mov	r1, r2
 800830a:	68ba      	ldr	r2, [r7, #8]
 800830c:	440a      	add	r2, r1
 800830e:	781b      	ldrb	r3, [r3, #0]
 8008310:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8008312:	7dfb      	ldrb	r3, [r7, #23]
 8008314:	1c5a      	adds	r2, r3, #1
 8008316:	75fa      	strb	r2, [r7, #23]
 8008318:	461a      	mov	r2, r3
 800831a:	68bb      	ldr	r3, [r7, #8]
 800831c:	4413      	add	r3, r2
 800831e:	2200      	movs	r2, #0
 8008320:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	781b      	ldrb	r3, [r3, #0]
 8008326:	2b00      	cmp	r3, #0
 8008328:	d1e8      	bne.n	80082fc <USBD_GetString+0x4e>
    }
  }
}
 800832a:	bf00      	nop
 800832c:	3718      	adds	r7, #24
 800832e:	46bd      	mov	sp, r7
 8008330:	bd80      	pop	{r7, pc}

08008332 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008332:	b480      	push	{r7}
 8008334:	b085      	sub	sp, #20
 8008336:	af00      	add	r7, sp, #0
 8008338:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800833a:	2300      	movs	r3, #0
 800833c:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800833e:	e005      	b.n	800834c <USBD_GetLen+0x1a>
  {
    len++;
 8008340:	7bfb      	ldrb	r3, [r7, #15]
 8008342:	3301      	adds	r3, #1
 8008344:	73fb      	strb	r3, [r7, #15]
    buf++;
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	3301      	adds	r3, #1
 800834a:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	781b      	ldrb	r3, [r3, #0]
 8008350:	2b00      	cmp	r3, #0
 8008352:	d1f5      	bne.n	8008340 <USBD_GetLen+0xe>
  }

  return len;
 8008354:	7bfb      	ldrb	r3, [r7, #15]
}
 8008356:	4618      	mov	r0, r3
 8008358:	3714      	adds	r7, #20
 800835a:	46bd      	mov	sp, r7
 800835c:	bc80      	pop	{r7}
 800835e:	4770      	bx	lr

08008360 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8008360:	b580      	push	{r7, lr}
 8008362:	b084      	sub	sp, #16
 8008364:	af00      	add	r7, sp, #0
 8008366:	60f8      	str	r0, [r7, #12]
 8008368:	60b9      	str	r1, [r7, #8]
 800836a:	4613      	mov	r3, r2
 800836c:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	2202      	movs	r2, #2
 8008372:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8008376:	88fa      	ldrh	r2, [r7, #6]
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800837c:	88fa      	ldrh	r2, [r7, #6]
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008382:	88fb      	ldrh	r3, [r7, #6]
 8008384:	68ba      	ldr	r2, [r7, #8]
 8008386:	2100      	movs	r1, #0
 8008388:	68f8      	ldr	r0, [r7, #12]
 800838a:	f000 fc63 	bl	8008c54 <USBD_LL_Transmit>

  return USBD_OK;
 800838e:	2300      	movs	r3, #0
}
 8008390:	4618      	mov	r0, r3
 8008392:	3710      	adds	r7, #16
 8008394:	46bd      	mov	sp, r7
 8008396:	bd80      	pop	{r7, pc}

08008398 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8008398:	b580      	push	{r7, lr}
 800839a:	b084      	sub	sp, #16
 800839c:	af00      	add	r7, sp, #0
 800839e:	60f8      	str	r0, [r7, #12]
 80083a0:	60b9      	str	r1, [r7, #8]
 80083a2:	4613      	mov	r3, r2
 80083a4:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80083a6:	88fb      	ldrh	r3, [r7, #6]
 80083a8:	68ba      	ldr	r2, [r7, #8]
 80083aa:	2100      	movs	r1, #0
 80083ac:	68f8      	ldr	r0, [r7, #12]
 80083ae:	f000 fc51 	bl	8008c54 <USBD_LL_Transmit>

  return USBD_OK;
 80083b2:	2300      	movs	r3, #0
}
 80083b4:	4618      	mov	r0, r3
 80083b6:	3710      	adds	r7, #16
 80083b8:	46bd      	mov	sp, r7
 80083ba:	bd80      	pop	{r7, pc}

080083bc <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 80083bc:	b580      	push	{r7, lr}
 80083be:	b084      	sub	sp, #16
 80083c0:	af00      	add	r7, sp, #0
 80083c2:	60f8      	str	r0, [r7, #12]
 80083c4:	60b9      	str	r1, [r7, #8]
 80083c6:	4613      	mov	r3, r2
 80083c8:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	2203      	movs	r2, #3
 80083ce:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 80083d2:	88fa      	ldrh	r2, [r7, #6]
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
  pdev->ep_out[0].rem_length   = len;
 80083da:	88fa      	ldrh	r2, [r7, #6]
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80083e2:	88fb      	ldrh	r3, [r7, #6]
 80083e4:	68ba      	ldr	r2, [r7, #8]
 80083e6:	2100      	movs	r1, #0
 80083e8:	68f8      	ldr	r0, [r7, #12]
 80083ea:	f000 fc56 	bl	8008c9a <USBD_LL_PrepareReceive>

  return USBD_OK;
 80083ee:	2300      	movs	r3, #0
}
 80083f0:	4618      	mov	r0, r3
 80083f2:	3710      	adds	r7, #16
 80083f4:	46bd      	mov	sp, r7
 80083f6:	bd80      	pop	{r7, pc}

080083f8 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 80083f8:	b580      	push	{r7, lr}
 80083fa:	b084      	sub	sp, #16
 80083fc:	af00      	add	r7, sp, #0
 80083fe:	60f8      	str	r0, [r7, #12]
 8008400:	60b9      	str	r1, [r7, #8]
 8008402:	4613      	mov	r3, r2
 8008404:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008406:	88fb      	ldrh	r3, [r7, #6]
 8008408:	68ba      	ldr	r2, [r7, #8]
 800840a:	2100      	movs	r1, #0
 800840c:	68f8      	ldr	r0, [r7, #12]
 800840e:	f000 fc44 	bl	8008c9a <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008412:	2300      	movs	r3, #0
}
 8008414:	4618      	mov	r0, r3
 8008416:	3710      	adds	r7, #16
 8008418:	46bd      	mov	sp, r7
 800841a:	bd80      	pop	{r7, pc}

0800841c <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800841c:	b580      	push	{r7, lr}
 800841e:	b082      	sub	sp, #8
 8008420:	af00      	add	r7, sp, #0
 8008422:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	2204      	movs	r2, #4
 8008428:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800842c:	2300      	movs	r3, #0
 800842e:	2200      	movs	r2, #0
 8008430:	2100      	movs	r1, #0
 8008432:	6878      	ldr	r0, [r7, #4]
 8008434:	f000 fc0e 	bl	8008c54 <USBD_LL_Transmit>

  return USBD_OK;
 8008438:	2300      	movs	r3, #0
}
 800843a:	4618      	mov	r0, r3
 800843c:	3708      	adds	r7, #8
 800843e:	46bd      	mov	sp, r7
 8008440:	bd80      	pop	{r7, pc}

08008442 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008442:	b580      	push	{r7, lr}
 8008444:	b082      	sub	sp, #8
 8008446:	af00      	add	r7, sp, #0
 8008448:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	2205      	movs	r2, #5
 800844e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008452:	2300      	movs	r3, #0
 8008454:	2200      	movs	r2, #0
 8008456:	2100      	movs	r1, #0
 8008458:	6878      	ldr	r0, [r7, #4]
 800845a:	f000 fc1e 	bl	8008c9a <USBD_LL_PrepareReceive>

  return USBD_OK;
 800845e:	2300      	movs	r3, #0
}
 8008460:	4618      	mov	r0, r3
 8008462:	3708      	adds	r7, #8
 8008464:	46bd      	mov	sp, r7
 8008466:	bd80      	pop	{r7, pc}

08008468 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008468:	b580      	push	{r7, lr}
 800846a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800846c:	2200      	movs	r2, #0
 800846e:	4912      	ldr	r1, [pc, #72]	@ (80084b8 <MX_USB_DEVICE_Init+0x50>)
 8008470:	4812      	ldr	r0, [pc, #72]	@ (80084bc <MX_USB_DEVICE_Init+0x54>)
 8008472:	f7fe ff62 	bl	800733a <USBD_Init>
 8008476:	4603      	mov	r3, r0
 8008478:	2b00      	cmp	r3, #0
 800847a:	d001      	beq.n	8008480 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800847c:	f7f8 fe78 	bl	8001170 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008480:	490f      	ldr	r1, [pc, #60]	@ (80084c0 <MX_USB_DEVICE_Init+0x58>)
 8008482:	480e      	ldr	r0, [pc, #56]	@ (80084bc <MX_USB_DEVICE_Init+0x54>)
 8008484:	f7fe ff84 	bl	8007390 <USBD_RegisterClass>
 8008488:	4603      	mov	r3, r0
 800848a:	2b00      	cmp	r3, #0
 800848c:	d001      	beq.n	8008492 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800848e:	f7f8 fe6f 	bl	8001170 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8008492:	490c      	ldr	r1, [pc, #48]	@ (80084c4 <MX_USB_DEVICE_Init+0x5c>)
 8008494:	4809      	ldr	r0, [pc, #36]	@ (80084bc <MX_USB_DEVICE_Init+0x54>)
 8008496:	f7fe feb5 	bl	8007204 <USBD_CDC_RegisterInterface>
 800849a:	4603      	mov	r3, r0
 800849c:	2b00      	cmp	r3, #0
 800849e:	d001      	beq.n	80084a4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80084a0:	f7f8 fe66 	bl	8001170 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80084a4:	4805      	ldr	r0, [pc, #20]	@ (80084bc <MX_USB_DEVICE_Init+0x54>)
 80084a6:	f7fe ff8c 	bl	80073c2 <USBD_Start>
 80084aa:	4603      	mov	r3, r0
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d001      	beq.n	80084b4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80084b0:	f7f8 fe5e 	bl	8001170 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80084b4:	bf00      	nop
 80084b6:	bd80      	pop	{r7, pc}
 80084b8:	2000012c 	.word	0x2000012c
 80084bc:	2000025c 	.word	0x2000025c
 80084c0:	20000018 	.word	0x20000018
 80084c4:	2000011c 	.word	0x2000011c

080084c8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80084c8:	b580      	push	{r7, lr}
 80084ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80084cc:	2200      	movs	r2, #0
 80084ce:	4905      	ldr	r1, [pc, #20]	@ (80084e4 <CDC_Init_FS+0x1c>)
 80084d0:	4805      	ldr	r0, [pc, #20]	@ (80084e8 <CDC_Init_FS+0x20>)
 80084d2:	f7fe fead 	bl	8007230 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80084d6:	4905      	ldr	r1, [pc, #20]	@ (80084ec <CDC_Init_FS+0x24>)
 80084d8:	4803      	ldr	r0, [pc, #12]	@ (80084e8 <CDC_Init_FS+0x20>)
 80084da:	f7fe fec2 	bl	8007262 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80084de:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80084e0:	4618      	mov	r0, r3
 80084e2:	bd80      	pop	{r7, pc}
 80084e4:	20000920 	.word	0x20000920
 80084e8:	2000025c 	.word	0x2000025c
 80084ec:	20000520 	.word	0x20000520

080084f0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80084f0:	b480      	push	{r7}
 80084f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80084f4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80084f6:	4618      	mov	r0, r3
 80084f8:	46bd      	mov	sp, r7
 80084fa:	bc80      	pop	{r7}
 80084fc:	4770      	bx	lr
	...

08008500 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008500:	b480      	push	{r7}
 8008502:	b083      	sub	sp, #12
 8008504:	af00      	add	r7, sp, #0
 8008506:	4603      	mov	r3, r0
 8008508:	6039      	str	r1, [r7, #0]
 800850a:	71fb      	strb	r3, [r7, #7]
 800850c:	4613      	mov	r3, r2
 800850e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008510:	79fb      	ldrb	r3, [r7, #7]
 8008512:	2b23      	cmp	r3, #35	@ 0x23
 8008514:	d84a      	bhi.n	80085ac <CDC_Control_FS+0xac>
 8008516:	a201      	add	r2, pc, #4	@ (adr r2, 800851c <CDC_Control_FS+0x1c>)
 8008518:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800851c:	080085ad 	.word	0x080085ad
 8008520:	080085ad 	.word	0x080085ad
 8008524:	080085ad 	.word	0x080085ad
 8008528:	080085ad 	.word	0x080085ad
 800852c:	080085ad 	.word	0x080085ad
 8008530:	080085ad 	.word	0x080085ad
 8008534:	080085ad 	.word	0x080085ad
 8008538:	080085ad 	.word	0x080085ad
 800853c:	080085ad 	.word	0x080085ad
 8008540:	080085ad 	.word	0x080085ad
 8008544:	080085ad 	.word	0x080085ad
 8008548:	080085ad 	.word	0x080085ad
 800854c:	080085ad 	.word	0x080085ad
 8008550:	080085ad 	.word	0x080085ad
 8008554:	080085ad 	.word	0x080085ad
 8008558:	080085ad 	.word	0x080085ad
 800855c:	080085ad 	.word	0x080085ad
 8008560:	080085ad 	.word	0x080085ad
 8008564:	080085ad 	.word	0x080085ad
 8008568:	080085ad 	.word	0x080085ad
 800856c:	080085ad 	.word	0x080085ad
 8008570:	080085ad 	.word	0x080085ad
 8008574:	080085ad 	.word	0x080085ad
 8008578:	080085ad 	.word	0x080085ad
 800857c:	080085ad 	.word	0x080085ad
 8008580:	080085ad 	.word	0x080085ad
 8008584:	080085ad 	.word	0x080085ad
 8008588:	080085ad 	.word	0x080085ad
 800858c:	080085ad 	.word	0x080085ad
 8008590:	080085ad 	.word	0x080085ad
 8008594:	080085ad 	.word	0x080085ad
 8008598:	080085ad 	.word	0x080085ad
 800859c:	080085ad 	.word	0x080085ad
 80085a0:	080085ad 	.word	0x080085ad
 80085a4:	080085ad 	.word	0x080085ad
 80085a8:	080085ad 	.word	0x080085ad
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80085ac:	bf00      	nop
  }

  return (USBD_OK);
 80085ae:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80085b0:	4618      	mov	r0, r3
 80085b2:	370c      	adds	r7, #12
 80085b4:	46bd      	mov	sp, r7
 80085b6:	bc80      	pop	{r7}
 80085b8:	4770      	bx	lr
 80085ba:	bf00      	nop

080085bc <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80085bc:	b580      	push	{r7, lr}
 80085be:	b082      	sub	sp, #8
 80085c0:	af00      	add	r7, sp, #0
 80085c2:	6078      	str	r0, [r7, #4]
 80085c4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80085c6:	6879      	ldr	r1, [r7, #4]
 80085c8:	4805      	ldr	r0, [pc, #20]	@ (80085e0 <CDC_Receive_FS+0x24>)
 80085ca:	f7fe fe4a 	bl	8007262 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80085ce:	4804      	ldr	r0, [pc, #16]	@ (80085e0 <CDC_Receive_FS+0x24>)
 80085d0:	f7fe fe89 	bl	80072e6 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80085d4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80085d6:	4618      	mov	r0, r3
 80085d8:	3708      	adds	r7, #8
 80085da:	46bd      	mov	sp, r7
 80085dc:	bd80      	pop	{r7, pc}
 80085de:	bf00      	nop
 80085e0:	2000025c 	.word	0x2000025c

080085e4 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80085e4:	b580      	push	{r7, lr}
 80085e6:	b084      	sub	sp, #16
 80085e8:	af00      	add	r7, sp, #0
 80085ea:	6078      	str	r0, [r7, #4]
 80085ec:	460b      	mov	r3, r1
 80085ee:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80085f0:	2300      	movs	r3, #0
 80085f2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80085f4:	4b0d      	ldr	r3, [pc, #52]	@ (800862c <CDC_Transmit_FS+0x48>)
 80085f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80085fa:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80085fc:	68bb      	ldr	r3, [r7, #8]
 80085fe:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8008602:	2b00      	cmp	r3, #0
 8008604:	d001      	beq.n	800860a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8008606:	2301      	movs	r3, #1
 8008608:	e00b      	b.n	8008622 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800860a:	887b      	ldrh	r3, [r7, #2]
 800860c:	461a      	mov	r2, r3
 800860e:	6879      	ldr	r1, [r7, #4]
 8008610:	4806      	ldr	r0, [pc, #24]	@ (800862c <CDC_Transmit_FS+0x48>)
 8008612:	f7fe fe0d 	bl	8007230 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8008616:	4805      	ldr	r0, [pc, #20]	@ (800862c <CDC_Transmit_FS+0x48>)
 8008618:	f7fe fe36 	bl	8007288 <USBD_CDC_TransmitPacket>
 800861c:	4603      	mov	r3, r0
 800861e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8008620:	7bfb      	ldrb	r3, [r7, #15]
}
 8008622:	4618      	mov	r0, r3
 8008624:	3710      	adds	r7, #16
 8008626:	46bd      	mov	sp, r7
 8008628:	bd80      	pop	{r7, pc}
 800862a:	bf00      	nop
 800862c:	2000025c 	.word	0x2000025c

08008630 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008630:	b480      	push	{r7}
 8008632:	b083      	sub	sp, #12
 8008634:	af00      	add	r7, sp, #0
 8008636:	4603      	mov	r3, r0
 8008638:	6039      	str	r1, [r7, #0]
 800863a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800863c:	683b      	ldr	r3, [r7, #0]
 800863e:	2212      	movs	r2, #18
 8008640:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008642:	4b03      	ldr	r3, [pc, #12]	@ (8008650 <USBD_FS_DeviceDescriptor+0x20>)
}
 8008644:	4618      	mov	r0, r3
 8008646:	370c      	adds	r7, #12
 8008648:	46bd      	mov	sp, r7
 800864a:	bc80      	pop	{r7}
 800864c:	4770      	bx	lr
 800864e:	bf00      	nop
 8008650:	20000148 	.word	0x20000148

08008654 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008654:	b480      	push	{r7}
 8008656:	b083      	sub	sp, #12
 8008658:	af00      	add	r7, sp, #0
 800865a:	4603      	mov	r3, r0
 800865c:	6039      	str	r1, [r7, #0]
 800865e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008660:	683b      	ldr	r3, [r7, #0]
 8008662:	2204      	movs	r2, #4
 8008664:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008666:	4b03      	ldr	r3, [pc, #12]	@ (8008674 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008668:	4618      	mov	r0, r3
 800866a:	370c      	adds	r7, #12
 800866c:	46bd      	mov	sp, r7
 800866e:	bc80      	pop	{r7}
 8008670:	4770      	bx	lr
 8008672:	bf00      	nop
 8008674:	2000015c 	.word	0x2000015c

08008678 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008678:	b580      	push	{r7, lr}
 800867a:	b082      	sub	sp, #8
 800867c:	af00      	add	r7, sp, #0
 800867e:	4603      	mov	r3, r0
 8008680:	6039      	str	r1, [r7, #0]
 8008682:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008684:	79fb      	ldrb	r3, [r7, #7]
 8008686:	2b00      	cmp	r3, #0
 8008688:	d105      	bne.n	8008696 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800868a:	683a      	ldr	r2, [r7, #0]
 800868c:	4907      	ldr	r1, [pc, #28]	@ (80086ac <USBD_FS_ProductStrDescriptor+0x34>)
 800868e:	4808      	ldr	r0, [pc, #32]	@ (80086b0 <USBD_FS_ProductStrDescriptor+0x38>)
 8008690:	f7ff fe0d 	bl	80082ae <USBD_GetString>
 8008694:	e004      	b.n	80086a0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008696:	683a      	ldr	r2, [r7, #0]
 8008698:	4904      	ldr	r1, [pc, #16]	@ (80086ac <USBD_FS_ProductStrDescriptor+0x34>)
 800869a:	4805      	ldr	r0, [pc, #20]	@ (80086b0 <USBD_FS_ProductStrDescriptor+0x38>)
 800869c:	f7ff fe07 	bl	80082ae <USBD_GetString>
  }
  return USBD_StrDesc;
 80086a0:	4b02      	ldr	r3, [pc, #8]	@ (80086ac <USBD_FS_ProductStrDescriptor+0x34>)
}
 80086a2:	4618      	mov	r0, r3
 80086a4:	3708      	adds	r7, #8
 80086a6:	46bd      	mov	sp, r7
 80086a8:	bd80      	pop	{r7, pc}
 80086aa:	bf00      	nop
 80086ac:	20000d20 	.word	0x20000d20
 80086b0:	08008e10 	.word	0x08008e10

080086b4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80086b4:	b580      	push	{r7, lr}
 80086b6:	b082      	sub	sp, #8
 80086b8:	af00      	add	r7, sp, #0
 80086ba:	4603      	mov	r3, r0
 80086bc:	6039      	str	r1, [r7, #0]
 80086be:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80086c0:	683a      	ldr	r2, [r7, #0]
 80086c2:	4904      	ldr	r1, [pc, #16]	@ (80086d4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80086c4:	4804      	ldr	r0, [pc, #16]	@ (80086d8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80086c6:	f7ff fdf2 	bl	80082ae <USBD_GetString>
  return USBD_StrDesc;
 80086ca:	4b02      	ldr	r3, [pc, #8]	@ (80086d4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80086cc:	4618      	mov	r0, r3
 80086ce:	3708      	adds	r7, #8
 80086d0:	46bd      	mov	sp, r7
 80086d2:	bd80      	pop	{r7, pc}
 80086d4:	20000d20 	.word	0x20000d20
 80086d8:	08008e28 	.word	0x08008e28

080086dc <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80086dc:	b580      	push	{r7, lr}
 80086de:	b082      	sub	sp, #8
 80086e0:	af00      	add	r7, sp, #0
 80086e2:	4603      	mov	r3, r0
 80086e4:	6039      	str	r1, [r7, #0]
 80086e6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80086e8:	683b      	ldr	r3, [r7, #0]
 80086ea:	221a      	movs	r2, #26
 80086ec:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80086ee:	f000 f843 	bl	8008778 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80086f2:	4b02      	ldr	r3, [pc, #8]	@ (80086fc <USBD_FS_SerialStrDescriptor+0x20>)
}
 80086f4:	4618      	mov	r0, r3
 80086f6:	3708      	adds	r7, #8
 80086f8:	46bd      	mov	sp, r7
 80086fa:	bd80      	pop	{r7, pc}
 80086fc:	20000160 	.word	0x20000160

08008700 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008700:	b580      	push	{r7, lr}
 8008702:	b082      	sub	sp, #8
 8008704:	af00      	add	r7, sp, #0
 8008706:	4603      	mov	r3, r0
 8008708:	6039      	str	r1, [r7, #0]
 800870a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800870c:	79fb      	ldrb	r3, [r7, #7]
 800870e:	2b00      	cmp	r3, #0
 8008710:	d105      	bne.n	800871e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008712:	683a      	ldr	r2, [r7, #0]
 8008714:	4907      	ldr	r1, [pc, #28]	@ (8008734 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008716:	4808      	ldr	r0, [pc, #32]	@ (8008738 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008718:	f7ff fdc9 	bl	80082ae <USBD_GetString>
 800871c:	e004      	b.n	8008728 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800871e:	683a      	ldr	r2, [r7, #0]
 8008720:	4904      	ldr	r1, [pc, #16]	@ (8008734 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008722:	4805      	ldr	r0, [pc, #20]	@ (8008738 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008724:	f7ff fdc3 	bl	80082ae <USBD_GetString>
  }
  return USBD_StrDesc;
 8008728:	4b02      	ldr	r3, [pc, #8]	@ (8008734 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800872a:	4618      	mov	r0, r3
 800872c:	3708      	adds	r7, #8
 800872e:	46bd      	mov	sp, r7
 8008730:	bd80      	pop	{r7, pc}
 8008732:	bf00      	nop
 8008734:	20000d20 	.word	0x20000d20
 8008738:	08008e3c 	.word	0x08008e3c

0800873c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800873c:	b580      	push	{r7, lr}
 800873e:	b082      	sub	sp, #8
 8008740:	af00      	add	r7, sp, #0
 8008742:	4603      	mov	r3, r0
 8008744:	6039      	str	r1, [r7, #0]
 8008746:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008748:	79fb      	ldrb	r3, [r7, #7]
 800874a:	2b00      	cmp	r3, #0
 800874c:	d105      	bne.n	800875a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800874e:	683a      	ldr	r2, [r7, #0]
 8008750:	4907      	ldr	r1, [pc, #28]	@ (8008770 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008752:	4808      	ldr	r0, [pc, #32]	@ (8008774 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008754:	f7ff fdab 	bl	80082ae <USBD_GetString>
 8008758:	e004      	b.n	8008764 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800875a:	683a      	ldr	r2, [r7, #0]
 800875c:	4904      	ldr	r1, [pc, #16]	@ (8008770 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800875e:	4805      	ldr	r0, [pc, #20]	@ (8008774 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008760:	f7ff fda5 	bl	80082ae <USBD_GetString>
  }
  return USBD_StrDesc;
 8008764:	4b02      	ldr	r3, [pc, #8]	@ (8008770 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008766:	4618      	mov	r0, r3
 8008768:	3708      	adds	r7, #8
 800876a:	46bd      	mov	sp, r7
 800876c:	bd80      	pop	{r7, pc}
 800876e:	bf00      	nop
 8008770:	20000d20 	.word	0x20000d20
 8008774:	08008e48 	.word	0x08008e48

08008778 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008778:	b580      	push	{r7, lr}
 800877a:	b084      	sub	sp, #16
 800877c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800877e:	4b0f      	ldr	r3, [pc, #60]	@ (80087bc <Get_SerialNum+0x44>)
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008784:	4b0e      	ldr	r3, [pc, #56]	@ (80087c0 <Get_SerialNum+0x48>)
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800878a:	4b0e      	ldr	r3, [pc, #56]	@ (80087c4 <Get_SerialNum+0x4c>)
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008790:	68fa      	ldr	r2, [r7, #12]
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	4413      	add	r3, r2
 8008796:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	2b00      	cmp	r3, #0
 800879c:	d009      	beq.n	80087b2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800879e:	2208      	movs	r2, #8
 80087a0:	4909      	ldr	r1, [pc, #36]	@ (80087c8 <Get_SerialNum+0x50>)
 80087a2:	68f8      	ldr	r0, [r7, #12]
 80087a4:	f000 f814 	bl	80087d0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80087a8:	2204      	movs	r2, #4
 80087aa:	4908      	ldr	r1, [pc, #32]	@ (80087cc <Get_SerialNum+0x54>)
 80087ac:	68b8      	ldr	r0, [r7, #8]
 80087ae:	f000 f80f 	bl	80087d0 <IntToUnicode>
  }
}
 80087b2:	bf00      	nop
 80087b4:	3710      	adds	r7, #16
 80087b6:	46bd      	mov	sp, r7
 80087b8:	bd80      	pop	{r7, pc}
 80087ba:	bf00      	nop
 80087bc:	1ffff7e8 	.word	0x1ffff7e8
 80087c0:	1ffff7ec 	.word	0x1ffff7ec
 80087c4:	1ffff7f0 	.word	0x1ffff7f0
 80087c8:	20000162 	.word	0x20000162
 80087cc:	20000172 	.word	0x20000172

080087d0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80087d0:	b480      	push	{r7}
 80087d2:	b087      	sub	sp, #28
 80087d4:	af00      	add	r7, sp, #0
 80087d6:	60f8      	str	r0, [r7, #12]
 80087d8:	60b9      	str	r1, [r7, #8]
 80087da:	4613      	mov	r3, r2
 80087dc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80087de:	2300      	movs	r3, #0
 80087e0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80087e2:	2300      	movs	r3, #0
 80087e4:	75fb      	strb	r3, [r7, #23]
 80087e6:	e027      	b.n	8008838 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	0f1b      	lsrs	r3, r3, #28
 80087ec:	2b09      	cmp	r3, #9
 80087ee:	d80b      	bhi.n	8008808 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	0f1b      	lsrs	r3, r3, #28
 80087f4:	b2da      	uxtb	r2, r3
 80087f6:	7dfb      	ldrb	r3, [r7, #23]
 80087f8:	005b      	lsls	r3, r3, #1
 80087fa:	4619      	mov	r1, r3
 80087fc:	68bb      	ldr	r3, [r7, #8]
 80087fe:	440b      	add	r3, r1
 8008800:	3230      	adds	r2, #48	@ 0x30
 8008802:	b2d2      	uxtb	r2, r2
 8008804:	701a      	strb	r2, [r3, #0]
 8008806:	e00a      	b.n	800881e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	0f1b      	lsrs	r3, r3, #28
 800880c:	b2da      	uxtb	r2, r3
 800880e:	7dfb      	ldrb	r3, [r7, #23]
 8008810:	005b      	lsls	r3, r3, #1
 8008812:	4619      	mov	r1, r3
 8008814:	68bb      	ldr	r3, [r7, #8]
 8008816:	440b      	add	r3, r1
 8008818:	3237      	adds	r2, #55	@ 0x37
 800881a:	b2d2      	uxtb	r2, r2
 800881c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	011b      	lsls	r3, r3, #4
 8008822:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008824:	7dfb      	ldrb	r3, [r7, #23]
 8008826:	005b      	lsls	r3, r3, #1
 8008828:	3301      	adds	r3, #1
 800882a:	68ba      	ldr	r2, [r7, #8]
 800882c:	4413      	add	r3, r2
 800882e:	2200      	movs	r2, #0
 8008830:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008832:	7dfb      	ldrb	r3, [r7, #23]
 8008834:	3301      	adds	r3, #1
 8008836:	75fb      	strb	r3, [r7, #23]
 8008838:	7dfa      	ldrb	r2, [r7, #23]
 800883a:	79fb      	ldrb	r3, [r7, #7]
 800883c:	429a      	cmp	r2, r3
 800883e:	d3d3      	bcc.n	80087e8 <IntToUnicode+0x18>
  }
}
 8008840:	bf00      	nop
 8008842:	bf00      	nop
 8008844:	371c      	adds	r7, #28
 8008846:	46bd      	mov	sp, r7
 8008848:	bc80      	pop	{r7}
 800884a:	4770      	bx	lr

0800884c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800884c:	b580      	push	{r7, lr}
 800884e:	b084      	sub	sp, #16
 8008850:	af00      	add	r7, sp, #0
 8008852:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	4a0d      	ldr	r2, [pc, #52]	@ (8008890 <HAL_PCD_MspInit+0x44>)
 800885a:	4293      	cmp	r3, r2
 800885c:	d113      	bne.n	8008886 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800885e:	4b0d      	ldr	r3, [pc, #52]	@ (8008894 <HAL_PCD_MspInit+0x48>)
 8008860:	69db      	ldr	r3, [r3, #28]
 8008862:	4a0c      	ldr	r2, [pc, #48]	@ (8008894 <HAL_PCD_MspInit+0x48>)
 8008864:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8008868:	61d3      	str	r3, [r2, #28]
 800886a:	4b0a      	ldr	r3, [pc, #40]	@ (8008894 <HAL_PCD_MspInit+0x48>)
 800886c:	69db      	ldr	r3, [r3, #28]
 800886e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008872:	60fb      	str	r3, [r7, #12]
 8008874:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8008876:	2200      	movs	r2, #0
 8008878:	2100      	movs	r1, #0
 800887a:	2014      	movs	r0, #20
 800887c:	f7f8 feb1 	bl	80015e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8008880:	2014      	movs	r0, #20
 8008882:	f7f8 feca 	bl	800161a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8008886:	bf00      	nop
 8008888:	3710      	adds	r7, #16
 800888a:	46bd      	mov	sp, r7
 800888c:	bd80      	pop	{r7, pc}
 800888e:	bf00      	nop
 8008890:	40005c00 	.word	0x40005c00
 8008894:	40021000 	.word	0x40021000

08008898 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008898:	b580      	push	{r7, lr}
 800889a:	b082      	sub	sp, #8
 800889c:	af00      	add	r7, sp, #0
 800889e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 80088ac:	4619      	mov	r1, r3
 80088ae:	4610      	mov	r0, r2
 80088b0:	f7fe fdcf 	bl	8007452 <USBD_LL_SetupStage>
}
 80088b4:	bf00      	nop
 80088b6:	3708      	adds	r7, #8
 80088b8:	46bd      	mov	sp, r7
 80088ba:	bd80      	pop	{r7, pc}

080088bc <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80088bc:	b580      	push	{r7, lr}
 80088be:	b082      	sub	sp, #8
 80088c0:	af00      	add	r7, sp, #0
 80088c2:	6078      	str	r0, [r7, #4]
 80088c4:	460b      	mov	r3, r1
 80088c6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 80088ce:	78fa      	ldrb	r2, [r7, #3]
 80088d0:	6879      	ldr	r1, [r7, #4]
 80088d2:	4613      	mov	r3, r2
 80088d4:	009b      	lsls	r3, r3, #2
 80088d6:	4413      	add	r3, r2
 80088d8:	00db      	lsls	r3, r3, #3
 80088da:	440b      	add	r3, r1
 80088dc:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80088e0:	681a      	ldr	r2, [r3, #0]
 80088e2:	78fb      	ldrb	r3, [r7, #3]
 80088e4:	4619      	mov	r1, r3
 80088e6:	f7fe fe01 	bl	80074ec <USBD_LL_DataOutStage>
}
 80088ea:	bf00      	nop
 80088ec:	3708      	adds	r7, #8
 80088ee:	46bd      	mov	sp, r7
 80088f0:	bd80      	pop	{r7, pc}

080088f2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80088f2:	b580      	push	{r7, lr}
 80088f4:	b082      	sub	sp, #8
 80088f6:	af00      	add	r7, sp, #0
 80088f8:	6078      	str	r0, [r7, #4]
 80088fa:	460b      	mov	r3, r1
 80088fc:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 8008904:	78fa      	ldrb	r2, [r7, #3]
 8008906:	6879      	ldr	r1, [r7, #4]
 8008908:	4613      	mov	r3, r2
 800890a:	009b      	lsls	r3, r3, #2
 800890c:	4413      	add	r3, r2
 800890e:	00db      	lsls	r3, r3, #3
 8008910:	440b      	add	r3, r1
 8008912:	3324      	adds	r3, #36	@ 0x24
 8008914:	681a      	ldr	r2, [r3, #0]
 8008916:	78fb      	ldrb	r3, [r7, #3]
 8008918:	4619      	mov	r1, r3
 800891a:	f7fe fe58 	bl	80075ce <USBD_LL_DataInStage>
}
 800891e:	bf00      	nop
 8008920:	3708      	adds	r7, #8
 8008922:	46bd      	mov	sp, r7
 8008924:	bd80      	pop	{r7, pc}

08008926 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008926:	b580      	push	{r7, lr}
 8008928:	b082      	sub	sp, #8
 800892a:	af00      	add	r7, sp, #0
 800892c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008934:	4618      	mov	r0, r3
 8008936:	f7fe ff68 	bl	800780a <USBD_LL_SOF>
}
 800893a:	bf00      	nop
 800893c:	3708      	adds	r7, #8
 800893e:	46bd      	mov	sp, r7
 8008940:	bd80      	pop	{r7, pc}

08008942 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008942:	b580      	push	{r7, lr}
 8008944:	b084      	sub	sp, #16
 8008946:	af00      	add	r7, sp, #0
 8008948:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800894a:	2301      	movs	r3, #1
 800894c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	799b      	ldrb	r3, [r3, #6]
 8008952:	2b02      	cmp	r3, #2
 8008954:	d001      	beq.n	800895a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8008956:	f7f8 fc0b 	bl	8001170 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008960:	7bfa      	ldrb	r2, [r7, #15]
 8008962:	4611      	mov	r1, r2
 8008964:	4618      	mov	r0, r3
 8008966:	f7fe ff18 	bl	800779a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008970:	4618      	mov	r0, r3
 8008972:	f7fe fed1 	bl	8007718 <USBD_LL_Reset>
}
 8008976:	bf00      	nop
 8008978:	3710      	adds	r7, #16
 800897a:	46bd      	mov	sp, r7
 800897c:	bd80      	pop	{r7, pc}
	...

08008980 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008980:	b580      	push	{r7, lr}
 8008982:	b082      	sub	sp, #8
 8008984:	af00      	add	r7, sp, #0
 8008986:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800898e:	4618      	mov	r0, r3
 8008990:	f7fe ff12 	bl	80077b8 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	7a9b      	ldrb	r3, [r3, #10]
 8008998:	2b00      	cmp	r3, #0
 800899a:	d005      	beq.n	80089a8 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800899c:	4b04      	ldr	r3, [pc, #16]	@ (80089b0 <HAL_PCD_SuspendCallback+0x30>)
 800899e:	691b      	ldr	r3, [r3, #16]
 80089a0:	4a03      	ldr	r2, [pc, #12]	@ (80089b0 <HAL_PCD_SuspendCallback+0x30>)
 80089a2:	f043 0306 	orr.w	r3, r3, #6
 80089a6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80089a8:	bf00      	nop
 80089aa:	3708      	adds	r7, #8
 80089ac:	46bd      	mov	sp, r7
 80089ae:	bd80      	pop	{r7, pc}
 80089b0:	e000ed00 	.word	0xe000ed00

080089b4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80089b4:	b580      	push	{r7, lr}
 80089b6:	b082      	sub	sp, #8
 80089b8:	af00      	add	r7, sp, #0
 80089ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80089c2:	4618      	mov	r0, r3
 80089c4:	f7fe ff0c 	bl	80077e0 <USBD_LL_Resume>
}
 80089c8:	bf00      	nop
 80089ca:	3708      	adds	r7, #8
 80089cc:	46bd      	mov	sp, r7
 80089ce:	bd80      	pop	{r7, pc}

080089d0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80089d0:	b580      	push	{r7, lr}
 80089d2:	b082      	sub	sp, #8
 80089d4:	af00      	add	r7, sp, #0
 80089d6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 80089d8:	4a28      	ldr	r2, [pc, #160]	@ (8008a7c <USBD_LL_Init+0xac>)
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	f8c2 32d4 	str.w	r3, [r2, #724]	@ 0x2d4
  pdev->pData = &hpcd_USB_FS;
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	4a26      	ldr	r2, [pc, #152]	@ (8008a7c <USBD_LL_Init+0xac>)
 80089e4:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  hpcd_USB_FS.Instance = USB;
 80089e8:	4b24      	ldr	r3, [pc, #144]	@ (8008a7c <USBD_LL_Init+0xac>)
 80089ea:	4a25      	ldr	r2, [pc, #148]	@ (8008a80 <USBD_LL_Init+0xb0>)
 80089ec:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80089ee:	4b23      	ldr	r3, [pc, #140]	@ (8008a7c <USBD_LL_Init+0xac>)
 80089f0:	2208      	movs	r2, #8
 80089f2:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80089f4:	4b21      	ldr	r3, [pc, #132]	@ (8008a7c <USBD_LL_Init+0xac>)
 80089f6:	2202      	movs	r2, #2
 80089f8:	719a      	strb	r2, [r3, #6]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80089fa:	4b20      	ldr	r3, [pc, #128]	@ (8008a7c <USBD_LL_Init+0xac>)
 80089fc:	2200      	movs	r2, #0
 80089fe:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8008a00:	4b1e      	ldr	r3, [pc, #120]	@ (8008a7c <USBD_LL_Init+0xac>)
 8008a02:	2200      	movs	r2, #0
 8008a04:	72da      	strb	r2, [r3, #11]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8008a06:	4b1d      	ldr	r3, [pc, #116]	@ (8008a7c <USBD_LL_Init+0xac>)
 8008a08:	2200      	movs	r2, #0
 8008a0a:	731a      	strb	r2, [r3, #12]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8008a0c:	481b      	ldr	r0, [pc, #108]	@ (8008a7c <USBD_LL_Init+0xac>)
 8008a0e:	f7f8 ffd2 	bl	80019b6 <HAL_PCD_Init>
 8008a12:	4603      	mov	r3, r0
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d001      	beq.n	8008a1c <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8008a18:	f7f8 fbaa 	bl	8001170 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8008a22:	2318      	movs	r3, #24
 8008a24:	2200      	movs	r2, #0
 8008a26:	2100      	movs	r1, #0
 8008a28:	f7fa fce3 	bl	80033f2 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8008a32:	2358      	movs	r3, #88	@ 0x58
 8008a34:	2200      	movs	r2, #0
 8008a36:	2180      	movs	r1, #128	@ 0x80
 8008a38:	f7fa fcdb 	bl	80033f2 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8008a42:	23c0      	movs	r3, #192	@ 0xc0
 8008a44:	2200      	movs	r2, #0
 8008a46:	2181      	movs	r1, #129	@ 0x81
 8008a48:	f7fa fcd3 	bl	80033f2 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8008a52:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8008a56:	2200      	movs	r2, #0
 8008a58:	2101      	movs	r1, #1
 8008a5a:	f7fa fcca 	bl	80033f2 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8008a64:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8008a68:	2200      	movs	r2, #0
 8008a6a:	2182      	movs	r1, #130	@ 0x82
 8008a6c:	f7fa fcc1 	bl	80033f2 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8008a70:	2300      	movs	r3, #0
}
 8008a72:	4618      	mov	r0, r3
 8008a74:	3708      	adds	r7, #8
 8008a76:	46bd      	mov	sp, r7
 8008a78:	bd80      	pop	{r7, pc}
 8008a7a:	bf00      	nop
 8008a7c:	20000f20 	.word	0x20000f20
 8008a80:	40005c00 	.word	0x40005c00

08008a84 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008a84:	b580      	push	{r7, lr}
 8008a86:	b084      	sub	sp, #16
 8008a88:	af00      	add	r7, sp, #0
 8008a8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008a8c:	2300      	movs	r3, #0
 8008a8e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008a90:	2300      	movs	r3, #0
 8008a92:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008a9a:	4618      	mov	r0, r3
 8008a9c:	f7f9 f881 	bl	8001ba2 <HAL_PCD_Start>
 8008aa0:	4603      	mov	r3, r0
 8008aa2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008aa4:	7bfb      	ldrb	r3, [r7, #15]
 8008aa6:	4618      	mov	r0, r3
 8008aa8:	f000 f94e 	bl	8008d48 <USBD_Get_USB_Status>
 8008aac:	4603      	mov	r3, r0
 8008aae:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008ab0:	7bbb      	ldrb	r3, [r7, #14]
}
 8008ab2:	4618      	mov	r0, r3
 8008ab4:	3710      	adds	r7, #16
 8008ab6:	46bd      	mov	sp, r7
 8008ab8:	bd80      	pop	{r7, pc}

08008aba <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008aba:	b580      	push	{r7, lr}
 8008abc:	b084      	sub	sp, #16
 8008abe:	af00      	add	r7, sp, #0
 8008ac0:	6078      	str	r0, [r7, #4]
 8008ac2:	4608      	mov	r0, r1
 8008ac4:	4611      	mov	r1, r2
 8008ac6:	461a      	mov	r2, r3
 8008ac8:	4603      	mov	r3, r0
 8008aca:	70fb      	strb	r3, [r7, #3]
 8008acc:	460b      	mov	r3, r1
 8008ace:	70bb      	strb	r3, [r7, #2]
 8008ad0:	4613      	mov	r3, r2
 8008ad2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008ad4:	2300      	movs	r3, #0
 8008ad6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008ad8:	2300      	movs	r3, #0
 8008ada:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8008ae2:	78bb      	ldrb	r3, [r7, #2]
 8008ae4:	883a      	ldrh	r2, [r7, #0]
 8008ae6:	78f9      	ldrb	r1, [r7, #3]
 8008ae8:	f7f9 f9d5 	bl	8001e96 <HAL_PCD_EP_Open>
 8008aec:	4603      	mov	r3, r0
 8008aee:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008af0:	7bfb      	ldrb	r3, [r7, #15]
 8008af2:	4618      	mov	r0, r3
 8008af4:	f000 f928 	bl	8008d48 <USBD_Get_USB_Status>
 8008af8:	4603      	mov	r3, r0
 8008afa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008afc:	7bbb      	ldrb	r3, [r7, #14]
}
 8008afe:	4618      	mov	r0, r3
 8008b00:	3710      	adds	r7, #16
 8008b02:	46bd      	mov	sp, r7
 8008b04:	bd80      	pop	{r7, pc}

08008b06 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008b06:	b580      	push	{r7, lr}
 8008b08:	b084      	sub	sp, #16
 8008b0a:	af00      	add	r7, sp, #0
 8008b0c:	6078      	str	r0, [r7, #4]
 8008b0e:	460b      	mov	r3, r1
 8008b10:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b12:	2300      	movs	r3, #0
 8008b14:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008b16:	2300      	movs	r3, #0
 8008b18:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008b20:	78fa      	ldrb	r2, [r7, #3]
 8008b22:	4611      	mov	r1, r2
 8008b24:	4618      	mov	r0, r3
 8008b26:	f7f9 fa13 	bl	8001f50 <HAL_PCD_EP_Close>
 8008b2a:	4603      	mov	r3, r0
 8008b2c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008b2e:	7bfb      	ldrb	r3, [r7, #15]
 8008b30:	4618      	mov	r0, r3
 8008b32:	f000 f909 	bl	8008d48 <USBD_Get_USB_Status>
 8008b36:	4603      	mov	r3, r0
 8008b38:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008b3a:	7bbb      	ldrb	r3, [r7, #14]
}
 8008b3c:	4618      	mov	r0, r3
 8008b3e:	3710      	adds	r7, #16
 8008b40:	46bd      	mov	sp, r7
 8008b42:	bd80      	pop	{r7, pc}

08008b44 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008b44:	b580      	push	{r7, lr}
 8008b46:	b084      	sub	sp, #16
 8008b48:	af00      	add	r7, sp, #0
 8008b4a:	6078      	str	r0, [r7, #4]
 8008b4c:	460b      	mov	r3, r1
 8008b4e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b50:	2300      	movs	r3, #0
 8008b52:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008b54:	2300      	movs	r3, #0
 8008b56:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008b5e:	78fa      	ldrb	r2, [r7, #3]
 8008b60:	4611      	mov	r1, r2
 8008b62:	4618      	mov	r0, r3
 8008b64:	f7f9 fabb 	bl	80020de <HAL_PCD_EP_SetStall>
 8008b68:	4603      	mov	r3, r0
 8008b6a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008b6c:	7bfb      	ldrb	r3, [r7, #15]
 8008b6e:	4618      	mov	r0, r3
 8008b70:	f000 f8ea 	bl	8008d48 <USBD_Get_USB_Status>
 8008b74:	4603      	mov	r3, r0
 8008b76:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008b78:	7bbb      	ldrb	r3, [r7, #14]
}
 8008b7a:	4618      	mov	r0, r3
 8008b7c:	3710      	adds	r7, #16
 8008b7e:	46bd      	mov	sp, r7
 8008b80:	bd80      	pop	{r7, pc}

08008b82 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008b82:	b580      	push	{r7, lr}
 8008b84:	b084      	sub	sp, #16
 8008b86:	af00      	add	r7, sp, #0
 8008b88:	6078      	str	r0, [r7, #4]
 8008b8a:	460b      	mov	r3, r1
 8008b8c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b8e:	2300      	movs	r3, #0
 8008b90:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008b92:	2300      	movs	r3, #0
 8008b94:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008b9c:	78fa      	ldrb	r2, [r7, #3]
 8008b9e:	4611      	mov	r1, r2
 8008ba0:	4618      	mov	r0, r3
 8008ba2:	f7f9 fafc 	bl	800219e <HAL_PCD_EP_ClrStall>
 8008ba6:	4603      	mov	r3, r0
 8008ba8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008baa:	7bfb      	ldrb	r3, [r7, #15]
 8008bac:	4618      	mov	r0, r3
 8008bae:	f000 f8cb 	bl	8008d48 <USBD_Get_USB_Status>
 8008bb2:	4603      	mov	r3, r0
 8008bb4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008bb6:	7bbb      	ldrb	r3, [r7, #14]
}
 8008bb8:	4618      	mov	r0, r3
 8008bba:	3710      	adds	r7, #16
 8008bbc:	46bd      	mov	sp, r7
 8008bbe:	bd80      	pop	{r7, pc}

08008bc0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008bc0:	b480      	push	{r7}
 8008bc2:	b085      	sub	sp, #20
 8008bc4:	af00      	add	r7, sp, #0
 8008bc6:	6078      	str	r0, [r7, #4]
 8008bc8:	460b      	mov	r3, r1
 8008bca:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008bd2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008bd4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	da0b      	bge.n	8008bf4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008bdc:	78fb      	ldrb	r3, [r7, #3]
 8008bde:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008be2:	68f9      	ldr	r1, [r7, #12]
 8008be4:	4613      	mov	r3, r2
 8008be6:	009b      	lsls	r3, r3, #2
 8008be8:	4413      	add	r3, r2
 8008bea:	00db      	lsls	r3, r3, #3
 8008bec:	440b      	add	r3, r1
 8008bee:	3312      	adds	r3, #18
 8008bf0:	781b      	ldrb	r3, [r3, #0]
 8008bf2:	e00b      	b.n	8008c0c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008bf4:	78fb      	ldrb	r3, [r7, #3]
 8008bf6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008bfa:	68f9      	ldr	r1, [r7, #12]
 8008bfc:	4613      	mov	r3, r2
 8008bfe:	009b      	lsls	r3, r3, #2
 8008c00:	4413      	add	r3, r2
 8008c02:	00db      	lsls	r3, r3, #3
 8008c04:	440b      	add	r3, r1
 8008c06:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 8008c0a:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008c0c:	4618      	mov	r0, r3
 8008c0e:	3714      	adds	r7, #20
 8008c10:	46bd      	mov	sp, r7
 8008c12:	bc80      	pop	{r7}
 8008c14:	4770      	bx	lr

08008c16 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008c16:	b580      	push	{r7, lr}
 8008c18:	b084      	sub	sp, #16
 8008c1a:	af00      	add	r7, sp, #0
 8008c1c:	6078      	str	r0, [r7, #4]
 8008c1e:	460b      	mov	r3, r1
 8008c20:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008c22:	2300      	movs	r3, #0
 8008c24:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008c26:	2300      	movs	r3, #0
 8008c28:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008c30:	78fa      	ldrb	r2, [r7, #3]
 8008c32:	4611      	mov	r1, r2
 8008c34:	4618      	mov	r0, r3
 8008c36:	f7f9 f90a 	bl	8001e4e <HAL_PCD_SetAddress>
 8008c3a:	4603      	mov	r3, r0
 8008c3c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008c3e:	7bfb      	ldrb	r3, [r7, #15]
 8008c40:	4618      	mov	r0, r3
 8008c42:	f000 f881 	bl	8008d48 <USBD_Get_USB_Status>
 8008c46:	4603      	mov	r3, r0
 8008c48:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008c4a:	7bbb      	ldrb	r3, [r7, #14]
}
 8008c4c:	4618      	mov	r0, r3
 8008c4e:	3710      	adds	r7, #16
 8008c50:	46bd      	mov	sp, r7
 8008c52:	bd80      	pop	{r7, pc}

08008c54 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008c54:	b580      	push	{r7, lr}
 8008c56:	b086      	sub	sp, #24
 8008c58:	af00      	add	r7, sp, #0
 8008c5a:	60f8      	str	r0, [r7, #12]
 8008c5c:	607a      	str	r2, [r7, #4]
 8008c5e:	461a      	mov	r2, r3
 8008c60:	460b      	mov	r3, r1
 8008c62:	72fb      	strb	r3, [r7, #11]
 8008c64:	4613      	mov	r3, r2
 8008c66:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008c68:	2300      	movs	r3, #0
 8008c6a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008c6c:	2300      	movs	r3, #0
 8008c6e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8008c76:	893b      	ldrh	r3, [r7, #8]
 8008c78:	7af9      	ldrb	r1, [r7, #11]
 8008c7a:	687a      	ldr	r2, [r7, #4]
 8008c7c:	f7f9 f9f8 	bl	8002070 <HAL_PCD_EP_Transmit>
 8008c80:	4603      	mov	r3, r0
 8008c82:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008c84:	7dfb      	ldrb	r3, [r7, #23]
 8008c86:	4618      	mov	r0, r3
 8008c88:	f000 f85e 	bl	8008d48 <USBD_Get_USB_Status>
 8008c8c:	4603      	mov	r3, r0
 8008c8e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008c90:	7dbb      	ldrb	r3, [r7, #22]
}
 8008c92:	4618      	mov	r0, r3
 8008c94:	3718      	adds	r7, #24
 8008c96:	46bd      	mov	sp, r7
 8008c98:	bd80      	pop	{r7, pc}

08008c9a <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008c9a:	b580      	push	{r7, lr}
 8008c9c:	b086      	sub	sp, #24
 8008c9e:	af00      	add	r7, sp, #0
 8008ca0:	60f8      	str	r0, [r7, #12]
 8008ca2:	607a      	str	r2, [r7, #4]
 8008ca4:	461a      	mov	r2, r3
 8008ca6:	460b      	mov	r3, r1
 8008ca8:	72fb      	strb	r3, [r7, #11]
 8008caa:	4613      	mov	r3, r2
 8008cac:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008cae:	2300      	movs	r3, #0
 8008cb0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008cb2:	2300      	movs	r3, #0
 8008cb4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8008cbc:	893b      	ldrh	r3, [r7, #8]
 8008cbe:	7af9      	ldrb	r1, [r7, #11]
 8008cc0:	687a      	ldr	r2, [r7, #4]
 8008cc2:	f7f9 f98d 	bl	8001fe0 <HAL_PCD_EP_Receive>
 8008cc6:	4603      	mov	r3, r0
 8008cc8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008cca:	7dfb      	ldrb	r3, [r7, #23]
 8008ccc:	4618      	mov	r0, r3
 8008cce:	f000 f83b 	bl	8008d48 <USBD_Get_USB_Status>
 8008cd2:	4603      	mov	r3, r0
 8008cd4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008cd6:	7dbb      	ldrb	r3, [r7, #22]
}
 8008cd8:	4618      	mov	r0, r3
 8008cda:	3718      	adds	r7, #24
 8008cdc:	46bd      	mov	sp, r7
 8008cde:	bd80      	pop	{r7, pc}

08008ce0 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008ce0:	b580      	push	{r7, lr}
 8008ce2:	b082      	sub	sp, #8
 8008ce4:	af00      	add	r7, sp, #0
 8008ce6:	6078      	str	r0, [r7, #4]
 8008ce8:	460b      	mov	r3, r1
 8008cea:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008cf2:	78fa      	ldrb	r2, [r7, #3]
 8008cf4:	4611      	mov	r1, r2
 8008cf6:	4618      	mov	r0, r3
 8008cf8:	f7f9 f9a3 	bl	8002042 <HAL_PCD_EP_GetRxCount>
 8008cfc:	4603      	mov	r3, r0
}
 8008cfe:	4618      	mov	r0, r3
 8008d00:	3708      	adds	r7, #8
 8008d02:	46bd      	mov	sp, r7
 8008d04:	bd80      	pop	{r7, pc}
	...

08008d08 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008d08:	b480      	push	{r7}
 8008d0a:	b083      	sub	sp, #12
 8008d0c:	af00      	add	r7, sp, #0
 8008d0e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008d10:	4b02      	ldr	r3, [pc, #8]	@ (8008d1c <USBD_static_malloc+0x14>)
}
 8008d12:	4618      	mov	r0, r3
 8008d14:	370c      	adds	r7, #12
 8008d16:	46bd      	mov	sp, r7
 8008d18:	bc80      	pop	{r7}
 8008d1a:	4770      	bx	lr
 8008d1c:	200011f8 	.word	0x200011f8

08008d20 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008d20:	b480      	push	{r7}
 8008d22:	b083      	sub	sp, #12
 8008d24:	af00      	add	r7, sp, #0
 8008d26:	6078      	str	r0, [r7, #4]

}
 8008d28:	bf00      	nop
 8008d2a:	370c      	adds	r7, #12
 8008d2c:	46bd      	mov	sp, r7
 8008d2e:	bc80      	pop	{r7}
 8008d30:	4770      	bx	lr

08008d32 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008d32:	b480      	push	{r7}
 8008d34:	b083      	sub	sp, #12
 8008d36:	af00      	add	r7, sp, #0
 8008d38:	6078      	str	r0, [r7, #4]
 8008d3a:	460b      	mov	r3, r1
 8008d3c:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8008d3e:	bf00      	nop
 8008d40:	370c      	adds	r7, #12
 8008d42:	46bd      	mov	sp, r7
 8008d44:	bc80      	pop	{r7}
 8008d46:	4770      	bx	lr

08008d48 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008d48:	b480      	push	{r7}
 8008d4a:	b085      	sub	sp, #20
 8008d4c:	af00      	add	r7, sp, #0
 8008d4e:	4603      	mov	r3, r0
 8008d50:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008d52:	2300      	movs	r3, #0
 8008d54:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008d56:	79fb      	ldrb	r3, [r7, #7]
 8008d58:	2b03      	cmp	r3, #3
 8008d5a:	d817      	bhi.n	8008d8c <USBD_Get_USB_Status+0x44>
 8008d5c:	a201      	add	r2, pc, #4	@ (adr r2, 8008d64 <USBD_Get_USB_Status+0x1c>)
 8008d5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d62:	bf00      	nop
 8008d64:	08008d75 	.word	0x08008d75
 8008d68:	08008d7b 	.word	0x08008d7b
 8008d6c:	08008d81 	.word	0x08008d81
 8008d70:	08008d87 	.word	0x08008d87
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008d74:	2300      	movs	r3, #0
 8008d76:	73fb      	strb	r3, [r7, #15]
    break;
 8008d78:	e00b      	b.n	8008d92 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008d7a:	2302      	movs	r3, #2
 8008d7c:	73fb      	strb	r3, [r7, #15]
    break;
 8008d7e:	e008      	b.n	8008d92 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008d80:	2301      	movs	r3, #1
 8008d82:	73fb      	strb	r3, [r7, #15]
    break;
 8008d84:	e005      	b.n	8008d92 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008d86:	2302      	movs	r3, #2
 8008d88:	73fb      	strb	r3, [r7, #15]
    break;
 8008d8a:	e002      	b.n	8008d92 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008d8c:	2302      	movs	r3, #2
 8008d8e:	73fb      	strb	r3, [r7, #15]
    break;
 8008d90:	bf00      	nop
  }
  return usb_status;
 8008d92:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d94:	4618      	mov	r0, r3
 8008d96:	3714      	adds	r7, #20
 8008d98:	46bd      	mov	sp, r7
 8008d9a:	bc80      	pop	{r7}
 8008d9c:	4770      	bx	lr
 8008d9e:	bf00      	nop

08008da0 <memset>:
 8008da0:	4603      	mov	r3, r0
 8008da2:	4402      	add	r2, r0
 8008da4:	4293      	cmp	r3, r2
 8008da6:	d100      	bne.n	8008daa <memset+0xa>
 8008da8:	4770      	bx	lr
 8008daa:	f803 1b01 	strb.w	r1, [r3], #1
 8008dae:	e7f9      	b.n	8008da4 <memset+0x4>

08008db0 <__libc_init_array>:
 8008db0:	b570      	push	{r4, r5, r6, lr}
 8008db2:	2600      	movs	r6, #0
 8008db4:	4d0c      	ldr	r5, [pc, #48]	@ (8008de8 <__libc_init_array+0x38>)
 8008db6:	4c0d      	ldr	r4, [pc, #52]	@ (8008dec <__libc_init_array+0x3c>)
 8008db8:	1b64      	subs	r4, r4, r5
 8008dba:	10a4      	asrs	r4, r4, #2
 8008dbc:	42a6      	cmp	r6, r4
 8008dbe:	d109      	bne.n	8008dd4 <__libc_init_array+0x24>
 8008dc0:	f000 f81a 	bl	8008df8 <_init>
 8008dc4:	2600      	movs	r6, #0
 8008dc6:	4d0a      	ldr	r5, [pc, #40]	@ (8008df0 <__libc_init_array+0x40>)
 8008dc8:	4c0a      	ldr	r4, [pc, #40]	@ (8008df4 <__libc_init_array+0x44>)
 8008dca:	1b64      	subs	r4, r4, r5
 8008dcc:	10a4      	asrs	r4, r4, #2
 8008dce:	42a6      	cmp	r6, r4
 8008dd0:	d105      	bne.n	8008dde <__libc_init_array+0x2e>
 8008dd2:	bd70      	pop	{r4, r5, r6, pc}
 8008dd4:	f855 3b04 	ldr.w	r3, [r5], #4
 8008dd8:	4798      	blx	r3
 8008dda:	3601      	adds	r6, #1
 8008ddc:	e7ee      	b.n	8008dbc <__libc_init_array+0xc>
 8008dde:	f855 3b04 	ldr.w	r3, [r5], #4
 8008de2:	4798      	blx	r3
 8008de4:	3601      	adds	r6, #1
 8008de6:	e7f2      	b.n	8008dce <__libc_init_array+0x1e>
 8008de8:	08008e84 	.word	0x08008e84
 8008dec:	08008e84 	.word	0x08008e84
 8008df0:	08008e84 	.word	0x08008e84
 8008df4:	08008e88 	.word	0x08008e88

08008df8 <_init>:
 8008df8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008dfa:	bf00      	nop
 8008dfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008dfe:	bc08      	pop	{r3}
 8008e00:	469e      	mov	lr, r3
 8008e02:	4770      	bx	lr

08008e04 <_fini>:
 8008e04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e06:	bf00      	nop
 8008e08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008e0a:	bc08      	pop	{r3}
 8008e0c:	469e      	mov	lr, r3
 8008e0e:	4770      	bx	lr
